{"version":3,"sources":["machines/osi/c1p/releases/2.21/c1p-uncompiled.js","src/com/google/javascript/jscomp/js/es6/util/arrayiterator.js","src/com/google/javascript/jscomp/js/es6/util/makeiterator.js","src/com/google/javascript/jscomp/js/es6/util/arrayfromiterable.js","src/com/google/javascript/jscomp/js/es6/util/arrayfromiterator.js","src/com/google/javascript/jscomp/js/util/objectcreate.js","src/com/google/javascript/jscomp/js/util/defineproperty.js","src/com/google/javascript/jscomp/js/util/global.js","src/com/google/javascript/jscomp/js/util/polyfill.js","src/com/google/javascript/jscomp/js/es6/util/setprototypeof.js","src/com/google/javascript/jscomp/js/es6/util/inherits.js","src/com/google/javascript/jscomp/js/es6/util/restarguments.js","src/com/google/javascript/jscomp/js/es6/string/replaceall.js","src/com/google/javascript/jscomp/js/es6/math/trunc.js","src/com/google/javascript/jscomp/js/es6/string/repeat.js","src/com/google/javascript/jscomp/js/util/checkstringargs.js","src/com/google/javascript/jscomp/js/es6/number/isnan.js","src/com/google/javascript/jscomp/js/es6/symbol.js","src/com/google/javascript/jscomp/js/es6/util/iteratorfromarray.js","src/com/google/javascript/jscomp/js/es6/array/keys.js"],"names":["$jscomp.arrayIteratorImpl","$jscomp.objectCreate","$jscomp.defineProperty","$jscomp.global","$jscomp.getGlobal","$jscomp.setPrototypeOf","$jscomp.polyfill","$jscomp.iteratorPrototype","$jscomp.iteratorFromArray","browser","window","node","global","document","pcjs","globals.window","globals.pcjs","LOCALDISKS","constructor","Format","formatters","i","length","predefinedTypes","parseDate","$jscomp.getRestArgumentsapply","undefined","args","date","Date","now","s","indexOf","match","UTC","$jscomp.arrayFromIterable","sprintf","format","buffer","aParts","split","iArg","iPart","type","arg","signed","flags","hash","zeroPad","width","precision","substr","ach","radix","prefix","Format.parseDate","isNaN","getTime","replaceAll","getUTCDate","getDate","getUTCHours","getHours","getUTCMonth","getMonth","Format.NamesOfMonths","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","Format.NamesOfDays","getUTCDay","getDay","getUTCFullYear","getFullYear","Math","pow","trunc","toFixed","slice","repeat","JSON","stringify","String","fromCharCode","toString","Format.HexUpperCase","Format.HexLowerCase","abs","v","d","Number","getItem","path","item","dir","PCFS.root","nodes","PCFS.rootlength","j","name","files","next","toLowerCase","size","attr","SUBDIR","StrLib","toHex","n","cch","fPrefix","nGrouping","ceil","log","g","sPrefix","getBaseName","sFileName","sBaseName","lastIndexOf","getExtension","sExtension","escapeHTML","sHTML","replace","m","StrLib.HTMLEscapeMap","StrLib.format","StrLib.sprintf","StrLib.formatsprintfbind","bind","getResource","sURL","done","fAsync","nErrorCode","resource","resources","globals.windowlocation","location","globals.windowlocationhostname","hostname","Component.printf","DEBUG","globals.nodereadFileSync","readFileSync","encoding","err","PCFS.getItem","data","encodeURI","globals.windowXMLHttpRequest","XMLHttpRequest","request","globals.windowActiveXObject","ActiveXObject","globals.windowfetch","fetch","then","response","text","arrayBuffer","Error","catch","LOG","fArrayBuffer","fXHR2","responseType","callback","readyState","responseText","message","status","globals.windowlocationprotocol","protocol","WebLib.fAdBlockerWarning","Component.alertUser","WebLib.getHostOrigin","onreadystatechange","sPost","p","hasOwnProperty","encodeURIComponent","open","setRequestHeader","send","overrideMimeType","getHostOrigin","globals.windowlocationhost","host","SITEURL","isUserAgent","globals.windownavigator","navigator","userAgent","globals.windownavigatoruserAgent","globals.windownavigatorplatform","platform","globals.windownavigatormaxTouchPoints","maxTouchPoints","isMobile","sDevice","sMobile","WebLib.getURLParm","WebLib.isUserAgent","fInvert","getURLParm","sParm","WebLib.parmsURL","sParms","aParms","globals.windowlocationsearchsubstr","search","pl","exec","decodeURIComponent","onCountRepeat","fnRepeat","fnComplete","fnTimeout","doCountRepeat","setTimeout","onClickRepeat","e","fn","doClickRepeat","msRepeat","ms","timer","fIgnoreMouseEvents","onmousedown","e.onmousedown","msDelay","ontouchstart","e.ontouchstart","onmouseup","onmouseout","e.onmouseout","clearTimeout","ontouchend","ontouchcancel","e.ontouchcancel","onInit","WebLib.aPageEventHandlers","push","doPageEvent","sEvent","afn","WebLib.fPageEventsEnabled","NOTICE","enablePageEvents","fEnable","WebLib.fPageLoaded","WebLib.doPageEvent","WebLib.fPageShowed","doPageInit","globals.windowaddEventListener","addEventListener","doPageShow","doPageExit","Component","parms","bitsMessage","Component.lastUID","id","bindings","idMachine","ready","busy","busyCancel","initDone","powered","unloading","error","fnReady","clearError","dbg","cpu","cmp","component","addMachineResource","sName","eval","printf","shift","ERROR","alert","WARNING","sMessage","StrLib.sprintfapply","trim","console","alertUser","globals.windowalert","bindComponentControls","element","aeControls","Component.getElementsByClass","parentNode","iControl","aeChildNodes","childNodes","iNode","control","nodeType","sClass","getAttribute","aClasses","iClass","Component.getComponentParms","setBinding","getComponentByID","idRelated","components","getComponentByType","sType","componentPrev","getComponentParms","idComponent","getElementsByClass","sComponent","globals.document","ae","globals.browser","getElementsByClassName","getElementsByTagName","aeAll","re","RegExp","test","className","machineIDs","iMachine","Object","keys","configMachine","configComponent","Array","isArray","$jscomp.makeIterator","fakeElement","processCommands","fSuccess","commands","aTokens","splice","sCommand","SCRIPT","join","fnCallReady","Component.asyncCommandsindexOf","processNextCommand","Component.processCommands","fnCommand","Component.globalCommands","Component.getComponentByType","Component.componentCommands","exports","call","?.prototype","getMachineNum","nMachine","aDigits","parseInt","sHTMLType","sBinding","onclick","clearControl","value","print","printControl","PROGRESS","sText","sSearch","scrollTop","scrollHeight","setError","isReady","setReady","isBusy","fCancel","setBusy","fBusy","testBits","num","bits","bitsHi","messageEnabled","ADDR","Component.testBits","TYPES","JSC$2074_printf","STATUS","Component.asyncCommands","scriptAlert","scriptSleep","fnCallback","sDelay","scriptSelect","sValue","aBindings","options","textContent","selectedIndex","prototype","Array.prototype.indexOf","obj","start","Array.isArray","Function","Function.prototype.bind","fnBound","fToBind","apply","fnNOP","concat","arguments","TypeError","C1PPanel","parmsPanel","$jscomp.inherits","kbd","super","setPower","fOn","C1PPanel.init","init","fReady","aePanels","APPCLASS","iPanel","ePanel","panel","Component.getComponentByID","Component.bindComponentControls","WebLib.onInit","C1PCPU","parmsCPU","clearRegs","running","fAutoStart","parse","SPEED_SLOW","SPEED_FAST","SPEED_MAX","speed","nVideoUpdatesPerSecond","nStatusUpdatesPerSecond","mhzFast","aSpeeds","aSpeedDescs","aReadNotify","aWriteNotify","addrReadLower","addrReadUpper","addrWriteLower","addrWriteUpper","OP_JSR","OP_SIM","SIMOP_MSG","aOpcodeFuncs","opBRK","opORAindx","opSim","opUndefined","opORAzp","opASLzp","opPHP","opORAimm","opASLacc","opORAabs","opASLabs","opBPL","opORAindy","opORAzpx","opASLzpx","opCLC","opORAabsy","opORAabsx","opASLabsx","opJSRabs","opANDindx","opBITzp","opANDzp","opROLzp","opPLP","opANDimm","opROLacc","opBITabs","opANDabs","opROLabs","opBMI","opANDindy","opANDzpx","opROLzpx","opSEC","opANDabsy","opANDabsx","opROLabsx","opRTI","opEORindx","opEORzp","opLSRzp","opPHA","opEORimm","opLSRacc","opJMPimm16","opEORabs","opLSRabs","opBVC","opEORindy","opEORzpx","opLSRzpx","opCLI","opEORabsy","opEORabsx","opLSRabsx","opRTS","opADCindx","opADCzp","opRORzp","opPLA","opADCimm","opRORacc","opJMPabs16","opADCabs","opRORabs","opBVS","opADCindy","opADCzpx","opRORzpx","opSEI","opADCabsy","opADCabsx","opRORabsx","opSTAindx","opSTYzp","opSTAzp","opSTXzp","opDEY","opTXA","opSTYabs","opSTAabs","opSTXabs","opBCC","opSTAindy","opSTYzpx","opSTAzpx","opSTXzpy","opTYA","opSTAabsy","opTXS","opSTAabsx","opLDYimm","opLDAindx","opLDXimm","opLDYzp","opLDAzp","opLDXzp","opTAY","opLDAimm","opTAX","opLDYabs","opLDAabs","opLDXabs","opBCS","opLDAindy","opLDYzpx","opLDAzpx","opLDXzpy","opCLV","opLDAabsy","opTSX","opLDYabsx","opLDAabsx","opLDXabsy","opCPYimm","opCMPindx","opCPYzp","opCMPzp","opDECzp","opINY","opCMPimm","opDEX","opCPYabs","opCMPabs","opDECabs","opBNE","opCMPindy","opCMPzpx","opDECzpx","opCLD","opCMPabsy","opCMPabsx","opDECabsx","opCPXimm","opSBCindx","opCPXzp","opSBCzp","opINCzp","opINX","opSBCimm","opNOP","opCPXabs","opSBCabs","opINCabs","opBEQ","opSBCindy","opSBCzpx","opINCzpx","opSED","opSBCabsy","opSBCabsx","opINCabsx","aOpcodeCycles","reset","fPowerOn","halt","regPC","getWord","abMem","VECTOR_RESET","run","fBound","setSpeed","setBuffer","abMemory","end","offMem","cbMem","offLimit","video","displayVideo","updateScreen","setFocus","update","addReadNotify","findNotify","checkReadNotify","addrRead","addrFrom","addWriteNotify","checkWriteNotify","addrWrite","aNotify","fOnClick","innerHTML","nRunCycles","msRunStart","Component.getTime","calcCycles","displayReg","sReg","vReg","len","toUpperCase","displayStatus","regA","regX","regY","regP","getRegP","BIT_PC","BIT_PZ","BIT_PI","BIT_PD","BIT_PB","BIT_PV","BIT_PN","regS","mhz","fRecalc","nMostUpdatesPerSecond","nYieldsPerSecond","vMultiplier","msPerYield","round","nCyclesPerBurst","floor","nCyclesPerSecond","nCyclesPerYield","nCyclesPerVideoUpdate","nCyclesPerStatusUpdate","nCyclesNextYield","nCyclesNextVideoUpdate","nCyclesNextStatusUpdate","nRecalcCycles","calcRemainingTime","msCurrent","msYield","nCyclesThisRun","msRemainsThisRun","msStartThisRun","msElapsed","calcSpeed","calcStartTime","step","nCycles","nBurstCycles","nStepCycles","stack","stop","nMinCycles","fCompleted","regEA","regEAWrite","aExecBreak","aReadBreak","aWriteBreak","bOpCode","fDebugCheck","fBreak","checkBreakpoint","addr","cIns","aaOpcodeFreqs","aStepHistory","iStepHistory","yieldCPU","getCycles","getByte","b","regRC","regRZ","regRV","regRU","regRN","setBCD","opADCindxBCD","opADCzpBCD","opADCimmBCD","opADCabsBCD","opADCindyBCD","opADCzpxBCD","opADCabsyBCD","opADCabsxBCD","opSBCindxBCD","opSBCzpBCD","opSBCimmBCD","opSBCabsBCD","opSBCindyBCD","opSBCzpxBCD","opSBCabsyBCD","opSBCabsxBCD","clearBCD","addBCD","reg","mem","carry","r","subBCD","notcarry","bSimOp","SIMOP_HLT","StrLib.toHex","aeCPUs","iCPU","eCPU","C1PROM","parmsROM","abImage","cbROM","sImage","sFileURL","sFileExt","StrLib.getExtension","FORMAT","ENDPOINT","rom","WebLib.getResource","sResponse","convertImage","offROM","setByte","copyImage","messageIO","MESSAGE_PORT","offset","sImageName","sImageData","charAt","ab","asData","sData","cbImage","aeROM","iROM","eROM","C1PRAM","parmsRAM","aeRAM","iRAM","eRAM","ram","C1PKeyboard","parmsKbd","nDefaultModel","KEYCODE_DELETE","KEYCODE_LF","KEYCODE_CR","KEYCODE_ESC","CHARCODE_DELETE","CHARCODE_LF","CHARCODE_CR","CHARCODE_ESC","PSEUDO_CHARCODE","CHARCODE_LSHIFT","KEYCODE_SHIFT","CHARCODE_CTRL","KEYCODE_CONTROL","CHARCODE_RSHIFT","KEYCODE_ALT","CHARCODE_SHIFTLOCK","KEYCODE_CAPSLOCK","CHARCODE_BREAK","CHARCODE_CTRLC","CHARCODE_CTRLO","BIT_SHIFTLOCK","aButtonCodeMap","aCharCodeMap","setModel","bitsShift","bKbdRows","abKbdCols","aKbdStates","aKeyTimers","prevKeyDown","prevCharDown","bWriteLast","abKbdColsLast","nCyclesSinceLastEvent","nWritesSinceLastEvent","sInjectBuffer","onkeydown","event","keyEvent","onkeypress","fPass","charCode","which","keyCode","BIT_COMMAND","keyPressSimulate","MESSAGE_KBD","onkeyup","sButton","offKbd","cbKbd","offKbdLimit","nModel","bInvert","fMobile","iOS","calcReleaseDelay","fRepeat","msReleaseRepeat","msReleaseDelay","autoClear","notCharCode","keyEventSimulate","SIMCODE_AUTOCLEAR","injectKeys","sKeyCodes","injectKeysFromBuffer","msInjectDelay","ch","charCodeAt","fDown","fAutoClear","BIT_LSHIFT","BIT_RSHIFT","BIT_CTRL","KEYCODE_COMMAND","KEYCODE_TAB","SIMCODE_KEYEVENT","fSimulated","SIMCODE_KEYPRESS","SIMCODE_KEYRELEASE","SIMCODE_KEYTIMEOUT","simCode","bShift","bCode","iRow","iCol","BITS_SIMULATE","fPropagate","updateMemory","JSC$2096_setByte","nCycleDelta","nCyclesThreshold","aeKbd","iKbd","eKbd","C1PVideo","parmsVideo","canvas","context","imgChars","nDefaultCols","nDefaultRows","cxScreen","cyScreen","cxChar","cyChar","setDimensions","canvasScreen","contextScreen","asWebPrefixes","fSmoothing","sSmoothing","offVideo","offVideoLimit","random","initScreen","cbVideo","addrVideoPort","nCols","nRows","iRowTop","nRowsVisible","cbScreen","setDrawingDimensions","cxCharDst","cyCharDst","focus","addrGuard","tripGuard","height","MESSAGE_VIDEO","nCyclesHigh","JSC$2100_setByte","aBounds","addrLower","addrUpper","abScreen","row","writeByte","xChar","drawImage","aeVideo","iVideo","eVideo","aCanvas","eCanvas","createElement","setAttribute","style","backgroundColor","appendChild","getContext","clientWidth","eParent","eChild","cx","cy","imgCharSet","Image","eContext","sCharSet","onload","src","C1PSerialPort","parmsSerial","fDemo","sDemo","autoLoad","C1PSerialPort.AUTOLOAD_NONE","autoMount","serial","loadFile","sFileData","nResponse","iInput","sInput","fConvertLF","startLoad","fHard","C1PSerialPort.AUTOLOAD_6502","bInput","control.onclick","WebLib.isMobile","onchange","controlInput.onchange","fieldset","children","submit","disabled","onsubmit","controlInput.onsubmit","file","currentTarget","reader","FileReader","reader.onload","result","readAsText","removeChild","offPort","cbPort","offPortLimit","fReset","C1PSerialPort.AUTOLOAD_BASIC","advanceInput","JSC$2109_setByte","MESSAGE_SERIAL","C1PSerialPort.STATUS_DATA","C1PSerialPort.STATUS_NONE","aeSerial","iSerial","eSerial","C1PDiskController","parmsDC","resetRegs","iDriveSelect","aDrives","resetDrive","iDrive","iType","DRIVETYPE_5INCH","nTracks","MAXTRACKS_5INCH","fProtected","nIndexPulse","iTrackSelect","iTrackOffset","aTracks","regDDA","PDA_SD2","read","controller","regCRA","CR_PD_SEL","writePort","PORT_DDA","regPDA","bPDA","setSelectedDrive","regPDB","PDA_RDY1","drive","PDA_WP","PDA_TZD","PDA_IHD","stopDriveData","advanceDriveData","PORT_PDA","PORT_CRA","regDDB","regCRB","PORT_DDB","bPDB","PDB_ST","PDB_STI","MESSAGE_DISK","PORT_PDB","PORT_CRB","regCTRL","CTRL_CDIV","regSTAT","bSTAT","STAT_RDRF","PORT_STAT","regDATA","PORT_DATA","regUnknown","sFilePath","StrLib.getBaseName","loadDisk","addrController","sDiskName","sDiskData","aHeads","iTrack","iTrackNum","track","sectors","trackData","pushSig","pushBCD","pushBin","iSector","sector","sectorData","a","o","k","cb","getReg","port","fWrite","PORT_CTRL","JSC$2114_setByte","aBitIDs","bTest","bChanged","PDB_SD1","aeDC","iDC","eDC","C1PDebugger","parmsDbg","nextAddr","prevCmd","fAssemble","addrAssembleNext","clearBreakpoints","MESSAGE_NONE","aMessageCategories","aOpCodes","aOpSimCodes","setOpModes","aaOperations","OP_BRK","OP_ORA","MODE_INDX","MODE_ZP","OP_ASL","OP_PHP","MODE_IMM","MODE_ACC","MODE_ABS","OP_BPL","MODE_DISP","MODE_INDY","MODE_ZPX","OP_CLC","MODE_ABSY","MODE_ABSX","MODE_IMM16","OP_AND","OP_BIT","OP_ROL","OP_PLP","OP_BMI","OP_SEC","OP_RTI","OP_EOR","OP_LSR","OP_PHA","OP_JMP","OP_BVC","OP_CLI","OP_RTS","OP_ADC","OP_ROR","OP_PLA","MODE_ABS16","OP_BVS","OP_SEI","OP_STA","OP_STY","OP_STX","OP_DEY","OP_TXA","OP_BCC","MODE_ZPY","OP_TYA","OP_TXS","OP_LDY","OP_LDA","OP_LDX","OP_TAY","OP_TAX","OP_BCS","OP_CLV","OP_TSX","OP_CPY","OP_CMP","OP_DEC","OP_INY","OP_DEX","OP_BNE","OP_CLD","OP_CPX","OP_SBC","OP_INC","OP_INX","OP_NOP","OP_BEQ","OP_SED","eDebug","C1PDebugger.input","WebLib.onClickRepeat","fClassic","sRegEx","aOpModes","iMode","sMode","regexOpModes","aImm16Codes","info","isCPUOK","fStep","fStepOver","doUnassemble","doRegisters","msStart","msTotal","clearTempBreakpoint","addExecBreakpoint","findBreakpoint","findExecBreakpoint","aBreak","fRemove","fMatch","setTempBreakpoint","addrTempBP","aBreakpoints","getInstruction","nIns","sLine","aOpDesc","abOperand","OP_DB","sOperand","bOpMode","pop","nextIns","getUserAddr","sAddr","nBase","doFreqs","cData","aaSortedOpcodeFreqs","sort","q","bOpcode","cFreq","sAddrEnd","addrEnd","sIns","asArgs","fIns","getRegs","doTrace","sCount","c","WebLib.onCountRepeat","input","sCmd","aOpBytes","sCode","iCode","aModeMatch","cModes","asHex","nHex","cBreaks","aAddrs","cLines","sLen","line","sChars","sBytes","addrLine","sOption","sCategory","iHistory","aHistory","nextHistory","nInsHistory","aeDbg","iDbg","eDbg","C1PComputer","parmsComputer","modules","computer","power","C1PComputer.power","NONE","APPNAME","APPVERSION","COPYRIGHT","aeComputers","iComputer","eComputer","addrStart","iAddr","addrInfo","controlPrint","aComponents","iComponent","cAsyncMachines","loadXML","sXMLFile","sAppName","sAppClass","fResolve","display","doneLoadXML","sXML","parseXML","buildXML","sError","Component.addMachineResource","pathname","xmlDoc","async","parseFromString","DOMParser","resolveXML","matchRef","reRef","sRefFile","doneReadXML","sXMLRef","sRefAttrs","aXMLRefTag","sXMLNewTag","matchAttr","reAttr","embedMachine","sXSLFile","displayMessage","eWarning","aeWarning","eMachine","StrLib.escapeHTML","displayError","doneMachine","WebLib.enablePageEvents","getElementById","css","head","styleSheet","cssText","createTextNode","processXML","xml","transformXML","sXSL","xsl","sFragment","outerHTML","implementation","createDocument","xsltProcessor","eFragment","XSLTProcessor","y","x","rectOld","getBoundingClientRect","bottom","scrollX","scrollY","replaceChild","rectNew","performance","navigation","TYPE_RELOAD","scrollTo","embedPCx86","embedC1P","embedPCx80","embedPDP10","embedPDP11","commandMachine","fSingle","sToken","chQuote"],"mappings":"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","file":"c1p.js","sourcesContent":["/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/defines.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * @define {string}\r\n */\r\nconst APPVERSION = \"2.21\";              // this @define is overridden by the Closure Compiler with the version in machines.json\r\n\r\n/**\r\n * COMPILED is false by default; overridden with true in the Closure Compiler release.\r\n *\r\n * @define {boolean}\r\n */\r\nconst COMPILED = false;                 // this @define is overridden by the Closure Compiler (to true)\r\n\r\n/**\r\n * @define {string}\r\n */\r\nconst COPYRIGHT = \"Copyright © 2012-2023 Jeff Parsons <Jeff@pcjs.org>\";\r\n\r\n/**\r\n * @define {string}\r\n */\r\nconst CSSCLASS = \"pcjs\";\r\n\r\n/**\r\n * DEBUG is true by default, enabling assertions and other runtime checks; overridden with false\r\n * in the Closure Compiler release, which generally results in the removal of any DEBUG code.  Our\r\n * gulpfile, however, takes the extra precaution of physically removing all \"assert\" method calls\r\n * from the concatenated file that is generated for the Closure Compiler.\r\n *\r\n * @define {boolean}\r\n */\r\nconst DEBUG = true;                     // this @define is overridden by the Closure Compiler (to false) to remove DEBUG-only code\r\n\r\n/**\r\n * WARNING: DEBUGGER needs to accurately reflect whether or not the Debugger component is (or will be) loaded.\r\n * In the compiled case, we rely on the Closure Compiler to override DEBUGGER as appropriate.  When it's *false*,\r\n * nearly all of debugger.js will be conditionally removed by the compiler, reducing it to little more than a\r\n * \"type skeleton\", which also solves some type-related warnings we would otherwise have if we tried to remove\r\n * debugger.js from the compilation process altogether.\r\n *\r\n * However, when we're in \"development mode\" and running uncompiled code in debugger-less configurations,\r\n * I would like to skip loading debugger.js altogether.  When doing that, we must ALSO arrange for an additional file\r\n * (nodebugger.js) to be loaded immediately after this file, which *explicitly* overrides DEBUGGER with *false*.\r\n *\r\n * @define {boolean}\r\n */\r\nvar DEBUGGER = true;                    // this @define is overridden by the Closure Compiler to remove Debugger-related support\r\n\r\n/**\r\n * @define {string}\r\n */\r\nconst LICENSE = \"License: MIT <https://www.pcjs.org/LICENSE.txt>\";\r\n\r\n/**\r\n * MAXDEBUG is false by default; overridden with false in the Closure Compiler release.  Set it to\r\n * true to manually to enable any hyper-aggressive DEBUG checks.\r\n *\r\n * @define {boolean}\r\n */\r\nconst MAXDEBUG = false;                 // this @define is overridden by the Closure Compiler (to false) to remove MAXDEBUG-only code\r\n\r\n/**\r\n * @define {boolean}\r\n */\r\nconst PRIVATE = false;                  // this @define is overridden by the Closure Compiler (to false) to enable PRIVATE code\r\n\r\n/*\r\n * RS-232 DB-25 Pin Definitions, mapped to bits 1-25 in a 32-bit status value.\r\n *\r\n * SerialPorts in PCjs machines are considered DTE (Data Terminal Equipment), which means they should be \"virtually\"\r\n * connected to each other via a null-modem cable, which assumes the following cross-wiring:\r\n *\r\n *     G       1  <->  1        G       (Ground)\r\n *     TD      2  <->  3        RD      (Received Data)\r\n *     RD      3  <->  2        TD      (Transmitted Data)\r\n *     RTS     4  <->  5        CTS     (Clear To Send)\r\n *     CTS     5  <->  4        RTS     (Request To Send)\r\n *     DSR   6+8  <->  20       DTR     (Data Terminal Ready)\r\n *     SG      7  <->  7        SG      (Signal Ground)\r\n *     DTR    20  <->  6+8      DSR     (Data Set Ready + Carrier Detect)\r\n *     RI     22  <->  22       RI      (Ring Indicator)\r\n *\r\n * TODO: Move these definitions to a more appropriate shared file at some point.\r\n */\r\nconst RS232 = {\r\n    RTS: {\r\n        PIN:  4,\r\n        MASK: 0x00000010\r\n    },\r\n    CTS: {\r\n        PIN:  5,\r\n        MASK: 0x00000020\r\n    },\r\n    DSR: {\r\n        PIN:  6,\r\n        MASK: 0x00000040\r\n    },\r\n    CD: {\r\n        PIN:  8,\r\n        MASK: 0x00000100\r\n    },\r\n    DTR: {\r\n        PIN:  20,\r\n        MASK: 0x00100000\r\n    },\r\n    RI: {\r\n        PIN:  22,\r\n        MASK: 0x00400000\r\n    }\r\n};\r\n\r\n/**\r\n * @define {string}\r\n */\r\nconst SITEURL = \"http://localhost:8088\";// this @define is overridden by the Closure Compiler with \"https://www.pcjs.org\"\r\n\r\n/**\r\n * LOCALDISKS is intended to reflect the webserver's operating mode.  Normally, we assume that all web\r\n * resources should be accessed remotely, but if the webserver is running in \"developer\" mode, then the\r\n * webserver should indicate that fact by setting the global variable 'LOCALDISKS' to true on any pages\r\n * with embedded machines.\r\n *\r\n * @define {boolean}\r\n */\r\nvar LOCALDISKS = false;\r\n\r\n/*\r\n * Platform-agnostic way to isolate global variables (both mine and the system's).\r\n */\r\nlet globals = {\r\n    browser: (typeof window != \"undefined\"),\r\n    node: (typeof window != \"undefined\")? {} : global,\r\n    process: (typeof process != \"undefined\")? process : {},\r\n    window: (typeof window != \"undefined\")? window : global,\r\n    document: (typeof document != \"undefined\")? document : {},\r\n    pcjs: { 'machines': {}, 'components': [], 'commands': {}, 'files': null }\r\n};\r\n\r\nif (globals.window['PCjs']) {\r\n    globals.pcjs = globals.window['PCjs'];\r\n} else {\r\n    globals.window['PCjs'] = globals.pcjs;\r\n}\r\n\r\nglobals.window['LOCALDISKS'] = LOCALDISKS;\r\n\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/message.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/*\r\n * Standard machine message flags.\r\n *\r\n * NOTE: Because this machine defines more than 32 message categories, some of these message flags\r\n * exceed 32 bits, so when concatenating, be sure to use \"+\", not \"|\".\r\n */\r\nconst MESSAGE = {\r\n    NONE:       0x000000000000,\r\n    ADDR:       0x000000000001,\r\n    LOG:        0x001000000000,\r\n    STATUS:     0x002000000000,\r\n    NOTICE:     0x004000000000,\r\n    WARNING:    0x008000000000,\r\n    ERROR:      0x010000000000,\r\n    ALERTS:     0x01c000000000,\r\n    DEBUG:      0x020000000000,\r\n    PROGRESS:   0x040000000000,\r\n    SCRIPT:     0x080000000000,\r\n    TYPES:      0x0ff000000000,\r\n    HALT:       0x400000000000,\r\n    BUFFER:     0x800000000000,\r\n    ALL:        0x000ffffffffe\r\n};\r\n\r\n/*\r\n * Message categories supported by the messageEnabled() function and other assorted message\r\n * functions. Each category has a corresponding bit value that can be combined (ie, OR'ed) as\r\n * needed.  The Debugger's message command (\"m\") is used to turn message categories on and off,\r\n * like so:\r\n *\r\n *      m port on\r\n *      m port off\r\n *      ...\r\n *\r\n * NOTE: The order of these categories can be rearranged, alphabetized, etc, as desired; just be\r\n * aware that changing the bit values could break saved Debugger states (not a huge concern, just\r\n * something to be aware of).\r\n */\r\nMESSAGE.NAMES = {\r\n    \"log\":      MESSAGE.LOG,\r\n    \"warn\":     MESSAGE.WARNING,\r\n    /*\r\n     * Now we turn to message actions rather than message types; for example, setting \"halt\"\r\n     * on or off doesn't enable \"halt\" messages, but rather halts the CPU on any message above.\r\n     *\r\n     * Similarly, \"m buffer on\" turns on message buffering, deferring the display of all messages\r\n     * until \"m buffer off\" is issued.\r\n     */\r\n    \"halt\":     MESSAGE.HALT,\r\n    \"buffer\":   MESSAGE.BUFFER\r\n};\r\n\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/format.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/** @typedef {Function} */\r\nlet Formatter;\r\n\r\n/**\r\n * @class Format\r\n * @property {Object.<string,(Formatter|null)>}>} formatters\r\n */\r\nclass Format {\r\n\r\n    static NamesOfDays = [\r\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n    ];\r\n    static NamesOfMonths = [\r\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    static HexLowerCase = \"0123456789abcdef?\";\r\n    static HexUpperCase = \"0123456789ABCDEF?\";\r\n\r\n    /**\r\n     * constructor()\r\n     *\r\n     * @this {Format}\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * We populate the sprintf() formatters table with null functions for all the predefined (built-in) types,\r\n         * so that type validation has only one look-up to perform.\r\n         *\r\n         * For reference purposes, the standard ANSI C set of format types is \"dioxXucsfeEgGpn%\", not all of which\r\n         * are supported.  Some built-in types have been added, including Date types (see the upper-case types),\r\n         * a boolean type ('b'), and a JSON type ('j'); external format types include the Debugger Address type ('a'),\r\n         * and a default number type ('n') that selects the appropriate base type ('d', 'o', or 'x'), um, based on\r\n         * current Debugger preferences.\r\n         */\r\n        this.formatters = {};\r\n        let predefinedTypes = \"ACDFGHMNSTWYBbdfjcsoXx%\";\r\n        for (let i = 0; i < predefinedTypes.length; i++) {\r\n            this.formatters[predefinedTypes[i]] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * addFormatType(type, func)\r\n     *\r\n     * Whenever the specified type character is encountered in a sprintf() call, the specified\r\n     * function will be called with all the associated formatting parameters; the function must\r\n     * return a stringified copy of the arg.\r\n     *\r\n     * @this {Format}\r\n     * @param {string} type (the sprintf standard requires this be a single character)\r\n     * @param {Formatter} func\r\n     * @returns {boolean} (true if successful, false if type character has already been defined)\r\n     */\r\n    addFormatType(type, func)\r\n    {\r\n        // assert(!this.formatters[type]);\r\n        if (!this.formatters[type]) {\r\n            this.formatters[type] = func;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * isDate(date)\r\n     *\r\n     * @param {Date} date\r\n     * @returns {boolean}\r\n     */\r\n    static isDate(date)\r\n    {\r\n        return !isNaN(date.getTime());\r\n    }\r\n\r\n    /**\r\n     * parseDate(date)\r\n     * parseDate(date, time)\r\n     * parseDate(year, month, day, hour, minute, second)\r\n     * parseDate(timestamp, fLocal)\r\n     *\r\n     * Produces a UTC date when ONLY a date (no time) is provided; otherwise, it combines the date and\r\n     * and time, producing a date that is either local or UTC, depending on the presence (or lack) of time\r\n     * zone information.  Finally, if numeric inputs are provided, then Date.UTC() is called to generate\r\n     * a UTC time (since there is no provision for a time zone in that case either).\r\n     *\r\n     * In general, you should use this instead of new Date(), because the Date constructor implicitly calls\r\n     * Date.parse(s), which behaves inconsistently.  For example, ISO date-only strings (e.g. \"1970-01-01\")\r\n     * generate a UTC time, but non-ISO date-only strings (eg, \"10/1/1945\" or \"October 1, 1945\") generate a\r\n     * local time.\r\n     *\r\n     * @param {...} args\r\n     * @returns {Date} (UTC unless a time string with a timezone is explicitly provided)\r\n     */\r\n    static parseDate(...args)\r\n    {\r\n        let date;\r\n        if (args[0] === undefined) {\r\n            date = new Date(Date.now());\r\n        }\r\n        else if (typeof args[0] === \"string\") {\r\n            let s = args[0];\r\n            if (s.indexOf(':') < 0) {\r\n                s += ' ' + (args[1] || \"00:00:00 UTC\");\r\n            } else if (s.match(/^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]$/)) {\r\n                /**\r\n                 * I don't care to support all the possible time zone specifiers just to determine whether or not\r\n                 * a time zone was provided, so for now, I simply look for common date+time patterns I use, such as\r\n                 * the \"timestamp\" pattern above.  TODO: Make this general-purpose someday.\r\n                 *\r\n                 * Also, when a timestamp is provided, then a second (optional) fLocal parameter can be specified;\r\n                 * requesting a (local) non-UTC date can be helpful, for example, when the date is going to be used\r\n                 * as a local file modification time.\r\n                 */\r\n                if (!args[1]) s += \" UTC\";\r\n            }\r\n            date = new Date(s);\r\n        }\r\n        else if (args[1] === undefined) {\r\n            date = new Date(args[0]);\r\n        } else {\r\n            // assert(args[1] < 12 && args[2] <= 31 && args[3] < 24 && args[4] < 60 && args[5] < 60);\r\n            date = new Date(Date.UTC(...args));\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * sprintf(format, ...args)\r\n     *\r\n     * This C-like version of sprintf() supports only a subset of the standard C formatting specifiers, plus a few\r\n     * non-standard ones (eg, to display booleans, dates, times, etc).\r\n     *\r\n     * This version also supports custom format specifiers; see addFormatType() for details.\r\n     *\r\n     * TODO: The %c and %s specifiers support a negative width for left-justified output, but the numeric specifiers\r\n     * (eg, %d and %x) do not; they support only positive widths and right-justified output.  That's one of the more\r\n     * glaring omissions at the moment.\r\n     *\r\n     * @this {Format}\r\n     * @param {string} format\r\n     * @param {...} [args]\r\n     * @returns {string}\r\n     */\r\n    sprintf(format, ...args)\r\n    {\r\n        /**\r\n         * This isn't just a nice optimization; it's also important if the caller is simply trying\r\n         * to printf() a string that may also contain '%' and doesn't want or expect any formatting.\r\n         */\r\n        if (!args || !args.length) {\r\n            return format;\r\n        }\r\n\r\n        let buffer = \"\";\r\n        let aParts = format.split(/%([-+ 0#]*)([0-9]*|\\*)(\\.[0-9]+|)([bwhlL]?)([A-Za-z%])/);\r\n\r\n        let iArg = 0, iPart;\r\n        for (iPart = 0; iPart < aParts.length - 6; iPart += 6) {\r\n\r\n            buffer += aParts[iPart];\r\n            let arg, type = aParts[iPart+5];\r\n\r\n            /**\r\n             * Check for unrecognized types immediately, so we don't inadvertently pop any arguments.\r\n             */\r\n            if (this.formatters[type] === undefined) {\r\n                buffer += '%' + aParts[iPart+1] + aParts[iPart+2] + aParts[iPart+3] + aParts[iPart+4] + type;\r\n                continue;\r\n            }\r\n\r\n            if (iArg < args.length) {\r\n                arg = args[iArg];\r\n                if (type != '%') iArg++;\r\n            } else {\r\n                arg = args[args.length-1];\r\n            }\r\n            let signed = false;\r\n            let flags = aParts[iPart+1];\r\n            let hash = flags.indexOf('#') >= 0;\r\n            let zeroPad = flags.indexOf('0') >= 0;\r\n            let width = aParts[iPart+2];\r\n            if (width == '*') {\r\n                width = arg;\r\n                if (iArg < args.length) {\r\n                    arg = args[iArg++];\r\n                } else {\r\n                    arg = args[args.length-1];\r\n                }\r\n            } else {\r\n                width = +width || 0;\r\n            }\r\n            let precision = aParts[iPart+3];\r\n            precision = precision? +precision.substr(1) : -1;\r\n            let length = aParts[iPart+4];       // eg, 'h', 'l' or 'L'; we also allow 'w' (instead of 'h') and 'b' (instead of 'hh')\r\n            let ach = null, s, radix = 0, prefix = \"\";\r\n\r\n            /**\r\n             * The following non-standard sprintf() format types provide handy alternatives to the\r\n             * PHP date() format types that we previously used with the old datelib.formatDate() function:\r\n             *\r\n             *      a:  lowercase ante meridiem and post meridiem (am or pm)                %A (%.1A for a or p)\r\n             *      F:  month (\"January\", \"February\", ..., \"December\")                      %F (%.3F for 3-letter month)\r\n             *      g:  hour in 12-hour format                                              %G (%02G for leading zero)\r\n             *      h:  hour in 24-hour format                                              %H (%02H for leading zero)\r\n             *      i:  minutes (0, 1, ..., 59)                                             %N (%02N for leading zero)\r\n             *      j:  day of the month (1, 2, ..., 31)                                    %D (%02D for leading zero)\r\n             *      l:  day of the week (\"Sunday\", \"Monday\", ..., \"Saturday\")               %W (%.3W for 3-letter day)\r\n             *      n:  month (1, 2, ..., 12)                                               %M (%02M for leading zero)\r\n             *      s:  seconds (0, 1, ..., 59)                                             %S (%02S for leading zero)\r\n             *      Y:  4-digit year (eg, 2014)                                             %Y (%0.2Y for 2-digit year)\r\n             *\r\n             * We also support a few custom format types:\r\n             *\r\n             *      %C:  calendar output (equivalent to: %W, %F %D, %Y)\r\n             *      %T:  timestamp output (equivalent to: %Y-%02M-%02D %02H:%02N:%02S)\r\n             *\r\n             * Use the optional '#' flag with any of the above '%' format types to produce UTC results\r\n             * (eg, '%#G' instead of '%G').\r\n             *\r\n             * The %A, %F, and %W types act as strings (which support the '-' left justification flag, as well as\r\n             * the width and precision options), and the rest act as integers (which support the '0' padding flag\r\n             * and the width option).  Also, while %Y does act as an integer, it also supports truncation using the\r\n             * precision option (normally, integers do not); this enables a variable number of digits for the year.\r\n             *\r\n             * So old code like this:\r\n             *\r\n             *      printf(\"%s\\n\", formatDate(\"l, F j, Y\", date));\r\n             *\r\n             * can now be written like this:\r\n             *\r\n             *      printf(\"%W, %F %D, %Y\\n\", date, date, date, date);\r\n             *\r\n             * or even more succinctly, as:\r\n             *\r\n             *      printf(\"%C\\n\", date);\r\n             *\r\n             * In fact, even the previous example can be written more succinctly as:\r\n             *\r\n             *      printf(\"%W, %F %D, %Y\\n\", date);\r\n             *\r\n             * because unlike the C runtime, we reuse the final parameter once the format string has exhausted all parameters.\r\n             */\r\n            let date = /** @type {Date} */ (\"ACDFGHMNSTWY\".indexOf(type) >= 0 && typeof arg != \"object\"? Format.parseDate(arg) : arg);\r\n\r\n            switch(type) {\r\n            case 'C':\r\n                buffer += (Format.isDate(date)? this.sprintf(\"%#W, %#F %#D, %#Y\".replaceAll('#', hash? '#' : ''), date) : undefined);\r\n                continue;\r\n\r\n            case 'D':\r\n                arg = hash? date.getUTCDate() : date.getDate();\r\n                type = 'd';\r\n                break;\r\n\r\n            case 'A':\r\n            case 'G':\r\n            case 'H':\r\n                arg = hash? date.getUTCHours() : date.getHours();\r\n                if (type == 'A') {\r\n                    arg = (arg < 12 ? \"am\" : \"pm\");\r\n                    type = 's';\r\n                }\r\n                else {\r\n                    if (type == 'G') {\r\n                        arg = (!arg? 12 : (arg > 12 ? arg - 12 : arg));\r\n                    }\r\n                    type = 'd';\r\n                }\r\n                break;\r\n\r\n            case 'F':\r\n            case 'M':\r\n                arg = hash? date.getUTCMonth() : date.getMonth();\r\n                if (type == 'F') {\r\n                    arg = Format.NamesOfMonths[arg];\r\n                    type = 's';\r\n                } else {\r\n                    arg++;\r\n                    type = 'd';\r\n                }\r\n                break;\r\n\r\n            case 'N':\r\n                arg = hash? date.getUTCMinutes() : date.getMinutes();\r\n                type = 'd';\r\n                break;\r\n\r\n            case 'S':\r\n                arg = hash? date.getUTCSeconds() : date.getSeconds();\r\n                type = 'd';\r\n                break;\r\n\r\n            case 'T':\r\n                buffer += (Format.isDate(date)? this.sprintf(\"%#Y-%#02M-%#02D %#02H:%#02N:%#02S\".replaceAll('#', hash? '#' : ''), date) : undefined);\r\n                continue;\r\n\r\n            case 'W':\r\n                arg = Format.NamesOfDays[hash? date.getUTCDay() : date.getDay()];\r\n                type = 's';\r\n                break;\r\n\r\n            case 'Y':\r\n                arg = hash? date.getUTCFullYear() : date.getFullYear();\r\n                if (precision > 0) {\r\n                    arg = arg % (Math.pow(10, precision));\r\n                }\r\n                type = 'd';\r\n                break;\r\n            }\r\n\r\n            switch(type) {\r\n            /**\r\n             * \"%b\" is for boolean-like values.\r\n             */\r\n            case 'b':\r\n                buffer += (arg? \"true\" : \"false\");\r\n                break;\r\n\r\n            /**\r\n             * \"%d\" is for signed decimal numbers.\r\n             */\r\n            case 'd':\r\n                /**\r\n                 * I could use \"arg |= 0\", but there may be some value to supporting integers > 32 bits,\r\n                 * so I use Math.trunc() instead.  Bit-wise operators also mask a lot of evils, by converting\r\n                 * complete nonsense into zero, so while I'm ordinarily a fan, that's not desirable here.\r\n                 *\r\n                 * Other (hidden) advantages of Math.trunc(): it automatically converts strings, it honors\r\n                 * numeric prefixes (the traditional \"0x\" for hex and the newer \"0o\" for octal), and it returns\r\n                 * NaN if the ENTIRE string cannot be converted.\r\n                 *\r\n                 * parseInt(), which would seem to be the more logical choice here, doesn't understand \"0o\",\r\n                 * doesn't return NaN if non-digits are embedded in the string, and doesn't behave consistently\r\n                 * across all browsers when parsing older octal values with a leading \"0\"; Math.trunc() doesn't\r\n                 * recognize those octal values either, but I'm OK with that, as long as it CONSISTENTLY doesn't\r\n                 * recognize them.\r\n                 *\r\n                 * That last problem is why some recommend you ALWAYS pass a radix to parseInt(), but that\r\n                 * forces you to parse the string first and determine the proper radix; otherwise, you end up\r\n                 * with NEW inconsistencies.  For example, if radix is 10 and the string is \"0x10\", the result\r\n                 * is zero, since parseInt() happily stops parsing when it reaches the first non-radix 10 digit.\r\n                 */\r\n                arg = Math.trunc(arg);\r\n                /**\r\n                 * Before falling into the decimal floating-point code, we take this opportunity to convert\r\n                 * the precision value, if any, to the minimum number of digits to print.  Which basically means\r\n                 * setting zeroPad to true, width to precision, and then unsetting precision.\r\n                 *\r\n                 * TODO: This isn't quite accurate.  For example, printf(\"%6.3d\", 3) should print \"   003\", not\r\n                 * \"000003\".  But once again, this isn't a common enough case to worry about.\r\n                 */\r\n                if (precision >= 0) {\r\n                    zeroPad = true;\r\n                    if (width < precision) width = precision;\r\n                    precision = -1;\r\n                }\r\n                /* falls through */\r\n\r\n            /**\r\n             * \"%f\" is for floating-point numbers.\r\n             */\r\n            case 'f':\r\n                arg = +arg;             // convert to a number, if it isn't already\r\n                s = arg + \"\";\r\n                if (precision >= 0) {\r\n                    s = arg.toFixed(precision);\r\n                }\r\n                if (s.length < width) {\r\n                    if (zeroPad) {\r\n                        if (arg < 0) {\r\n                            width--;\r\n                            s = s.substr(1);\r\n                        }\r\n                        s = (\"0\".repeat(width) + s).slice(-width);\r\n                        if (arg < 0) s = '-' + s;\r\n                    } else {\r\n                        s = (\" \".repeat(width) + s).slice(-width);\r\n                    }\r\n                }\r\n                buffer += s;\r\n                break;\r\n\r\n            /**\r\n             * \"%j\" is for objects (displayed as JSON, with configurable indentation).\r\n             */\r\n            case 'j':\r\n                /**\r\n                 * 'j' is one of our non-standard extensions to the sprintf() interface; it signals that\r\n                 * the caller is providing an object that should be rendered as JSON.  If a width is included\r\n                 * (eg, \"%2j\"), it's used as an indentation value; otherwise, no whitespace is added.\r\n                 */\r\n                buffer += JSON.stringify(arg, null, width || undefined);\r\n                break;\r\n\r\n            /**\r\n             * \"%c\" is for characters (which can be either single-character strings or ASCII codes).\r\n             */\r\n            case 'c':\r\n                arg = typeof arg == \"string\"? arg[0] : String.fromCharCode(arg);\r\n                /* falls through */\r\n\r\n            /**\r\n             * \"%s\" is for strings.\r\n             */\r\n            case 's':\r\n                /**\r\n                 * 's' includes some non-standard benefits, such as coercing non-strings to strings first;\r\n                 * we know undefined and null values don't have a toString() method, but hopefully everything\r\n                 * else does.\r\n                 */\r\n                if (arg != undefined) {\r\n                    if (typeof arg != \"string\") {\r\n                        arg = arg.toString();\r\n                    }\r\n                    if (precision >= 0) {\r\n                        arg = arg.substr(0, precision);\r\n                    }\r\n                    while (arg.length < width) {\r\n                        if (flags.indexOf('-') >= 0) {\r\n                            arg += ' ';\r\n                        } else {\r\n                            arg = ' ' + arg;\r\n                        }\r\n                    }\r\n                }\r\n                buffer += arg;\r\n                break;\r\n\r\n            /**\r\n             * \"%B\" is for binary integers.\r\n             */\r\n            case 'B':\r\n                radix = 2;\r\n                if (hash) prefix = \"0b\";\r\n                /* falls through */\r\n\r\n            /**\r\n             * \"%o\" is for octal integers.\r\n             */\r\n            case 'o':\r\n                if (!radix) radix = 8;\r\n                if (!prefix && hash) prefix = \"0o\";\r\n                /* falls through */\r\n\r\n            /**\r\n             * \"%X\" is for hexadecimal integers (using upper-case letters).\r\n             */\r\n            case 'X':\r\n                ach = Format.HexUpperCase;\r\n                // if (!prefix && hash) prefix = \"0X\";  // I don't like that %#X uppercases BOTH the prefix and the value\r\n                /* falls through */\r\n\r\n            /**\r\n             * \"%x\" is for hexadecimal integers (using lower-case letters).\r\n             */\r\n            case 'x':\r\n                s = \"\";\r\n                if (!radix) radix = 16;\r\n                if (!prefix && hash) prefix = \"0x\";\r\n                if (!ach) ach = Format.HexLowerCase;\r\n                /**\r\n                 * For all the same reasons articulated above (for type 'd'), we pass the arg through Math.trunc(),\r\n                 * and we honor precision, if any, as the minimum number of digits to print.\r\n                 *\r\n                 * NOTE: In spite of what I mentioned above, Math.trunc() fails on some string values, most notably\r\n                 * signed prefixed values (eg, \"-0x1234\").  So we deal with that below.\r\n                 */\r\n                if (typeof arg == \"string\") {\r\n                    if (arg[0] == '-') {\r\n                        signed = true;\r\n                        arg = arg.slice(1);\r\n                    }\r\n                }\r\n                arg = Math.trunc(arg);\r\n                if (signed) arg = -arg;\r\n                /**\r\n                 * Since we now use division instead of shifts to reduce the value as we extract digits (in order to support\r\n                 * values > 32 bits), negative numbers will not render properly.  That's easily fixed for 32-bit values with\r\n                 * the unsigned 32-bit right-shift operator (>>>).  For larger values, we add 2^53 to the value, which gives us\r\n                 * the two's complement of the value as a positive number.  And if the value is larger than 2^53, well, you've\r\n                 * exceeded the integer precision of JavaScript's Number type, so you're out of luck.\r\n                 *\r\n                 * Example: Let's say you calculated 1 - 0x123456789, resulting in -0x123456788.  By adding 0x2000000000000 to\r\n                 * it, we get 0x1FFFEDCBA9878, which is the 53-bit representation of -0x123456788 as a positive number.\r\n                 */\r\n                if (arg < 0) {\r\n                    if ((arg|0) == arg) {\r\n                        arg >>>= 0;\r\n                    } else if (Math.abs(arg) <= Math.pow(2, 53)) {\r\n                        arg += Math.pow(2, 53);\r\n                    }\r\n                }\r\n                if (precision >= 0) {\r\n                    zeroPad = true;\r\n                    if (width < precision) width = precision;\r\n                    precision = -1;\r\n                }\r\n                if (zeroPad && !width) {\r\n                    /**\r\n                     * When zero padding is specified without a width (eg, \"%0x\"), auto-select a width.\r\n                     */\r\n                    if (length == 'b') {\r\n                        width = 2;      // if an 8-bit length was specified (eg, \"%0bx\"), then default to 2\r\n                    } else if (length == 'h' || length == 'w') {\r\n                        width = 4;      // if a 16-bit length was specified (eg, \"%0wx\"), then default to 4\r\n                    } else if (length == 'l') {\r\n                        width = 8;      // if a 32-bit length was specified (eg, \"%0lx\"), then default to 8\r\n                    } else {\r\n                        let v = Math.abs(arg);\r\n                        if (v <= 0xff) {\r\n                            width = 2;\r\n                        } else if (v <= 0xffff) {\r\n                            width = 4;\r\n                        } else if (v <= 0xffffffff) {\r\n                            width = 8;\r\n                        } else {\r\n                            width = 9;\r\n                        }\r\n                    }\r\n                    width += prefix.length;\r\n                }\r\n                width -= prefix.length;\r\n                do {\r\n                    let d = 16;         // digit index corresponding to '?'\r\n                    /*\r\n                     * We default to '?' if isNaN(); since we always call Math.trunc() for integer args, if the original\r\n                     * arg was undefined, or a string containing a non-number, or anything else that couldn't be converted\r\n                     * to a number, the resulting arg should be NaN.\r\n                     */\r\n                    if (!Number.isNaN(arg)) {\r\n                        d = arg & (radix - 1);\r\n                        /*\r\n                         * We divide by the base (8 or 16) and truncate, instead of the more traditional bit-wise shift,\r\n                         * because, like the decimal integer case, this allows us to support values > 32 bits (up to 53 bits).\r\n                         */\r\n                        arg = Math.trunc(arg / radix);\r\n                        // arg >>>= (radix == 16? 4 : 3);\r\n                    }\r\n                    if (zeroPad || !s || d || arg) {\r\n                        s = ach[d] + s;\r\n                    } else {\r\n                        if (prefix) {\r\n                            s = prefix + s;\r\n                            prefix = \"\";\r\n                        }\r\n                        if (width > 0) s = ' ' + s;\r\n                    }\r\n                } while (--width > 0 || arg);\r\n                buffer += prefix + s;\r\n                break;\r\n\r\n            /**\r\n             * \"%%\" is for the percent symbol.\r\n             */\r\n            case '%':\r\n                buffer += '%';\r\n                break;\r\n\r\n            default:\r\n                // assert(this.formatters[type]);\r\n                if (this.formatters[type]) {\r\n                    buffer += this.formatters[type](type, flags, width, precision, arg);\r\n                    break;\r\n                }\r\n                buffer += \"(unimplemented sprintf type: %\" + type + \")\";\r\n                break;\r\n            }\r\n        }\r\n\r\n        buffer += aParts[iPart];\r\n        return buffer;\r\n    }\r\n}\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/dumpapi.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/*\r\n * Our \"DiskDump API\", such as it was, used to look like:\r\n *\r\n *      http://pcjs.org/bin/convdisk.php?disk=/disks/pc/dos/ibm/2.00/PCDOS200-DISK1.json&format=img\r\n *\r\n * To make it (a bit) more \"REST-like\", the above request now looks like:\r\n *\r\n *      https://www.pcjs.org/api/v1/dump?disk=/disks/pc/dos/ibm/2.00/PCDOS200-DISK1.json&format=img\r\n *\r\n * Similarly, our \"FileDump API\" used to look like:\r\n *\r\n *      http://pcjs.org/bin/convrom.php?rom=/devices/pc/rom/5150/1981-04-24/PCBIOS-REV1.rom&format=json\r\n *\r\n * and that request now looks like:\r\n *\r\n *      https://www.pcjs.org/api/v1/dump?file=/devices/pc/rom/5150/1981-04-24/PCBIOS-REV1.rom&format=json\r\n *\r\n * I don't think it makes sense to avoid \"query\" parameters, because blending the path of a disk image with the\r\n * the rest of the URL would be (a) confusing, and (b) more work to parse.\r\n */\r\nconst DumpAPI = {\r\n    ENDPOINT:       \"/api/v1/dump\",\r\n    QUERY: {\r\n        DIR:        \"dir\",      // value is path of a directory (DiskDump only)\r\n        DISK:       \"disk\",     // value is path of a disk image (DiskDump only)\r\n        FILE:       \"file\",     // value is path of a ROM image file (FileDump only)\r\n        IMG:        \"img\",      // alias for DISK\r\n        PATH:       \"path\",     // value is path of a one or more files (DiskDump only)\r\n        FORMAT:     \"format\",   // value is one of FORMAT values below\r\n        COMMENTS:   \"comments\", // value is either \"true\" or \"false\"\r\n        DECIMAL:    \"decimal\",  // value is either \"true\" to force all numbers to decimal, \"false\" or undefined otherwise\r\n        MBHD:       \"mbhd\",     // value is hard drive size in Mb (formerly \"mbsize\") (DiskDump only) (DEPRECATED)\r\n        SIZE:       \"size\"      // value is target disk size in Kb (supersedes \"mbhd\") (DiskDump only)\r\n    },\r\n    FORMAT: {\r\n        JSON:       \"json\",     // default\r\n        JSON_GZ:    \"gz\",       // gzip is currently used ONLY for compressed JSON\r\n        DATA:       \"data\",     // same as \"json\", but built without JSON.stringify() (DiskDump only)\r\n        HEX:        \"hex\",      // deprecated\r\n        OCTAL:      \"octal\",    // displays data as octal words\r\n        BYTES:      \"bytes\",    // displays data as hex bytes; normally used only when comments are enabled\r\n        WORDS:      \"words\",    // displays data as hex words; normally used only when comments are enabled\r\n        LONGS:      \"longs\",    // displays data as dwords\r\n        IMG:        \"img\",      // returns the raw disk data (ie, using a Buffer object) (DiskDump only)\r\n        ROM:        \"rom\"       // returns the raw file data (ie, using a Buffer object) (FileDump only)\r\n    }\r\n};\r\n\r\n/*\r\n * Because we use an overloaded API endpoint (ie, one that's shared with the FileDump module), we must\r\n * also provide a list of commands which, when combined with the endpoint, define a unique request.\r\n */\r\nDumpAPI.asDiskCommands = [DumpAPI.QUERY.DIR, DumpAPI.QUERY.DISK, DumpAPI.QUERY.PATH];\r\nDumpAPI.asFileCommands = [DumpAPI.QUERY.FILE];\r\n\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/reportapi.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\nconst ReportAPI = {\r\n    ENDPOINT:       \"/api/v1/report\",\r\n    QUERY: {\r\n        APP:        \"app\",\r\n        VER:        \"ver\",\r\n        URL:        \"url\",\r\n        USER:       \"user\",\r\n        TYPE:       \"type\",\r\n        DATA:       \"data\"\r\n    },\r\n    TYPE: {\r\n        BUG:        \"bug\"\r\n    },\r\n    RES: {\r\n        OK:         \"Thank you\"\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/pcfs.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/** @typedef {{ name: string, size: number, attr: number, date: Date, data: *, files: (Array|null) }} */\r\nlet PCFSItem;\r\n\r\n/**\r\n * @class PCFS\r\n */\r\nclass PCFS {\r\n\r\n    static root = \"/pcfs\";\r\n\r\n    static ATTR = {                 // copied from /machines/pcx86/modules/v3/diskinfo.js (DiskInfo.ATTR.*)\r\n        READONLY:       0x01,       // PC DOS 2.0 and up\r\n        HIDDEN:         0x02,\r\n        SYSTEM:         0x04,\r\n        VOLUME:         0x08,       // PC DOS 2.0 and up\r\n        LFN:            0x0f,       // combination used by Windows 95 (MS-DOS 7.0) and up, indicating a long filename (LFN) DIRENT\r\n        SUBDIR:         0x10,       // PC DOS 2.0 and up\r\n        ARCHIVE:        0x20,       // PC DOS 2.0 and up\r\n    };\r\n\r\n    /**\r\n     * isPCFS(path)\r\n     *\r\n     * @param {string} path\r\n     * @returns {boolean}\r\n     */\r\n    static isPCFS(path)\r\n    {\r\n        return path.indexOf(PCFS.root) == 0;\r\n    }\r\n\r\n    /**\r\n     * getRoot(path)\r\n     *\r\n     * @param {string} path\r\n     * @returns {Array|null}\r\n     */\r\n    static getRoot(path)\r\n    {\r\n        return PCFS.isPCFS(path)? globals.pcjs['files'] : null;\r\n    }\r\n\r\n    /**\r\n     * getNodes(path)\r\n     *\r\n     * @param {string} path\r\n     * @returns {Array}\r\n     */\r\n    static getNodes(path)\r\n    {\r\n        return path.slice(PCFS.root.length+1).split('/');\r\n    }\r\n\r\n    /**\r\n     * getItem(path, fCreate, fDirectory)\r\n     *\r\n     * @param {string} path\r\n     * @param {boolean} [fCreate] (true to create, false to remove)\r\n     * @param {boolean} [fDirectory]\r\n     * @returns {PCFSItem|null}\r\n     */\r\n    static getItem(path, fCreate, fDirectory)\r\n    {\r\n        let item = null;\r\n        let dir = PCFS.getRoot(path);\r\n        if (dir) {\r\n            let nodes = PCFS.getNodes(path);\r\n            let i, j;\r\n            for (i = 0; i < nodes.length; i++) {\r\n                let name = nodes[i], match = false;\r\n                if (!name) {\r\n                    item = dir;\r\n                    break;\r\n                }\r\n                for (j = 0; j < dir.files.length; j++) {\r\n                    let next = dir.files[j];\r\n                    if (next.name.toLowerCase() == name.toLowerCase()) {\r\n                        if (i == nodes.length - 1) {\r\n                            item = next;\r\n                            break;\r\n                        }\r\n                        if (next.files) {\r\n                            dir = next;\r\n                            match = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (item) break;\r\n                if (match) continue;\r\n                if (i < nodes.length-1) {\r\n                    if (fCreate) {\r\n                        let sub = {name, size: 0, attr: PCFS.ATTR.SUBDIR, date: new Date(), files: []};\r\n                        dir.files.push(sub);\r\n                        dir = sub;\r\n                        continue;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if (!item && i == nodes.length) {\r\n                if (fCreate) {\r\n                    let attr = fDirectory? PCFS.ATTR.SUBDIR : PCFS.ATTR.ARCHIVE;\r\n                    item = dir.files[dir.files.length] = {name: nodes[nodes.length-1], size: 0, attr: attr, date: new Date(), files: fDirectory? [] : null};\r\n                } else if (fCreate === false) {\r\n                    dir.files.splice(j, 1);\r\n                }\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * setItem(item, data, date, attr)\r\n     *\r\n     * @param {PCFSItem} item\r\n     * @param {*} [data]\r\n     * @param {Date} [date]\r\n     * @param {number} [attr]\r\n     */\r\n    static setItem(item, data, date, attr)\r\n    {\r\n        if (!item.files && data) {\r\n            item.data = data;\r\n            item.size = data.length;\r\n            if (!date) date = new Date();\r\n        }\r\n        if (date) {\r\n            item.date = date;\r\n        }\r\n        if (attr !== undefined) {\r\n            item.attr = attr;\r\n        }\r\n    }\r\n}\r\n\r\nif (!globals.pcjs['files']) {\r\n    globals.pcjs['files'] = { name: \"\", size: 0, attr: PCFS.ATTR.SUBDIR, date: new Date(), files: [] };\r\n}\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/strlib.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * @class StrLib\r\n * @unrestricted\r\n */\r\nclass StrLib {\r\n    /*\r\n     * Map special characters to their HTML escape sequences.\r\n     */\r\n    static HTMLEscapeMap = {\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&apos;',\r\n        '$': '&dollar;'\r\n    };\r\n\r\n    /*\r\n     * Map \"unprintable\" ASCII codes to mnemonics, to more clearly see what's being printed.\r\n     */\r\n    static ASCIICodeMap = {\r\n        0x00:   \"NUL\",\r\n        0x01:   \"SOH\",      // (CTRL_A) Start of Heading\r\n        0x02:   \"STX\",      // (CTRL_B) Start of Text\r\n        0x03:   \"ETX\",      // (CTRL_C) End of Text\r\n        0x04:   \"EOT\",      // (CTRL_D) End of Transmission\r\n        0x05:   \"ENQ\",      // (CTRL_E) Enquiry\r\n        0x06:   \"ACK\",      // (CTRL_F) Acknowledge\r\n        0x07:   \"BEL\",      // (CTRL_G) Bell\r\n        0x08:   \"BS\",       // (CTRL_H) Backspace\r\n        0x09:   \"TAB\",      // (CTRL_I) Horizontal Tab (aka HT)\r\n        0x0A:   \"LF\",       // (CTRL_J) Line Feed (New Line)\r\n        0x0B:   \"VT\",       // (CTRL_K) Vertical Tab\r\n        0x0C:   \"FF\",       // (CTRL_L) Form Feed (New Page)\r\n        0x0D:   \"CR\",       // (CTRL_M) Carriage Return\r\n        0x0E:   \"SO\",       // (CTRL_N) Shift Out\r\n        0x0F:   \"SI\",       // (CTRL_O) Shift In\r\n        0x10:   \"DLE\",      // (CTRL_P) Data Link Escape\r\n        0x11:   \"XON\",      // (CTRL_Q) Device Control 1 (aka DC1)\r\n        0x12:   \"DC2\",      // (CTRL_R) Device Control 2\r\n        0x13:   \"XOFF\",     // (CTRL_S) Device Control 3 (aka DC3)\r\n        0x14:   \"DC4\",      // (CTRL_T) Device Control 4\r\n        0x15:   \"NAK\",      // (CTRL_U) Negative Acknowledge\r\n        0x16:   \"SYN\",      // (CTRL_V) Synchronous Idle\r\n        0x17:   \"ETB\",      // (CTRL_W) End of Transmission Block\r\n        0x18:   \"CAN\",      // (CTRL_X) Cancel\r\n        0x19:   \"EM\",       // (CTRL_Y) End of Medium\r\n        0x1A:   \"SUB\",      // (CTRL_Z) Substitute\r\n        0x1B:   \"ESC\",      // Escape\r\n        0x1C:   \"FS\",       // File Separator\r\n        0x1D:   \"GS\",       // Group Separator\r\n        0x1E:   \"RS\",       // Record Separator\r\n        0x1F:   \"US\",       // Unit Separator\r\n        0x7F:   \"DEL\"\r\n    };\r\n\r\n    /*\r\n     * TODO: Future home of a complete ASCII table.\r\n     */\r\n    static ASCII = {\r\n        LF:     0x0A,\r\n        CR:     0x0D\r\n    };\r\n\r\n    static TYPES = {\r\n        NULL:       0,\r\n        BYTE:       1,\r\n        WORD:       2,\r\n        DWORD:      3,\r\n        NUMBER:     4,\r\n        STRING:     5,\r\n        BOOLEAN:    6,\r\n        OBJECT:     7,\r\n        ARRAY:      8\r\n    };\r\n\r\n    /**\r\n     * isValidInt(s, base)\r\n     *\r\n     * The built-in parseInt() function has the annoying feature of returning a partial value (ie,\r\n     * up to the point where it encounters an invalid character); eg, parseInt(\"foo\", 16) returns 0xf.\r\n     *\r\n     * So it's best to use our own StrLib.parseInt() function, which will in turn use this function to\r\n     * validate the entire string.\r\n     *\r\n     * @param {string} s is the string representation of some number\r\n     * @param {number} [base] is the radix to use (default is 10); only 2, 8, 10 and 16 are supported\r\n     * @returns {boolean} true if valid, false if invalid (or the specified base isn't supported)\r\n     */\r\n    static isValidInt(s, base)\r\n    {\r\n        if (!base || base == 10) return s.match(/^-?[0-9]+$/) !== null;\r\n        if (base == 16) return s.match(/^-?[0-9a-f]+$/i) !== null;\r\n        if (base == 8) return s.match(/^-?[0-7]+$/) !== null;\r\n        if (base == 2) return s.match(/^-?[01]+$/) !== null;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * parseInt(s, base)\r\n     *\r\n     * This is a wrapper around the built-in parseInt() function.  Our wrapper recognizes certain prefixes\r\n     * ('$' or \"0x\" for hex, '#' or \"0o\" for octal) and suffixes ('.' for decimal, 'h' for hex, 'y' for\r\n     * binary), and then calls isValidInt() to ensure we don't convert strings that contain partial values;\r\n     * see isValidInt() for details.\r\n     *\r\n     * The use of multiple prefix/suffix combinations is undefined (although for the record, we process\r\n     * prefixes first).  We do NOT support the \"0b\" prefix to indicate binary UNLESS one or more commas are\r\n     * also present (because \"0b\" is also a valid hex sequence), and we do NOT support a single leading zero\r\n     * to indicate octal (because such a number could also be decimal or hex).  Any number of commas are\r\n     * allowed; we remove them all before calling the built-in parseInt().\r\n     *\r\n     * More recently, we've added support for \"^D\", \"^O\", and \"^B\" prefixes to accommodate the base overrides\r\n     * that the PDP-10's MACRO-10 assembly language supports (decimal, octal, and binary, respectively).\r\n     * If this support turns out to adversely affect other debuggers, then it will have to be \"conditionalized\".\r\n     * Similarly, we've added support for \"K\", \"M\", and \"G\" MACRO-10-style suffixes that add 3, 6, or 9 zeros\r\n     * to the value to be parsed, respectively.\r\n     *\r\n     * @param {string} s is the string representation of some number\r\n     * @param {number} [base] is the radix to use (default is 10); can be overridden by prefixes/suffixes\r\n     * @returns {number|undefined} corresponding value, or undefined if invalid\r\n     */\r\n    static parseInt(s, base)\r\n    {\r\n        let value;\r\n\r\n        if (s) {\r\n            if (!base) base = 10;\r\n\r\n            let ch, chPrefix, chSuffix;\r\n            let fCommas = (s.indexOf(',') > 0);\r\n            if (fCommas) s = s.replace(/,/g, '');\r\n\r\n            ch = chPrefix = s.charAt(0);\r\n            if (chPrefix == '#') {\r\n                base = 8;\r\n                chPrefix = '';\r\n            }\r\n            else if (chPrefix == '$') {\r\n                base = 16;\r\n                chPrefix = '';\r\n            }\r\n            if (ch != chPrefix) {\r\n                s = s.substr(1);\r\n            }\r\n            else {\r\n                ch = chPrefix = s.substr(0, 2);\r\n                if (chPrefix == '0b' && fCommas || chPrefix == '^B') {\r\n                    base = 2;\r\n                    chPrefix = '';\r\n                }\r\n                else if (chPrefix == '0o' || chPrefix == '^O') {\r\n                    base = 8;\r\n                    chPrefix = '';\r\n                }\r\n                else if (chPrefix == '^D') {\r\n                    base = 10;\r\n                    chPrefix = '';\r\n                }\r\n                else if (chPrefix == '0x') {\r\n                    base = 16;\r\n                    chPrefix = '';\r\n                }\r\n                if (ch != chPrefix) s = s.substr(2);\r\n            }\r\n            ch = chSuffix = s.slice(-1);\r\n            if (chSuffix == 'Y' || chSuffix == 'y') {\r\n                base = 2;\r\n                chSuffix = '';\r\n            }\r\n            else if (chSuffix == '.') {\r\n                base = 10;\r\n                chSuffix = '';\r\n            }\r\n            else if (chSuffix == 'H' || chSuffix == 'h') {\r\n                base = 16;\r\n                chSuffix = '';\r\n            }\r\n            else if (chSuffix == 'K') {\r\n                chSuffix = '000';\r\n            }\r\n            else if (chSuffix == 'M') {\r\n                chSuffix = '000000';\r\n            }\r\n            else if (chSuffix == 'G') {\r\n                chSuffix = '000000000';\r\n            }\r\n            if (ch != chSuffix) s = s.slice(0, -1) + chSuffix;\r\n            /*\r\n             * This adds support for the MACRO-10 binary shifting (Bn) suffix, which must be stripped from the\r\n             * number before parsing, and then applied to the value after parsing.  If n is omitted, 35 is assumed,\r\n             * which is a net shift of zero.  If n < 35, then a left shift of (35 - n) is required; if n > 35, then\r\n             * a right shift of -(35 - n) is required.\r\n             */\r\n            let v, shift = 0;\r\n            if (base <= 10) {\r\n                let match = s.match(/(-?[0-9]+)B([0-9]*)/);\r\n                if (match) {\r\n                    s = match[1];\r\n                    shift = 35 - ((match[2] || 35) & 0xff);\r\n                }\r\n            }\r\n            if (StrLib.isValidInt(s, base) && !isNaN(v = parseInt(s, base))) {\r\n                /*\r\n                 * With the need to support larger (eg, 36-bit) integers, truncating to 32 bits is no longer helpful.\r\n                 *\r\n                 *      value = v|0;\r\n                 */\r\n                if (shift) {\r\n                    /*\r\n                     * Since binary shifting is a logical operation, and since shifting by division only works properly\r\n                     * with positive numbers, we must convert a negative value to a positive value, by computing the two's\r\n                     * complement.\r\n                     */\r\n                    if (v < 0) v += Math.pow(2, 36);\r\n                    if (shift > 0) {\r\n                        v *= Math.pow(2, shift);\r\n                    } else {\r\n                        v = Math.trunc(v / Math.pow(2, -shift));\r\n                    }\r\n                }\r\n                value = v;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * toBase(n, radix, cch, sPrefix, nGrouping)\r\n     *\r\n     * Displays the given number as an unsigned integer using the specified radix and number of digits.\r\n     *\r\n     * @param {number|*} n\r\n     * @param {number} radix (ie, the base)\r\n     * @param {number} cch (the desired number of digits)\r\n     * @param {string} [sPrefix] (default is none)\r\n     * @param {number} [nGrouping]\r\n     * @returns {string}\r\n     */\r\n    static toBase(n, radix, cch, sPrefix = \"\", nGrouping = 0)\r\n    {\r\n        /*\r\n         * We can't rely entirely on isNaN(), because isNaN(null) returns false, and we can't rely\r\n         * entirely on typeof either, because typeof NaN returns \"number\".  Sigh.\r\n         *\r\n         * Alternatively, we could mask and shift n regardless of whether it's null/undefined/NaN,\r\n         * since JavaScript coerces such operands to zero, but I think there's \"value\" in seeing those\r\n         * values displayed differently.\r\n         */\r\n        let s = \"\";\r\n        if (isNaN(n) || typeof n != \"number\") {\r\n            n = null;\r\n        } else {\r\n            /*\r\n             * Callers that produced an input by dividing by a power of two rather than shifting (in order\r\n             * to access more than 32 bits) may produce a fractional result, which ordinarily we would simply\r\n             * ignore, but if the integer portion is zero and the sign is negative, we should probably treat\r\n             * this value as a sign-extension.\r\n             */\r\n            if (n < 0 && n > -1) n = -1;\r\n            /*\r\n             * Negative values should be two's complemented according to the number of digits; for example,\r\n             * 12 octal digits implies an upper limit 8^12.\r\n             */\r\n            if (n < 0) {\r\n                n += Math.pow(radix, cch);\r\n            }\r\n            if (n >= Math.pow(radix, cch)) {\r\n                cch = Math.ceil(Math.log(n) / Math.log(radix));\r\n            }\r\n        }\r\n        let g = nGrouping || -1;\r\n        while (cch-- > 0) {\r\n            if (!g) {\r\n                s = ',' + s;\r\n                g = nGrouping;\r\n            }\r\n            if (n == null) {\r\n                s = '?' + s;\r\n            } else {\r\n                let d = n % radix;\r\n                d += (d >= 0 && d <= 9? 0x30 : 0x41 - 10);\r\n                s = String.fromCharCode(d) + s;\r\n                n = Math.trunc(n / radix);\r\n            }\r\n            g--;\r\n        }\r\n        return sPrefix + s;\r\n    }\r\n\r\n    /**\r\n     * toBin(n, cch, nGrouping)\r\n     *\r\n     * Converts an integer to binary, with the specified number of digits (up to a maximum of 36).\r\n     *\r\n     * @param {number|*} n (supports integers up to 36 bits now)\r\n     * @param {number} [cch] is the desired number of binary digits (0 or undefined for default of either 8, 18, or 36)\r\n     * @param {number} [nGrouping]\r\n     * @returns {string} the binary representation of n\r\n     */\r\n    static toBin(n, cch, nGrouping)\r\n    {\r\n        if (!cch) {\r\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.LN2) || 1;\r\n            let v = Math.abs(n);\r\n            if (v <= 0b11111111) {\r\n                cch = 8;\r\n            } else if (v <= 0b111111111111111111) {\r\n                cch = 18;\r\n            } else {\r\n                cch = 36;\r\n            }\r\n        } else if (cch > 36) cch = 36;\r\n        return StrLib.toBase(n, 2, cch, \"\", nGrouping);\r\n    }\r\n\r\n    /**\r\n     * toBinBytes(n, cb, fPrefix)\r\n     *\r\n     * Converts an integer to binary, with the specified number of bytes (up to the default of 4).\r\n     *\r\n     * @param {number|null|undefined} n (interpreted as a 32-bit value)\r\n     * @param {number} [cb] is the desired number of binary bytes (4 is both the default and the maximum)\r\n     * @param {boolean} [fPrefix]\r\n     * @returns {string} the binary representation of n\r\n     */\r\n    static toBinBytes(n, cb, fPrefix)\r\n    {\r\n        let s = \"\";\r\n        if (!cb || cb > 4) cb = 4;\r\n        for (let i = 0; i < cb; i++) {\r\n            if (s) s = ',' + s;\r\n            s = StrLib.toBin(n & 0xff, 8) + s;\r\n            n >>= 8;\r\n        }\r\n        return (fPrefix? \"0b\" : \"\") + s;\r\n    }\r\n\r\n    /**\r\n     * toOct(n, cch, fPrefix)\r\n     *\r\n     * Converts an integer to octal, with the specified number of digits (default of 6; max of 12)\r\n     *\r\n     * You might be tempted to use the built-in n.toString(8) instead, but it doesn't zero-pad and it\r\n     * doesn't properly convert negative values.  Moreover, if n is undefined, n.toString() will throw\r\n     * an exception, whereas this function will return '?' characters.\r\n     *\r\n     * @param {number|*} n (supports integers up to 36 bits now)\r\n     * @param {number} [cch] is the desired number of octal digits (0 or undefined for default of either 6, 8, or 12)\r\n     * @param {boolean} [fPrefix]\r\n     * @returns {string} the octal representation of n\r\n     */\r\n    static toOct(n, cch, fPrefix)\r\n    {\r\n        if (!cch) {\r\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.log(8)) || 1;\r\n            let v = Math.abs(n);\r\n            if (v <= 0o777777) {\r\n                cch = 6;\r\n            } else if (v <= 0o77777777) {\r\n                cch = 8;\r\n            } else {\r\n                cch = 12;\r\n            }\r\n        } else if (cch > 12) cch = 12;\r\n        return StrLib.toBase(n, 8, cch, fPrefix? \"0o\" : \"\");\r\n    }\r\n\r\n    /**\r\n     * toDec(n, cch)\r\n     *\r\n     * Converts an integer to decimal, with the specified number of digits (default of 5; max of 11)\r\n     *\r\n     * You might be tempted to use the built-in n.toString(10) instead, but it doesn't zero-pad and it\r\n     * doesn't properly convert negative values.  Moreover, if n is undefined, n.toString() will throw\r\n     * an exception, whereas this function will return '?' characters.\r\n     *\r\n     * @param {number|*} n (supports integers up to 36 bits now)\r\n     * @param {number} [cch] is the desired number of decimal digits (0 or undefined for default of either 5 or 11)\r\n     * @returns {string} the decimal representation of n\r\n     */\r\n    static toDec(n, cch)\r\n    {\r\n        if (!cch) {\r\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.LN10) || 1;\r\n            let v = Math.abs(n);\r\n            if (v <= 99999) {\r\n                cch = 5;\r\n            } else {\r\n                cch = 11;\r\n            }\r\n        } else if (cch > 11) cch = 11;\r\n        return StrLib.toBase(n, 10, cch);\r\n    }\r\n\r\n    /**\r\n     * toHex(n, cch, fPrefix)\r\n     *\r\n     * Converts an integer to hex, with the specified number of digits (default of 4 or 8, max of 9).\r\n     *\r\n     * You might be tempted to use the built-in n.toString(16) instead, but it doesn't zero-pad and it\r\n     * doesn't properly convert negative values; for example, if n is -2147483647, then n.toString(16)\r\n     * will return \"-7fffffff\" instead of \"80000001\".  Moreover, if n is undefined, n.toString() will\r\n     * throw an exception, whereas this function will return '?' characters.\r\n     *\r\n     * NOTE: The following work-around (adapted from code found on StackOverflow) would be another solution,\r\n     * taking care of negative values, zero-padding, and upper-casing, but not null/undefined/NaN values:\r\n     *\r\n     *      s = (n < 0? n + 0x100000000 : n).toString(16);\r\n     *      s = \"00000000\".substr(0, 8 - s.length) + s;\r\n     *      s = s.substr(0, cch).toUpperCase();\r\n     *\r\n     * @param {number|*} n (supports integers up to 36 bits now)\r\n     * @param {number} [cch] is the desired number of hex digits (0 or undefined for default of either 4, 8, or 9)\r\n     * @param {boolean} [fPrefix]\r\n     * @returns {string} the hex representation of n\r\n     */\r\n    static toHex(n, cch, fPrefix)\r\n    {\r\n        if (!cch) {\r\n            // cch = Math.ceil(Math.log(Math.abs(n) + 1) / Math.log(16)) || 1;\r\n            let v = Math.abs(n);\r\n            if (v <= 0xffff) {\r\n                cch = 4;\r\n            } else if (v <= 0xffffffff) {\r\n                cch = 8;\r\n            } else {\r\n                cch = 9;\r\n            }\r\n        } else if (cch > 9) cch = 9;\r\n        return StrLib.toBase(n, 16, cch, fPrefix? \"0x\" : \"\");\r\n    }\r\n\r\n    /**\r\n     * toHexByte(b)\r\n     *\r\n     * Alias for StrLib.toHex(b, 2, true)\r\n     *\r\n     * @param {number|null|undefined} b is a byte value\r\n     * @returns {string} the hex representation of b\r\n     */\r\n    static toHexByte(b)\r\n    {\r\n        return StrLib.toHex(b, 2, true);\r\n    }\r\n\r\n    /**\r\n     * toHexWord(w)\r\n     *\r\n     * Alias for StrLib.toHex(w, 4, true)\r\n     *\r\n     * @param {number|null|undefined} w is a word (16-bit) value\r\n     * @returns {string} the hex representation of w\r\n     */\r\n    static toHexWord(w)\r\n    {\r\n        return StrLib.toHex(w, 4, true);\r\n    }\r\n\r\n    /**\r\n     * toHexLong(l)\r\n     *\r\n     * Alias for StrLib.toHex(l, 8, true)\r\n     *\r\n     * @param {number|null|undefined} l is a dword (32-bit) value\r\n     * @returns {string} the hex representation of w\r\n     */\r\n    static toHexLong(l)\r\n    {\r\n        return StrLib.toHex(l, 8, true);\r\n    }\r\n\r\n    /**\r\n     * getBaseName(sFileName, fStripExt)\r\n     *\r\n     * This is a poor-man's version of Node's path.basename(), which Node-only components should use instead.\r\n     *\r\n     * Note that if fStripExt is true, this strips ANY extension, whereas path.basename() strips the extension only\r\n     * if it matches the second parameter (eg, path.basename(\"/foo/bar/baz/asdf/quux.html\", \".html\") returns \"quux\").\r\n     *\r\n     * @param {string} sFileName\r\n     * @param {boolean} [fStripExt]\r\n     * @returns {string}\r\n     */\r\n    static getBaseName(sFileName, fStripExt)\r\n    {\r\n        let sBaseName = sFileName;\r\n\r\n        let i = sFileName.lastIndexOf('/');\r\n        if (i >= 0) sBaseName = sFileName.substr(i + 1);\r\n\r\n        /*\r\n         * This next bit is a kludge to clean up names that are part of a URL that includes unsightly query parameters.\r\n         */\r\n        i = sBaseName.indexOf('&');\r\n        if (i > 0) sBaseName = sBaseName.substr(0, i);\r\n\r\n        if (fStripExt) {\r\n            i = sBaseName.lastIndexOf(\".\");\r\n            if (i > 0) {\r\n                sBaseName = sBaseName.substring(0, i);\r\n            }\r\n        }\r\n        return sBaseName;\r\n    }\r\n\r\n    /**\r\n     * getExtension(sFileName)\r\n     *\r\n     * This is a poor-man's version of Node's path.extname(), which Node-only components should use instead.\r\n     *\r\n     * Note that we EXCLUDE the period from the returned extension, whereas path.extname() includes it.\r\n     *\r\n     * @param {string} sFileName\r\n     * @returns {string} the filename's extension (in lower-case and EXCLUDING the \".\"), or an empty string\r\n     */\r\n    static getExtension(sFileName)\r\n    {\r\n        let sExtension = \"\";\r\n        let i = sFileName.lastIndexOf(\".\");\r\n        if (i >= 0) {\r\n            sExtension = sFileName.substr(i + 1).toLowerCase();\r\n            if (sExtension == \"json5\") sExtension = \"json\";\r\n        }\r\n        return sExtension;\r\n    }\r\n\r\n    /**\r\n     * endsWith(s, sSuffix)\r\n     *\r\n     * @param {string} s\r\n     * @param {string} sSuffix\r\n     * @returns {boolean} true if s ends with sSuffix, false if not\r\n     */\r\n    static endsWith(s, sSuffix)\r\n    {\r\n        return s.indexOf(sSuffix, s.length - sSuffix.length) !== -1;\r\n    }\r\n\r\n    /**\r\n     * escapeHTML(sHTML)\r\n     *\r\n     * @param {string} sHTML\r\n     * @returns {string} with special characters \"escaped\" as HTML entities, similar to PHP's htmlspecialchars()\r\n     */\r\n    static escapeHTML(sHTML)\r\n    {\r\n        /*\r\n         * Most recently, '$' was added to the list to help avoid problems when callers use the resulting string\r\n         * as a replacement string for JavaScript's string replace() function, which treats '$' specially.  Technically,\r\n         * that's on the callers of replace(), not us, but this doesn't seem harmful, and it's definitely helpful.\r\n         */\r\n        return sHTML.replace(/[&<>\"'$]/g, function(m)\r\n        {\r\n            return StrLib.HTMLEscapeMap[m];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * replace(sSearch, sReplace, s)\r\n     *\r\n     * The JavaScript replace() function ALWAYS interprets \"$\" specially in replacement strings, even when\r\n     * the search string is NOT a RegExp; specifically:\r\n     *\r\n     *      $$  Inserts a \"$\"\r\n     *      $&  Inserts the matched substring\r\n     *      $`  Inserts the portion of the string that precedes the matched substring\r\n     *      $'  Inserts the portion of the string that follows the matched substring\r\n     *      $n  Where n is a positive integer less than 100, inserts the nth parenthesized sub-match string,\r\n     *          provided the first argument was a RegExp object\r\n     *\r\n     * So, if a replacement string containing dollar signs passes through a series of replace() calls, untold\r\n     * problems could result.  Hence, this function, which simply uses the replacement string as-is.\r\n     *\r\n     * Similar to the JavaScript replace() method (when sSearch is a string), this replaces only ONE occurrence\r\n     * (ie, the FIRST occurrence); it might be nice to add options to replace the LAST occurrence and/or ALL\r\n     * occurrences, but we'll revisit that later.\r\n     *\r\n     * @param {string} sSearch\r\n     * @param {string} sReplace\r\n     * @param {string} s\r\n     * @returns {string}\r\n     */\r\n    static replace(sSearch, sReplace, s)\r\n    {\r\n        let i = s.indexOf(sSearch);\r\n        if (i >= 0) {\r\n            s = s.substr(0, i) + sReplace + s.substr(i + sSearch.length);\r\n        }\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * replaceAll(sSearch, sReplace, s)\r\n     *\r\n     * @param {string} sSearch\r\n     * @param {string} sReplace\r\n     * @param {string} s\r\n     * @returns {string}\r\n     */\r\n    static replaceAll(sSearch, sReplace, s)\r\n    {\r\n        let a = {};\r\n        a[sSearch] = sReplace;\r\n        return StrLib.replaceArray(a, s);\r\n    }\r\n\r\n    /**\r\n     * replaceArray(a, s)\r\n     *\r\n     * @param {Object} a\r\n     * @param {string} s\r\n     * @returns {string}\r\n     */\r\n    static replaceArray(a, s)\r\n    {\r\n        let sMatch = \"\";\r\n        for (let k in a) {\r\n            /*\r\n             * As noted in:\r\n             *\r\n             *      http://www.regexguru.com/2008/04/escape-characters-only-when-necessary/\r\n             *\r\n             * inside character classes, only backslash, caret, hyphen and the closing bracket need to be\r\n             * escaped.  And in fact, if you ensure that the closing bracket is first, the caret is not first,\r\n             * and the hyphen is last, you can avoid escaping those as well.\r\n             */\r\n            k = k.replace(/([\\\\[\\]*{}().+?|$])/g, \"\\\\$1\");\r\n            sMatch += (sMatch? '|' : '') + k;\r\n        }\r\n        return s.replace(new RegExp('(' + sMatch + ')', \"g\"), function(m) {\r\n            return a[m];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * pad(s, cch)\r\n     *\r\n     * Use a negative cch to pad on the right (ie, left-align), similar to sprintf(\"%-Ns\", s).\r\n     * This also truncates the string if it's longer than abs(cch), similar to sprintf(\"%.Ns\", s).\r\n     *\r\n     * @param {string} s is a string\r\n     * @param {number} cch is desired length\r\n     * @returns {string} the original string (s) with spaces padding it to the specified length\r\n     */\r\n    static pad(s, cch)\r\n    {\r\n        return StrLib.sprintf('%' + cch + '.' + Math.abs(cch) + 's', s);\r\n    }\r\n\r\n    /**\r\n     * parseDate(date)\r\n     * parseDate(date, time)\r\n     * parseDate(year, month, day, hour, minute, second)\r\n     *\r\n     * Produces a UTC date when ONLY a date (no time) is provided; otherwise, it combines the date and\r\n     * and time, producing a date that is either UTC or local, depending on the presence (or lack) of time\r\n     * zone information.  Finally, if numeric inputs are provided, then Date.UTC() is called to generate\r\n     * a UTC time.\r\n     *\r\n     * In general, you should use this instead of new Date(s), because the Date constructor implicitly calls\r\n     * Date.parse(s), which behaves inconsistently.  For example, ISO date-only strings (e.g. \"1970-01-01\")\r\n     * generate a UTC time, but non-ISO date-only strings (eg, \"10/1/1945\" or \"October 1, 1945\") generate a\r\n     * local time.\r\n     *\r\n     * @param {...} args\r\n     * @returns {Date} (UTC unless a time string with a non-GMT timezone is explicitly provided)\r\n     */\r\n    static parseDate(...args)\r\n    {\r\n        let date;\r\n        if (args[0] === undefined) {\r\n            date = new Date(Date.now());\r\n        }\r\n        else if (typeof args[0] === \"string\") {\r\n            date = new Date(args[0] + ' ' + (args[1] || \"00:00:00 GMT\"));\r\n        }\r\n        else if (args[1] === undefined) {\r\n            date = new Date(args[0]);\r\n        } else {\r\n            date = new Date(Date.UTC(...args));\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * isValidDate(date)\r\n     *\r\n     * @param {Date} date\r\n     * @returns {boolean}\r\n     */\r\n    static isValidDate(date)\r\n    {\r\n        return !isNaN(date.getTime());\r\n    }\r\n\r\n    /**\r\n     * stripLeadingZeros(s, fPad)\r\n     *\r\n     * @param {string} s\r\n     * @param {boolean} [fPad]\r\n     * @returns {string}\r\n     */\r\n    static stripLeadingZeros(s, fPad)\r\n    {\r\n        let cch = s.length;\r\n        s = s.replace(/^0+([0-9A-F]+)$/i, \"$1\");\r\n        if (fPad) s = StrLib.pad(s, cch);\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * trim(s)\r\n     *\r\n     * @param {string} s\r\n     * @returns {string}\r\n     */\r\n    static trim(s)\r\n    {\r\n        if (String.prototype.trim) {\r\n            return s.trim();\r\n        }\r\n        return s.replace(/^\\s+|\\s+$/g, \"\");\r\n    }\r\n\r\n    /**\r\n     * toASCIICode(b)\r\n     *\r\n     * @param {number} b\r\n     * @returns {string}\r\n     */\r\n    static toASCIICode(b)\r\n    {\r\n        let s;\r\n        if (b != StrLib.ASCII.CR && b != StrLib.ASCII.LF) {\r\n            s = StrLib.ASCIICodeMap[b];\r\n        }\r\n        if (s) {\r\n            s = '<' + s + '>';\r\n        } else {\r\n            s = String.fromCharCode(b);\r\n        }\r\n        return s;\r\n    }\r\n}\r\n\r\nStrLib.format = new Format();\r\nStrLib.sprintf = StrLib.format.sprintf.bind(StrLib.format);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/usrlib.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/** @typedef {{ mask: number, shift: number }} */\r\nlet BitField;\r\n\r\n/** @typedef {Object.<BitField>} */\r\nlet BitFields;\r\n\r\n/**\r\n * @class UsrLib\r\n * @unrestricted\r\n */\r\nclass UsrLib {\r\n\r\n    static aMonthDays = [\r\n        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\r\n    ];\r\n\r\n    /**\r\n     * binarySearch(a, v, fnCompare)\r\n     *\r\n     * @param {Array} a is an array\r\n     * @param {number|string|Array|Object} v\r\n     * @param {function((number|string|Array|Object), (number|string|Array|Object))} [fnCompare]\r\n     * @returns {number} the index of matching entry if non-negative, otherwise the index of the insertion point\r\n     */\r\n    static binarySearch(a, v, fnCompare)\r\n    {\r\n        let left = 0;\r\n        let right = a.length;\r\n        let found = 0;\r\n        if (fnCompare === undefined) {\r\n            fnCompare = function(a, b)\r\n            {\r\n                return a > b ? 1 : a < b ? -1 : 0;\r\n            };\r\n        }\r\n        while (left < right) {\r\n            let middle = (left + right) >> 1;\r\n            let compareResult;\r\n            compareResult = fnCompare(v, a[middle]);\r\n            if (compareResult > 0) {\r\n                left = middle + 1;\r\n            } else {\r\n                right = middle;\r\n                found = !compareResult;\r\n            }\r\n        }\r\n        return found ? left : ~left;\r\n    }\r\n\r\n    /**\r\n     * binaryInsert(a, v, fnCompare)\r\n     *\r\n     * If element v already exists in array a, the array is unchanged (we don't allow duplicates); otherwise, the\r\n     * element is inserted into the array at the appropriate index.\r\n     *\r\n     * @param {Array} a is an array\r\n     * @param {number|string|Array|Object} v is the value to insert\r\n     * @param {function((number|string|Array|Object), (number|string|Array|Object))} [fnCompare]\r\n     */\r\n    static binaryInsert(a, v, fnCompare)\r\n    {\r\n        let index = UsrLib.binarySearch(a, v, fnCompare);\r\n        if (index < 0) {\r\n            a.splice(-(index + 1), 0, v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * getTimestamp()\r\n     *\r\n     * @returns {string} timestamp containing the current date and time (\"yyyy-mm-dd hh:mm:ss\")\r\n     */\r\n    static getTimestamp()\r\n    {\r\n        let date = new Date();\r\n        return StrLib.sprintf(\"%T\", date);\r\n    }\r\n\r\n    /**\r\n     * getMonthDays(nMonth, nYear)\r\n     *\r\n     * NOTE: If we're being called on behalf of the PCx86 RTC, its year is always truncated to two digits (mod 100),\r\n     * so we have no idea what century the year 0 might refer to.  When using the normal leap-year formula, 0 fails\r\n     * the mod 100 test but passes the mod 400 test, so as far as the RTC is concerned, every century year is a leap\r\n     * year.  Since we're most likely dealing with the year 2000, that's fine, since 2000 was also a leap year.\r\n     *\r\n     * TODO: There IS a separate RTC CMOS byte that's supposed to be set to CMOS_ADDR.CENTURY_DATE; it's always BCD,\r\n     * so theoretically it will contain values like 0x19 or 0x20 (for the 20th and 21st centuries, respectively), and\r\n     * we could add that as another parameter to this function, to improve the accuracy, but that would go beyond what\r\n     * a real RTC actually does.\r\n     *\r\n     * @param {number} nMonth (1-12)\r\n     * @param {number} nYear (normally a 4-digit year, but it may also be mod 100)\r\n     * @returns {number} the maximum (1-based) day allowed for the specified month and year\r\n     */\r\n    static getMonthDays(nMonth, nYear)\r\n    {\r\n        let nDays = UsrLib.aMonthDays[nMonth - 1];\r\n        if (nDays == 28) {\r\n            if ((nYear % 4) === 0 && ((nYear % 100) || (nYear % 400) === 0)) {\r\n                nDays++;\r\n            }\r\n        }\r\n        return nDays;\r\n    }\r\n\r\n    /**\r\n     * adjustDays(date, days)\r\n     *\r\n     * Although the setDate() method compensates for day-of-month values outside the current month:\r\n     *\r\n     *      > let d = new Date('11/4/2012');d\r\n     *      2012-11-04T07:00:00.000Z\r\n     *      > new Date(d.setDate(d.getDate() + 365))\r\n     *      2014-11-04T08:00:00.000Z\r\n     *\r\n     * notice the discrepancy in the time-of-day.  Even if there is some technical reason (eg, a DayLight\r\n     * Savings Time side-effect) why that answer is correct, it doesn't satisfy my goal of adjusting ONLY the\r\n     * day, not the time-of-day.\r\n     *\r\n     * By comparison, the method below (multiplying the number of milliseconds in a day by the number of days)\r\n     * works just fine, without any unexpected side-effects:\r\n     *\r\n     *      > let d = new Date('11/4/2012');d\r\n     *      2012-11-04T07:00:00.000Z\r\n     *      > new Date(d.getTime() + 365 * 86400000)\r\n     *      2013-11-04T07:00:00.000Z\r\n     *\r\n     * @param {Date} date\r\n     * @param {number} days (+/-)\r\n     * @returns {Date}\r\n     */\r\n    static adjustDays(date, days)\r\n    {\r\n        return new Date(date.getTime() + days * 86400000);\r\n    }\r\n\r\n    /**\r\n     * subtractDays(date1, date2)\r\n     *\r\n     * @param {Date|string} date1\r\n     * @param {Date|string} date2\r\n     * @returns {number} (date1 - date2, returned as a signed integer number of days)\r\n     */\r\n    static subtractDays(date1, date2)\r\n    {\r\n        if (typeof date1 == \"string\") date1 = new Date(date1);\r\n        if (typeof date2 == \"string\") date2 = new Date(date2);\r\n        return Math.round((date1.getTime() - date2.getTime()) / 86400000);\r\n    }\r\n\r\n    /**\r\n     * defineBitFields(bfs)\r\n     *\r\n     * Prepares a bit field definition for use with getBitField() and setBitField(); eg:\r\n     *\r\n     *      let bfs = UsrLib.defineBitFields({num:20, count:8, btmod:1, type:3});\r\n     *\r\n     * The above defines a set of bit fields containing four fields: num (bits 0-19), count (bits 20-27), btmod (bit 28), and type (bits 29-31).\r\n     *\r\n     *      UsrLib.setBitField(bfs.num, n, 1);\r\n     *\r\n     * The above set bit field \"bfs.num\" in numeric variable \"n\" to the value 1.\r\n     *\r\n     * @param {Object} bfs\r\n     * @returns {BitFields}\r\n     */\r\n    static defineBitFields(bfs)\r\n    {\r\n        let bit = 0;\r\n        for (let f in bfs) {\r\n            let width = bfs[f];\r\n            let mask = ((1 << width) - 1) << bit;\r\n            bfs[f] = {mask: mask, shift: bit};\r\n            bit += width;\r\n        }\r\n        return bfs;\r\n    }\r\n\r\n    /**\r\n     * initBitFields(bfs, ...)\r\n     *\r\n     * @param {BitFields} bfs\r\n     * @param {...number} var_args\r\n     * @returns {number} a value containing all supplied bit fields\r\n     */\r\n    static initBitFields(bfs, var_args)\r\n    {\r\n        let v = 0, i = 1;\r\n        for (let f in bfs) {\r\n            if (i >= arguments.length) break;\r\n            v = UsrLib.setBitField(bfs[f], v, arguments[i++]);\r\n        }\r\n        return v;\r\n    }\r\n\r\n    /**\r\n     * getBitField(bf, v)\r\n     *\r\n     * @param {BitField} bf\r\n     * @param {number} v is a value containing bit fields\r\n     * @returns {number} the value of the bit field in v defined by bf\r\n     */\r\n    static getBitField(bf, v)\r\n    {\r\n        return (v & bf.mask) >> bf.shift;\r\n    }\r\n\r\n    /**\r\n     * setBitField(bf, v, n)\r\n     *\r\n     * @param {BitField} bf\r\n     * @param {number} v is a value containing bit fields\r\n     * @param {number} n is a value to store in v in the bit field defined by bf\r\n     * @returns {number} updated v\r\n     */\r\n    static setBitField(bf, v, n)\r\n    {\r\n        return (v & ~bf.mask) | ((n << bf.shift) & bf.mask);\r\n    }\r\n\r\n    /**\r\n     * indexOf(a, t, i)\r\n     *\r\n     * Use this instead of Array.prototype.indexOf() if you can't be sure the browser supports it.\r\n     *\r\n     * @param {Array} a\r\n     * @param {*} t\r\n     * @param {number} [i]\r\n     * @returns {number}\r\n     */\r\n    static indexOf(a, t, i)\r\n    {\r\n        if (Array.prototype.indexOf) {\r\n            return a.indexOf(t, i);\r\n        }\r\n        i = i || 0;\r\n        if (i < 0) i += a.length;\r\n        if (i < 0) i = 0;\r\n        for (let n = a.length; i < n; i++) {\r\n            if (i in a && a[i] === t) return i;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/weblib.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/*\r\n * According to http://www.w3schools.com/jsref/jsref_obj_global.asp, these are the *global* properties\r\n * and functions of JavaScript-in-the-Browser:\r\n *\r\n * Property             Description\r\n * ---\r\n * Infinity             A numeric value that represents positive/negative infinity\r\n * NaN                  \"Not-a-Number\" value\r\n * undefined            Indicates that a variable has not been assigned a value\r\n *\r\n * Function             Description\r\n * ---\r\n * decodeURI()          Decodes a URI\r\n * decodeURIComponent() Decodes a URI component\r\n * encodeURI()          Encodes a URI\r\n * encodeURIComponent() Encodes a URI component\r\n * escape()             Deprecated in version 1.5. Use encodeURI() or encodeURIComponent() instead\r\n * eval()               Evaluates a string and executes it as if it was script code\r\n * isFinite()           Determines whether a value is a finite, legal number\r\n * isNaN()              Determines whether a value is an illegal number\r\n * Number()             Converts an object's value to a number\r\n * parseFloat()         Parses a string and returns a floating point number\r\n * parseInt()           Parses a string and returns an integer\r\n * String()             Converts an object's value to a string\r\n * unescape()           Deprecated in version 1.5. Use decodeURI() or decodeURIComponent() instead\r\n *\r\n * And according to http://www.w3schools.com/jsref/obj_window.asp, these are the properties and functions\r\n * of the *window* object.\r\n *\r\n * Property             Description\r\n * ---\r\n * closed               Returns a Boolean value indicating whether a window has been closed or not\r\n * defaultStatus        Sets or returns the default text in the statusbar of a window\r\n * document             Returns the Document object for the window (See Document object)\r\n * frames               Returns an array of all the frames (including iframes) in the current window\r\n * history              Returns the History object for the window (See History object)\r\n * innerHeight          Returns the inner height of a window's content area\r\n * innerWidth           Returns the inner width of a window's content area\r\n * length               Returns the number of frames (including iframes) in a window\r\n * location             Returns the Location object for the window (See Location object)\r\n * name                 Sets or returns the name of a window\r\n * navigator            Returns the Navigator object for the window (See Navigator object)\r\n * opener               Returns a reference to the window that created the window\r\n * outerHeight          Returns the outer height of a window, including toolbars/scrollbars\r\n * outerWidth           Returns the outer width of a window, including toolbars/scrollbars\r\n * pageXOffset          Returns the pixels the current document has been scrolled (horizontally) from the upper left corner of the window\r\n * pageYOffset          Returns the pixels the current document has been scrolled (vertically) from the upper left corner of the window\r\n * parent               Returns the parent window of the current window\r\n * screen               Returns the Screen object for the window (See Screen object)\r\n * screenLeft           Returns the x coordinate of the window relative to the screen\r\n * screenTop            Returns the y coordinate of the window relative to the screen\r\n * screenX              Returns the x coordinate of the window relative to the screen\r\n * screenY              Returns the y coordinate of the window relative to the screen\r\n * self                 Returns the current window\r\n * status               Sets or returns the text in the statusbar of a window\r\n * top                  Returns the topmost browser window\r\n *\r\n * Method               Description\r\n * ---\r\n * alert()              Displays an alert box with a message and an OK button\r\n * atob()               Decodes a base-64 encoded string\r\n * blur()               Removes focus from the current window\r\n * btoa()               Encodes a string in base-64\r\n * clearInterval()      Clears a timer set with setInterval()\r\n * clearTimeout()       Clears a timer set with setTimeout()\r\n * close()              Closes the current window\r\n * confirm()            Displays a dialog box with a message and an OK and a Cancel button\r\n * createPopup()        Creates a pop-up window\r\n * focus()              Sets focus to the current window\r\n * moveBy()             Moves a window relative to its current position\r\n * moveTo()             Moves a window to the specified position\r\n * open()               Opens a new browser window\r\n * print()              Prints the content of the current window\r\n * prompt()             Displays a dialog box that prompts the visitor for input\r\n * resizeBy()           Resizes the window by the specified pixels\r\n * resizeTo()           Resizes the window to the specified width and height\r\n * scroll()             This method has been replaced by the scrollTo() method.\r\n * scrollBy()           Scrolls the content by the specified number of pixels\r\n * scrollTo()           Scrolls the content to the specified coordinates\r\n * setInterval()        Calls a function or evaluates an expression at specified intervals (in milliseconds)\r\n * setTimeout()         Calls a function or evaluates an expression after a specified number of milliseconds\r\n * stop()               Stops the window from loading\r\n */\r\n\r\n/**\r\n * @class Web\r\n * @unrestricted\r\n */\r\nclass WebLib {\r\n    /**\r\n     * getResource(sURL, type, fAsync, done, progress)\r\n     *\r\n     * Request the specified resource (sURL), and once the request is complete, notify done().\r\n     *\r\n     * If fAsync is true, a done() callback should ALWAYS be supplied; otherwise, you'll have no\r\n     * idea when the request is complete or what the response was.  done() is passed three parameters:\r\n     *\r\n     *      done(sURL, resource, nErrorCode)\r\n     *\r\n     * If nErrorCode is zero, resource should contain the requested data; otherwise, an error occurred.\r\n     *\r\n     * If type is set to a string, that string can be used to control the response format;\r\n     * by default, the response format is plain text, but you can specify \"arraybuffer\" to request arbitrary\r\n     * binary data, in which case the returned resource will be a ArrayBuffer rather than a string.\r\n     *\r\n     * @param {string} sURL\r\n     * @param {string|Object|null} [type] (object for POST request, otherwise type of GET request)\r\n     * @param {boolean} [fAsync] is true for an asynchronous request; false otherwise (MUST be set for IE)\r\n     * @param {function(string,string,number)|function(string,ArrayBuffer,number)} [done]\r\n     * @param {function(number)} [progress]\r\n     * @returns {Array|null} Array containing [resource, nErrorCode], or null if no response available (yet)\r\n     */\r\n    static getResource(sURL, type = \"text\", fAsync = false, done, progress)\r\n    {\r\n        let nErrorCode = 0, resource = null, response = null;\r\n\r\n        let resources = globals.window['resources'];\r\n        if (typeof resources == 'object' && (resource = resources[sURL])) {\r\n            if (done) done(sURL, resource, nErrorCode);\r\n            return [resource, nErrorCode];\r\n        }\r\n        else if (fAsync && typeof resources == 'function') {\r\n            resources(sURL, function(resource, nErrorCode) {\r\n                if (done) done(sURL, resource, nErrorCode);\r\n            });\r\n            return response;\r\n        }\r\n\r\n        /*\r\n         * While it would be nice to simply import LOCALDISKS from defines.js, that merely defines the *default*\r\n         * value of the global variable 'LOCALDISKS'; since imported values are immutable, we must look at the global\r\n         * variable, since that's the only one that *might* have been changed at runtime.\r\n         */\r\n        if (globals.window['LOCALDISKS'] && WebLib.getHostName().match(/^(.+\\.local|localhost|0\\.0\\.0\\.0|pcjs)$/)) {\r\n            sURL = sURL.replace(/^\\/(diskettes|gamedisks|miscdisks|harddisks|decdisks|pcsigdisks|pcsig[0-9a-z]*-disks|private)\\//, \"/disks/$1/\").replace(/^\\/discs\\/([^/]*)\\//, \"/disks/cdroms/$1/\");\r\n        } else {\r\n            sURL = sURL.replace(/^\\/(disks\\/|)(diskettes|gamedisks|miscdisks|harddisks|decdisks|pcsigdisks|pcsig[0-9a-z]*-disks|private)\\//, \"https://$2.pcjs.org/\").replace(/^\\/(disks\\/cdroms|discs)\\/([^/]*)\\//, \"https://$2.pcjs.org/\");\r\n        }\r\n\r\n        Component.printf(MESSAGE.DEBUG, \"getResource(%s)\\n\", sURL);\r\n\r\n        /*\r\n         * globals.node.readFileSync exists only when another module has import filelib.js, which means we're\r\n         * running under Node.js, and we can use Node's file system to read local files.  Note that filelib.js only\r\n         * offers readFileSync() at the moment.\r\n         */\r\n        if (globals.node.readFileSync && sURL.indexOf(\"http\") != 0) {\r\n            try {\r\n                let encoding = (type == \"arraybuffer\"? null : \"utf8\");\r\n                resource = globals.node.readFileSync(sURL, encoding);\r\n                if (!encoding) {\r\n                    /*\r\n                     * For non-UTF8 data, readFileSync() returns a DataBuffer, which wraps a Node Buffer, which wraps an ArrayBuffer.\r\n                     */\r\n                    resource = resource.buffer;\r\n                    if (resource.buffer) resource = resource.buffer;\r\n                }\r\n            } catch (err) {\r\n                nErrorCode = err['errno'];\r\n            }\r\n            if (resource !== undefined) {\r\n                if (done) done(sURL, resource, nErrorCode);\r\n                return [resource, nErrorCode];\r\n            }\r\n        }\r\n\r\n        /*\r\n         * If PCjs is simulating a command-line environment inside a browser, PCFS (the PCjs File System) can be used\r\n         * to simulate a local file system.  So we check for that next.\r\n         */\r\n        if (PCFS.isPCFS(sURL)) {\r\n            let item = PCFS.getItem(sURL);\r\n            if (item) {\r\n                resource = item.data;\r\n                if (done) done(sURL, resource, nErrorCode);\r\n                return [resource, nErrorCode];\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Don't encode Windows paths (although frankly, that should never happen and I don't recall under what circumstances\r\n         * it apparently did) or URLs with components (which the caller should have already encoded with encodeURIComponent()).\r\n         */\r\n        if (!sURL.match(/^[A-Z]:/i) && sURL.indexOf('?') < 0) {\r\n            sURL = encodeURI(sURL);\r\n        }\r\n\r\n        let request;\r\n        if (globals.window.XMLHttpRequest) {\r\n            request = new globals.window.XMLHttpRequest();\r\n        } else if (globals.window.ActiveXObject) {\r\n            request = new globals.window.ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        } else if (globals.window.fetch) {\r\n            // Component.printf(MESSAGE.DEBUG + MESSAGE.LOG, \"getResource.fetch(%s)\\n\", sURL);\r\n            fetch(sURL)\r\n            .then(response => {\r\n                switch(type) {\r\n                case \"json\":\r\n                case \"text\":\r\n                    return response.text();\r\n                case \"arraybuffer\":\r\n                    return response.arrayBuffer();\r\n                default:\r\n                    throw new Error(\"unsupported response type: \" + type);\r\n                }\r\n            })\r\n            .then(resource => {\r\n                Component.printf(MESSAGE.DEBUG + MESSAGE.LOG, \"getResource(%s): fetched %d bytes\\n\", sURL, resource.length);\r\n                if (done) done(sURL, resource, nErrorCode);\r\n            })\r\n            .catch(error => {\r\n                Component.printf(MESSAGE.LOG, \"getResource(%s) fetch error: %d\\n\", sURL, nErrorCode);\r\n                if (done) done(sURL, resource, nErrorCode);\r\n            });\r\n            return response;\r\n        }\r\n\r\n        let fArrayBuffer = false, fXHR2 = (typeof request.responseType === 'string');\r\n\r\n        let callback = function getResourceDone() {\r\n            if (request.readyState !== 4) {\r\n                if (progress) progress(1);\r\n                return null;\r\n            }\r\n            /*\r\n             * The following line was recommended for WebKit, as a work-around to prevent the handler firing multiple\r\n             * times when debugging.  Unfortunately, that's not the only XMLHttpRequest problem that occurs when\r\n             * debugging, so I think the WebKit problem is deeper than that.  When we have multiple XMLHttpRequests\r\n             * pending, any debugging activity means most of them simply get dropped on floor, so what may actually be\r\n             * happening are mis-notifications rather than redundant notifications.\r\n             *\r\n             *      request.onreadystatechange = undefined;\r\n             *\r\n             * If the request failed due to, say, a CORS policy denial; eg:\r\n             *\r\n             *      Failed to load http://www.allbootdisks.com/downloads/Disks/Windows_95_Boot_Disk_Download48/Diskette%20Images/Windows95a.img:\r\n             *      Redirect from 'http://www.allbootdisks.com/downloads/Disks/Windows_95_Boot_Disk_Download48/Diskette%20Images/Windows95a.img' to\r\n             *      'http://www.allbootdisks.com/' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\r\n             *      Origin 'http://pcjs:8088' is therefore not allowed access.\r\n             *\r\n             * and our request type was \"arraybuffer\", attempting to access responseText may trigger an exception; eg:\r\n             *\r\n             *      Uncaught DOMException: Failed to read the 'responseText' property from 'XMLHttpRequest': The value is only accessible if the object's\r\n             *      'responseType' is '' or 'text' (was 'arraybuffer').\r\n             *\r\n             * We could tiptoe around these potential landmines, but the safest thing to do is wrap this code with try/catch.\r\n             */\r\n            try {\r\n                resource = fArrayBuffer? request.response : request.responseText;\r\n            } catch(err) {\r\n                Component.printf(MESSAGE.LOG, \"getResource(%s) exception: %s\\n\", sURL, err.message);\r\n            }\r\n            /*\r\n             * The normal \"success\" case is a non-null resource and an HTTP status code of 200, but when loading files from the\r\n             * local file system (ie, when using the \"file:\" protocol), we have to be a bit more flexible.\r\n             */\r\n            if (resource != null && (request.status == 200 || !request.status && resource.length && WebLib.getHostProtocol() == \"file:\")) {\r\n                Component.printf(MESSAGE.DEBUG + MESSAGE.LOG, \"getResource(%s): returned %d bytes\\n\", sURL, resource.length);\r\n            }\r\n            else {\r\n                nErrorCode = request.status || -1;\r\n                Component.printf(MESSAGE.DEBUG, \"getResource(%s) error: %d\\n\", sURL, nErrorCode);\r\n                if (!request.status && !WebLib.fAdBlockerWarning) {\r\n                    let match = sURL.match(/(^https?:\\/\\/[^/]+)(.*)/);\r\n                    if (match) {\r\n                        WebLib.fAdBlockerWarning = true;\r\n                        Component.alertUser(\"PCjs was unable to perform a cross-origin resource request to '\" + match[1] + \"'.\\n\\nIf you're running an ad blocker, try adding '\" + WebLib.getHostOrigin() + \"' to your whitelist (or find a smarter ad blocker).\");\r\n                    }\r\n                }\r\n            }\r\n            if (progress) progress(2);\r\n            if (done) done(sURL, resource, nErrorCode);\r\n            return [resource, nErrorCode];\r\n        };\r\n\r\n        if (fAsync) {\r\n            request.onreadystatechange = callback;\r\n        }\r\n\r\n        if (progress) progress(0);\r\n\r\n        if (type && typeof type == \"object\") {\r\n            let sPost = \"\";\r\n            for (let p in type) {\r\n                if (!type.hasOwnProperty(p)) continue;\r\n                if (sPost) sPost += \"&\";\r\n                sPost += p + '=' + encodeURIComponent(type[p]);\r\n            }\r\n            sPost = sPost.replace(/%20/g, '+');\r\n            Component.printf(MESSAGE.DEBUG + MESSAGE.LOG, \"getResource(%s): posted %d bytes\\n\", sURL, sPost.length);\r\n            request.open(\"POST\", sURL, fAsync);\r\n            request.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n            request.send(sPost);\r\n        } else {\r\n            // Component.printf(MESSAGE.DEBUG + MESSAGE.LOG, \"getResource.get(%s)\\n\", sURL);\r\n            request.open(\"GET\", sURL, fAsync);\r\n            if (type == \"arraybuffer\") {\r\n                if (fXHR2) {\r\n                    fArrayBuffer = true;\r\n                    request.responseType = type;\r\n                } else {\r\n                    request.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n                }\r\n            }\r\n            request.send();\r\n        }\r\n\r\n        if (!fAsync) {\r\n            request.readyState = 4;     // this may already be set for synchronous requests, but I don't want to take any chances\r\n            response = callback();\r\n        }\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * parseMemoryResource(sURL, sData)\r\n     *\r\n     * This converts a variety of JSON-style data streams into an Object with the following properties:\r\n     *\r\n     *      aBytes\r\n     *      aSymbols\r\n     *      addrLoad\r\n     *      addrExec\r\n     *\r\n     * If the source data contains a 'bytes' array, it's passed through to 'aBytes'; alternatively, if\r\n     * it contains a 'words' array, the values are converted from 16-bit to 8-bit and stored in 'aBytes',\r\n     * and if it contains a 'longs' array, the values are converted from 32-bit longs into bytes and\r\n     * stored in 'aBytes'.\r\n     *\r\n     * Alternatively, if the source data contains a 'data' array, we simply pass that through to the output\r\n     * object as:\r\n     *\r\n     *      aData\r\n     *\r\n     * @param {string} sURL\r\n     * @param {string} sData\r\n     * @returns {Object|null} (resource)\r\n     */\r\n    static parseMemoryResource(sURL, sData)\r\n    {\r\n        let i;\r\n        let resource = {\r\n            aBytes: null,\r\n            aSymbols: null,\r\n            addrLoad: null,\r\n            addrExec: null\r\n        };\r\n\r\n        if (sData.charAt(0) == \"[\" || sData.charAt(0) == \"{\") {\r\n            try {\r\n                let a, ib, data;\r\n\r\n                if (sData.substr(0, 1) == \"<\") {    // if the \"data\" begins with a \"<\"...\r\n                    /*\r\n                     * Early server configs reported an error (via the nErrorCode parameter) if a tape URL was invalid,\r\n                     * but more recent server configs now display a somewhat friendlier HTML error page.  The downside,\r\n                     * however, is that the original error has been buried, and we've received \"data\" that isn't actually\r\n                     * tape data.  So if the data we've received appears to be \"HTML-like\", we treat it as an error message.\r\n                     */\r\n                    throw new Error(sData);\r\n                }\r\n\r\n                /*\r\n                 * TODO: IE9 is rather unfriendly and restrictive with regard to how much data it's willing to\r\n                 * eval().  In particular, the 10Mb disk image we use for the Windows 1.01 demo config fails in\r\n                 * IE9 with an \"Out of memory\" exception.  One work-around would be to chop the data into chunks\r\n                 * (perhaps one track per chunk, using regular expressions) and then manually re-assemble it.\r\n                 *\r\n                 * However, it turns out that using JSON.parse(sDiskData) instead of eval(\"(\" + sDiskData + \")\")\r\n                 * is a much easier fix. The only drawback is that we must first quote any unquoted property names\r\n                 * and remove any comments, because while eval() was cool with them, JSON.parse() is more particular;\r\n                 * the following RegExp replacements take care of those requirements.\r\n                 *\r\n                 * The use of hex values is something else that eval() was OK with, but JSON.parse() is not, and\r\n                 * while I've stopped using hex values in DumpAPI responses (at least when \"format=json\" is specified),\r\n                 * I can't guarantee they won't show up in \"legacy\" images, and there's no simple RegExp replacement\r\n                 * for transforming hex values into decimal values, so I cop out and fall back to eval() if I detect\r\n                 * any hex prefixes (\"0x\") in the sequence.  Ditto for error messages, which appear like so:\r\n                 *\r\n                 *      [\"unrecognized disk path: test.img\"]\r\n                 */\r\n                if (sData.indexOf(\"0x\") < 0 && sData.indexOf(\"0o\") < 0 && sData.substr(0, 2) != '[\"') {\r\n                    if (sData.indexOf('\"values\"') < 0) sData = sData.replace(/([a-z]+):/gm, '\"$1\":').replace(/\\/\\/[^\\n]*/gm, \"\");\r\n                    data = JSON.parse(sData);\r\n                } else {\r\n                    data = eval(\"(\" + sData + \")\");\r\n                }\r\n\r\n                resource.addrLoad = data['load'];\r\n                resource.addrExec = data['exec'];\r\n\r\n                let width = data['width'];\r\n                let values = data['values'];\r\n                if (width && values) {\r\n                    if (width == 8) {\r\n                        data['bytes'] = values;\r\n                    } else if (width == 16) {\r\n                        data['words'] = values;\r\n                    } else if (width == 32) {\r\n                        data['longs'] = values;\r\n                    } else {\r\n                        data['data'] = values;\r\n                    }\r\n                }\r\n\r\n                if ((a = data['bytes'])) {\r\n                    resource.aBytes = a;\r\n                }\r\n                else if ((a = data['words'])) {\r\n                    /*\r\n                     * Convert all words into bytes\r\n                     */\r\n                    resource.aBytes = new Array(a.length * 2);\r\n                    for (i = 0, ib = 0; i < a.length; i++) {\r\n                        resource.aBytes[ib++] = a[i] & 0xff;\r\n                        resource.aBytes[ib++] = (a[i] >> 8) & 0xff;\r\n\r\n                    }\r\n                }\r\n                else if ((a = data['longs'])) {\r\n                    /*\r\n                     * Convert all dwords (longs) into bytes\r\n                     */\r\n                    resource.aBytes = new Array(a.length * 4);\r\n                    for (i = 0, ib = 0; i < a.length; i++) {\r\n                        resource.aBytes[ib++] = a[i] & 0xff;\r\n                        resource.aBytes[ib++] = (a[i] >> 8) & 0xff;\r\n                        resource.aBytes[ib++] = (a[i] >> 16) & 0xff;\r\n                        resource.aBytes[ib++] = (a[i] >> 24) & 0xff;\r\n                    }\r\n                }\r\n                else if ((a = data['data'])) {\r\n                    resource.aData = a;\r\n                }\r\n                else {\r\n                    resource.aBytes = data;\r\n                }\r\n\r\n                if (resource.aBytes) {\r\n                    if (!resource.aBytes.length) {\r\n                        Component.error(\"Empty resource: \" + sURL);\r\n                        resource = null;\r\n                    }\r\n                    else if (resource.aBytes.length == 1) {\r\n                        Component.error(resource.aBytes[0]);\r\n                        resource = null;\r\n                    }\r\n                }\r\n                resource.aSymbols = data['symbols'];\r\n\r\n            } catch (e) {\r\n                Component.error(\"Resource data error (\" + sURL + \"): \" + e.message);\r\n                resource = null;\r\n            }\r\n        }\r\n        else {\r\n            /*\r\n             * Parse the data manually; we assume it's a series of hex byte-values separated by whitespace.\r\n             */\r\n            let ab = [];\r\n            let sHexData = sData.replace(/\\n/gm, \" \").replace(/ +$/, \"\");\r\n            let asHexData = sHexData.split(\" \");\r\n            for (i = 0; i < asHexData.length; i++) {\r\n                let n = parseInt(asHexData[i], 16);\r\n                if (isNaN(n)) {\r\n                    Component.error(\"Resource data error (\" + sURL + \"): invalid hex byte (\" + asHexData[i] + \")\");\r\n                    break;\r\n                }\r\n                ab.push(n & 0xff);\r\n            }\r\n            if (i == asHexData.length) resource.aBytes = ab;\r\n        }\r\n        return resource;\r\n    }\r\n\r\n    /**\r\n     * redirectResource(sPath)\r\n     *\r\n     * The following replacements should only be necessary for (old) saved states; none of our disk manifests\r\n     * should be using any of these deprecated paths anymore.\r\n     *\r\n     * @param {string} sPath\r\n     * @returns {string}\r\n     */\r\n    static redirectResource(sPath)\r\n    {\r\n        sPath = sPath.replace(\"/disks/pc/\", \"/disks/pcx86/\");\r\n        sPath = sPath.replace(\"/disks/pcx86/private/\", \"/disks-private/pcx86/\");\r\n        if (sPath.indexOf(\"archive.pcjs.org\") < 0) {\r\n            sPath = sPath.replace(\"/disks/pcx86/\", \"/disks-demo/pcx86/\");\r\n        }\r\n        sPath = sPath.replace(\"/pcjs-disks/\", \"/disks-demo/\");\r\n        sPath = sPath.replace(\"/pcjs-games/\", \"/disks-game/\");\r\n        sPath = sPath.replace(\"/disks-demo/pcx86/games/\", \"/disks-game/pcx86/\");\r\n        sPath = sPath.replace(\"/private-disks/\", \"/disks-private/\");\r\n        sPath = sPath.replace(\"/fixed/\", \"/drives/\");\r\n        return sPath;\r\n    }\r\n\r\n    /**\r\n     * sendReport(sApp, sVer, sURL, sUser, sType, sReport, sHostName)\r\n     *\r\n     * Send a report (eg, bug report) to the server.\r\n     *\r\n     * @param {string} sApp (eg, \"PCjs\")\r\n     * @param {string} sVer (eg, \"1.02\")\r\n     * @param {string} sURL (eg, \"/devices/pc/machine/5150/mda/64kb/machine.xml\")\r\n     * @param {string} sUser (ie, the user key, if any)\r\n     * @param {string} sType (eg, \"bug\"); one of ReportAPI.TYPE.*\r\n     * @param {string} sReport (eg, unparsed state data)\r\n     * @param {string} [sHostName] (default is SITEURL)\r\n     */\r\n    static sendReport(sApp, sVer, sURL, sUser, sType, sReport, sHostName)\r\n    {\r\n        let dataPost = {};\r\n        dataPost[ReportAPI.QUERY.APP] = sApp;\r\n        dataPost[ReportAPI.QUERY.VER] = sVer;\r\n        dataPost[ReportAPI.QUERY.URL] = sURL;\r\n        dataPost[ReportAPI.QUERY.USER] = sUser;\r\n        dataPost[ReportAPI.QUERY.TYPE] = sType;\r\n        dataPost[ReportAPI.QUERY.DATA] = sReport;\r\n        let sReportURL = (sHostName? sHostName : SITEURL) + ReportAPI.ENDPOINT;\r\n        WebLib.getResource(sReportURL, dataPost, true);\r\n    }\r\n\r\n    /**\r\n     * getHost()\r\n     *\r\n     * This is like getHostName() but with the port number, if any.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    static getHost()\r\n    {\r\n        return globals.window.location? globals.window.location.host : \"localhost\";\r\n    }\r\n\r\n    /**\r\n     * getHostName()\r\n     *\r\n     * @returns {string}\r\n     */\r\n    static getHostName()\r\n    {\r\n        return globals.window.location? globals.window.location.hostname : \"localhost\";\r\n    }\r\n\r\n    /**\r\n     * getHostOrigin()\r\n     *\r\n     * This could also be implemented with window.location.origin, but that wasn't originally available in all browsers.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    static getHostOrigin()\r\n    {\r\n        return globals.window.location? globals.window.location.protocol + \"//\" + globals.window.location.host : SITEURL;\r\n    }\r\n\r\n    /**\r\n     * getHostProtocol()\r\n     *\r\n     * @returns {string}\r\n     */\r\n    static getHostProtocol()\r\n    {\r\n        return globals.window.location? globals.window.location.protocol : \"file:\";\r\n    }\r\n\r\n    /**\r\n     * getHostURL()\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    static getHostURL()\r\n    {\r\n        return globals.window.location? globals.window.location.href : null;\r\n    }\r\n\r\n    /**\r\n     * getUserAgent()\r\n     *\r\n     * @returns {string}\r\n     */\r\n    static getUserAgent()\r\n    {\r\n        return globals.window.navigator? globals.window.navigator.userAgent : \"\";\r\n    }\r\n\r\n    /**\r\n     * hasLocalStorage\r\n     *\r\n     * true if localStorage support exists, is enabled, and works; false otherwise\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static hasLocalStorage()\r\n    {\r\n        if (WebLib.fLocalStorage == null) {\r\n            let f = false;\r\n            if (globals.window.localStorage) {\r\n                try {\r\n                    globals.window.localStorage.setItem(WebLib.sLocalStorageTest, WebLib.sLocalStorageTest);\r\n                    f = (globals.window.localStorage.getItem(WebLib.sLocalStorageTest) == WebLib.sLocalStorageTest);\r\n                    globals.window.localStorage.removeItem(WebLib.sLocalStorageTest);\r\n                } catch (e) {\r\n                    WebLib.printLocalStorageError(e);\r\n                    f = false;\r\n                }\r\n            }\r\n            WebLib.fLocalStorage = f;\r\n        }\r\n        return WebLib.fLocalStorage;\r\n    }\r\n\r\n    /**\r\n     * printLocalStorageError(e)\r\n     *\r\n     * @param {Error} e is an exception\r\n     */\r\n    static printLocalStorageError(e)\r\n    {\r\n        Component.printf(MESSAGE.ERROR, \"Local storage error: %s\\n\", e.message);\r\n    }\r\n\r\n    /**\r\n     * getLocalStorageItem(sKey)\r\n     *\r\n     * Returns the requested key value, or null if the key does not exist, or undefined if localStorage is not available\r\n     *\r\n     * @param {string} sKey\r\n     * @returns {string|null|undefined} sValue\r\n     */\r\n    static getLocalStorageItem(sKey)\r\n    {\r\n        let sValue;\r\n        if (WebLib.hasLocalStorage()) {\r\n            try {\r\n                sValue = globals.window.localStorage.getItem(sKey);\r\n            } catch (e) {\r\n                WebLib.printLocalStorageError(e);\r\n            }\r\n        }\r\n        return sValue;\r\n    }\r\n\r\n    /**\r\n     * setLocalStorageItem(sKey, sValue)\r\n     *\r\n     * @param {string} sKey\r\n     * @param {string} sValue\r\n     * @returns {boolean} true if localStorage is available, false if not\r\n     */\r\n    static setLocalStorageItem(sKey, sValue)\r\n    {\r\n        if (WebLib.hasLocalStorage()) {\r\n            try {\r\n                globals.window.localStorage.setItem(sKey, sValue);\r\n                return true;\r\n            } catch (e) {\r\n                WebLib.printLocalStorageError(e);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * removeLocalStorageItem(sKey)\r\n     *\r\n     * @param {string} sKey\r\n     */\r\n    static removeLocalStorageItem(sKey)\r\n    {\r\n        if (WebLib.hasLocalStorage()) {\r\n            try {\r\n                globals.window.localStorage.removeItem(sKey);\r\n            } catch (e) {\r\n                WebLib.printLocalStorageError(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * getLocalStorageKeys()\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    static getLocalStorageKeys()\r\n    {\r\n        let a = [];\r\n        if (WebLib.hasLocalStorage()) {\r\n            try {\r\n                for (let i = 0, c = globals.window.localStorage.length; i < c; i++) {\r\n                    a.push(globals.window.localStorage.key(i));\r\n                }\r\n            } catch (e) {\r\n                WebLib.printLocalStorageError(e);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * reloadPage()\r\n     */\r\n    static reloadPage()\r\n    {\r\n        if (globals.window.location) globals.window.location.reload();\r\n    }\r\n\r\n    /**\r\n     * isUserAgent(s)\r\n     *\r\n     * Check the browser's user-agent string for the given substring; \"iOS\" and \"MSIE\" are special values you can\r\n     * use that will match any iOS or MSIE browser, respectively (even IE11, in the case of \"MSIE\").\r\n     *\r\n     * 2013-11-06: In a questionable move, MSFT changed the user-agent reported by IE11 on Windows 8.1, eliminating\r\n     * the \"MSIE\" string (which MSDN calls a \"version token\"; see http://msdn.microsoft.com/library/ms537503.aspx);\r\n     * they say \"public websites should rely on feature detection, rather than browser detection, in order to design\r\n     * their sites for browsers that don't support the features used by the website.\" So, in IE11, we get a user-agent\r\n     * that tries to fool apps into thinking the browser is more like WebKit or Gecko:\r\n     *\r\n     *      Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\r\n     *\r\n     * That's a nice idea, but in the meantime, they hosed the XSL transform code in embed.js, which contained\r\n     * some very critical browser-specific code; turning on IE's \"Compatibility Mode\" didn't help either, because\r\n     * that's a sledgehammer solution which restores the old user-agent string but also disables other features like\r\n     * HTML5 canvas support. As an interim solution, I'm treating any \"MSIE\" check as a check for either \"MSIE\" or\r\n     * \"Trident\".\r\n     *\r\n     * UPDATE: I've since found ways to make the code in embed.js more browser-agnostic, so for now, there's isn't\r\n     * any code that cares about \"MSIE\", but I've left the change in place, because I wouldn't be surprised if I'll\r\n     * need more IE-specific code in the future, perhaps for things like copy/paste functionality, or mouse capture.\r\n     *\r\n     * 2019-10-26: Apple has pulled a stunt in iPadOS 13 similar to MSFT: trying to pretend that Safari on iPadOS is\r\n     * indistinguishable from the desktop version.  Except that there are still situations where we need to know the\r\n     * difference (eg, when there's only a soft keyboard as opposed to a dedicated keyboard).  See monitor.js for details.\r\n     *\r\n     * @param {string} s is a substring to search for in the user-agent; as noted above, \"iOS\" and \"MSIE\" are special values\r\n     * @returns {boolean} is true if the string was found, false if not\r\n     */\r\n    static isUserAgent(s)\r\n    {\r\n        if (globals.window.navigator) {\r\n            let userAgent = WebLib.getUserAgent();\r\n            /*\r\n             * Here's one case where we have to be careful with Component, because when isUserAgent() is called by\r\n             * the init code below, component.js hasn't been loaded yet.  The simple solution for now is to remove the call.\r\n             *\r\n             *      Component.printf(\"agent: %s\\n\", userAgent);\r\n             *\r\n             * And yes, it would be pointless to use the conditional (?) operator below, if not for the Google Closure\r\n             * Compiler (v20130823) failing to detect the entire expression as a boolean.\r\n             */\r\n            return s == \"iOS\" && (!!userAgent.match(/(iPod|iPhone|iPad)/) || (globals.window.navigator.platform === 'MacIntel' && globals.window.navigator.maxTouchPoints > 1)) || s == \"MSIE\" && !!userAgent.match(/(MSIE|Trident)/) || (userAgent.indexOf(s) >= 0);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * isMobile(sDevice)\r\n     *\r\n     * Checks the URL for a \"mobile\" parameter, and failing that, checks the browser's user-agent string for the\r\n     * substring \"Mobi\", as per Mozilla recommendation:\r\n     *\r\n     *      https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\r\n     *\r\n     * @param {string} [sDevice] (eg, \"iPad\" to check for iPad, or \"!iPad\" to specifically exclude it)\r\n     * @returns {boolean} is true if the browser appears to be a mobile (ie, non-desktop) web browser, false if not\r\n     */\r\n    static isMobile(sDevice)\r\n    {\r\n        let sMobile = WebLib.getURLParm(\"mobile\");\r\n        if (sMobile) return sMobile == \"true\";\r\n        if (WebLib.isUserAgent(\"Mobi\")) {\r\n            if (!sDevice) return true;\r\n            let fInvert = sDevice[0] == '!';\r\n            if (fInvert) sDevice = sDevice.substr(1);\r\n            return WebLib.isUserAgent(sDevice) != fInvert;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * findProperty(obj, sProp, sSuffix)\r\n     *\r\n     * If both sProp and sSuffix are set, then any browser-specific prefixes are inserted between sProp and sSuffix,\r\n     * and if a match is found, it is returned without sProp.\r\n     *\r\n     * For example, if findProperty(document, 'on', 'fullscreenchange') discovers that 'onwebkitfullscreenchange' exists,\r\n     * it will return 'webkitfullscreenchange', in preparation for an addEventListener() call.\r\n     *\r\n     * More commonly, sSuffix is not used, so whatever property is found is returned as-is.\r\n     *\r\n     * @param {Object|null|undefined} obj\r\n     * @param {string} sProp\r\n     * @param {string} [sSuffix]\r\n     * @returns {string|null}\r\n     */\r\n    static findProperty(obj, sProp, sSuffix)\r\n    {\r\n        if (obj) {\r\n            for (let i = 0; i < WebLib.asBrowserPrefixes.length; i++) {\r\n                let sName = WebLib.asBrowserPrefixes[i];\r\n                if (sSuffix) {\r\n                    sName += sSuffix;\r\n                    let sEvent = sProp + sName;\r\n                    if (sEvent in obj) return sName;\r\n                } else {\r\n                    if (!sName) {\r\n                        sName = sProp[0];\r\n                    } else {\r\n                        sName += sProp[0].toUpperCase();\r\n                    }\r\n                    sName += sProp.substr(1);\r\n                    if (sName in obj) return sName;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * getURLParm(sParm)\r\n     *\r\n     * First looks for sParm exactly as specified, then looks for the lower-case version.\r\n     *\r\n     * @param {string} sParm\r\n     * @returns {string|undefined}\r\n     */\r\n    static getURLParm(sParm)\r\n    {\r\n        if (!WebLib.parmsURL) {\r\n            WebLib.parmsURL = WebLib.parseURLParms();\r\n        }\r\n        return WebLib.parmsURL[sParm] || WebLib.parmsURL[sParm.toLowerCase()];\r\n    }\r\n\r\n    /**\r\n     * parseURLParms(sParms)\r\n     *\r\n     * @param {string} [sParms] containing the parameter portion of a URL (ie, after the '?')\r\n     * @returns {Object} containing properties for each parameter found\r\n     */\r\n    static parseURLParms(sParms)\r\n    {\r\n        let aParms = {};\r\n        if (globals.window.location) {\r\n            if (!sParms) {\r\n                /*\r\n                 * Note that window.location.href returns the entire URL, whereas window.location.search\r\n                 * returns only the parameters, if any (starting with the '?', which we skip over with a substr() call).\r\n                 */\r\n                sParms = globals.window.location.search.substr(1);\r\n            }\r\n            let match;\r\n            let pl = /\\+/g; // RegExp for replacing addition symbol with a space\r\n            let search = /([^&=]+)=?([^&]*)/g;\r\n            let decode = function(s)\r\n            {\r\n                return decodeURIComponent(s.replace(pl, \" \"));\r\n            };\r\n\r\n            while ((match = search.exec(sParms))) {\r\n                aParms[decode(match[1])] = decode(match[2]);\r\n            }\r\n        }\r\n        return aParms;\r\n    }\r\n\r\n    /**\r\n     * downloadFile(sData, sType, fBase64, sFileName)\r\n     *\r\n     * @param {string|Uint8Array} sData\r\n     * @param {string} sType\r\n     * @param {boolean} [fBase64]\r\n     * @param {string} [sFileName]\r\n     */\r\n    static downloadFile(sData, sType, fBase64, sFileName)\r\n    {\r\n        let link = null, sAlert, sURI;\r\n\r\n        if (typeof sData != 'string') {\r\n            if (typeof Blob == 'function' && typeof URL != 'undefined' && URL && typeof URL.createObjectURL == 'function') {\r\n                let blob = new Blob([sData], {type: 'application/octet-stream'});\r\n                sURI = URL.createObjectURL(blob);\r\n            }\r\n        }\r\n        else {\r\n            sURI = \"data:application/\" + sType + (fBase64? \";base64\" : \"\") + \",\";\r\n            sURI += (fBase64? sData : encodeURIComponent(sData));\r\n        }\r\n        if (!sURI) {\r\n            sAlert = 'Operation unsupported by your browser.';\r\n        }\r\n        else {\r\n            if (sFileName) {\r\n                link = document.createElement('a');\r\n                if (typeof link.download != 'string') link = null;\r\n            }\r\n            if (link) {\r\n                link.href = sURI;\r\n                link.download = sFileName;\r\n                document.body.appendChild(link);    // Firefox allegedly requires the link to be in the body\r\n                link.click();\r\n                document.body.removeChild(link);\r\n                sAlert = 'Check your Downloads folder for ' + sFileName + '.';\r\n                // if (WebLib.isUserAgent(\"Chrome\")) {\r\n                //     sAlert += '\\n\\nIn Chrome, after clicking OK, you may ALSO have to select the \"Window\" menu, choose \"Downloads\", and then locate this download and select \"Keep\".';\r\n                //     sAlert += '\\n\\nThis is part of Chrome\\'s \"Security By Jumping Through Extra Hoops\" technology, which is much easier for Google to implement than actually checking for something malicious.';\r\n                //     sAlert += '\\n\\nAnd for the record, there is nothing malicious on the PCjs website.';\r\n                // }\r\n            }\r\n            else if (globals.window.open) {\r\n                globals.window.open(sURI);\r\n                sAlert = 'Check your browser for a new window/tab containing the requested data' + (sFileName? (' (' + sFileName + ')') : '') + '.';\r\n            }\r\n        }\r\n        return sAlert;\r\n    }\r\n\r\n    /**\r\n     * onCountRepeat(n, fnRepeat, fnComplete, msDelay)\r\n     *\r\n     * Call fnRepeat() n times with an msDelay millisecond delay between calls,\r\n     * then call fnComplete() when n has been exhausted OR fnRepeat() returns false.\r\n     *\r\n     * @param {number} n\r\n     * @param {function()} fnRepeat\r\n     * @param {function()} fnComplete\r\n     * @param {number} [msDelay]\r\n     */\r\n    static onCountRepeat(n, fnRepeat, fnComplete, msDelay)\r\n    {\r\n        let fnTimeout = function doCountRepeat()\r\n        {\r\n            n -= 1;\r\n            if (n >= 0) {\r\n                if (!fnRepeat()) n = 0;\r\n            }\r\n            if (n > 0) {\r\n                setTimeout(fnTimeout, msDelay || 0);\r\n                return;\r\n            }\r\n            fnComplete();\r\n        };\r\n        fnTimeout();\r\n    }\r\n\r\n    /**\r\n     * onClickRepeat(e, msDelay, msRepeat, fn)\r\n     *\r\n     * Repeatedly call fn() with an initial msDelay, and an msRepeat delay thereafter,\r\n     * as long as HTML control Object e has an active \"down\" event and fn() returns true.\r\n     *\r\n     * @param {Object} e\r\n     * @param {number} msDelay\r\n     * @param {number} msRepeat\r\n     * @param {function(boolean)} fn is passed false on the first call, true on all repeated calls\r\n     */\r\n    static onClickRepeat(e, msDelay, msRepeat, fn)\r\n    {\r\n        let ms = 0, timer = null, fIgnoreMouseEvents = false;\r\n\r\n        let fnRepeat = function doClickRepeat()\r\n        {\r\n            if (fn(ms === msRepeat)) {\r\n                timer = setTimeout(fnRepeat, ms);\r\n                ms = msRepeat;\r\n            }\r\n        };\r\n        e.onmousedown = function()\r\n        {\r\n            // Component.printf(MESSAGE.DEBUG, \"onMouseDown()\\n\");\r\n            if (!fIgnoreMouseEvents) {\r\n                if (!timer) {\r\n                    ms = msDelay;\r\n                    fnRepeat();\r\n                }\r\n            }\r\n        };\r\n        e.ontouchstart = function()\r\n        {\r\n            // Component.printf(MESSAGE.DEBUG, \"onTouchStart()\\n\");\r\n            if (!timer) {\r\n                ms = msDelay;\r\n                fnRepeat();\r\n            }\r\n        };\r\n        e.onmouseup = e.onmouseout = function()\r\n        {\r\n            // Component.printf(MESSAGE.DEBUG, \"onMouseUp()/onMouseOut()\\n\");\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n                timer = null;\r\n            }\r\n        };\r\n        e.ontouchend = e.ontouchcancel = function()\r\n        {\r\n            // Component.printf(MESSAGE.DEBUG, \"onTouchEnd()/onTouchCancel()\\n\");\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n                timer = null;\r\n            }\r\n            /*\r\n             * Devices that generate ontouch* events ALSO generate onmouse* events,\r\n             * and generally do so immediately after all the touch events are complete,\r\n             * so unless we want double the action, we need to ignore mouse events.\r\n             */\r\n            fIgnoreMouseEvents = true;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * addPageEvent(sEvent, fn)\r\n     *\r\n     * For 'load', 'unload', and 'pageshow' events, most callers should NOT use this function, but instead use\r\n     * WebLib.onInit(), WebLib.onShow(), and WebLib.onExit(), respectively.\r\n     *\r\n     * The only components that should still use addPageEvent() are THIS component (see the bottom of this file)\r\n     * and components that need to capture other events (eg, the 'resize' event in the Video component).\r\n     *\r\n     * @param {string} sEvent\r\n     * @param {function()} fn\r\n     */\r\n    static addPageEvent(sEvent, fn)\r\n    {\r\n        if (globals.window.addEventListener) {\r\n            globals.window.addEventListener(sEvent, fn);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * onInit(fn)\r\n     *\r\n     * Use this instead of setting window.onload.  Allows multiple JavaScript modules to define their own 'load' event handler.\r\n     *\r\n     * @param {function()} fn\r\n     */\r\n    static onInit(fn)\r\n    {\r\n        WebLib.aPageEventHandlers['init'].push(fn);\r\n    }\r\n\r\n    /**\r\n     * onShow(fn)\r\n     *\r\n     * @param {function()} fn\r\n     *\r\n     * Use this instead of setting window.onpageshow.  Allows multiple JavaScript modules to define their own 'pageshow' event handler.\r\n     */\r\n    static onShow(fn)\r\n    {\r\n        WebLib.aPageEventHandlers['show'].push(fn);\r\n    }\r\n\r\n    /**\r\n     * onError(sMessage)\r\n     *\r\n     * @param {string} sMessage\r\n     */\r\n    static onError(sMessage)\r\n    {\r\n        Component.printf(MESSAGE.NOTICE, \"%s\\n\\nIf it happens again, please send the URL to support@pcjs.org. Thanks.\\n\", sMessage);\r\n    }\r\n\r\n    /**\r\n     * onExit(fn)\r\n     *\r\n     * @param {function()} fn\r\n     *\r\n     * Use this instead of setting window.onunload.  Allows multiple JavaScript modules to define their own 'unload' event handler.\r\n     */\r\n    static onExit(fn)\r\n    {\r\n        WebLib.aPageEventHandlers['exit'].push(fn);\r\n    }\r\n\r\n    /**\r\n     * doPageEvent(sEvent, browser)\r\n     *\r\n     * @param {string} sEvent (one of 'init', 'show' or 'exit')\r\n     * @param {boolean} [browser] (true if generated by the browser)\r\n     */\r\n    static doPageEvent(sEvent, browser)\r\n    {\r\n        let afn = WebLib.aPageEventHandlers[sEvent];\r\n        if (afn && WebLib.fPageEventsEnabled) {\r\n            try {\r\n                for (let i = 0; i < afn.length; i++) {\r\n                    afn[i]();\r\n                }\r\n            } catch (e) {\r\n                WebLib.onError(\"An unexpected error occurred: \" + e.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * enablePageEvents(fEnable)\r\n     *\r\n     * @param {boolean} fEnable is true to enable page events, false to disable (they're enabled by default)\r\n     */\r\n    static enablePageEvents(fEnable)\r\n    {\r\n        if (!WebLib.fPageEventsEnabled && fEnable) {\r\n            WebLib.fPageEventsEnabled = true;\r\n            if (WebLib.fPageLoaded) WebLib.doPageEvent('init');\r\n            if (WebLib.fPageShowed) WebLib.doPageEvent('show');\r\n            return;\r\n        }\r\n        WebLib.fPageEventsEnabled = fEnable;\r\n    }\r\n\r\n    /**\r\n     * doPageInit()\r\n     */\r\n    static doPageInit()\r\n    {\r\n        WebLib.fPageLoaded = true;\r\n        WebLib.doPageEvent('init', true);\r\n    }\r\n\r\n    /**\r\n     * doPageShow()\r\n     */\r\n    static doPageShow()\r\n    {\r\n        WebLib.fPageShowed = true;\r\n        WebLib.doPageEvent('show', true);\r\n    }\r\n\r\n    /**\r\n     * doPageExit()\r\n     */\r\n    static doPageExit()\r\n    {\r\n        WebLib.doPageEvent('exit', true);\r\n    }\r\n\r\n    /**\r\n     * doPageReset()\r\n     */\r\n    static doPageReset()\r\n    {\r\n        if (WebLib.fPageLoaded) {\r\n            WebLib.fPageLoaded = false;\r\n            WebLib.fPageShowed = false;\r\n            /*\r\n             * TODO: Anything else?\r\n             */\r\n        }\r\n    }\r\n}\r\n\r\nWebLib.parmsURL = null;            // initialized on first call to parseURLParms()\r\n\r\nWebLib.aPageEventHandlers = {\r\n    'init': [],                 // list of 'load' handlers\r\n    'show': [],                 // list of 'pageshow' handlers\r\n    'exit': []                  // list of 'unload' handlers (although we prefer to use 'beforeunload' if possible)\r\n};\r\n\r\nWebLib.asBrowserPrefixes = ['', 'moz', 'ms', 'webkit'];\r\n\r\nWebLib.fPageLoaded = false;        // set once the page's first 'load' event has occurred\r\nWebLib.fPageShowed = false;        // set once the page's first 'pageshow' event has occurred\r\nWebLib.fPageEventsEnabled = true;  // default is true, set to false (or true) by enablePageEvents()\r\nWebLib.fAdBlockerWarning = false;\r\n\r\n/**\r\n * fLocalStorage\r\n *\r\n * true if localStorage support exists, is enabled, and works; \"falsey\" otherwise\r\n *\r\n * @type {boolean|null}\r\n */\r\nWebLib.fLocalStorage = null;\r\n\r\n/**\r\n * TODO: Is there any way to get the Closure Compiler to stop inlining this string?  This isn't cutting it.\r\n *\r\n * @const {string}\r\n */\r\nWebLib.sLocalStorageTest = \"PCjs.localStorage\";\r\n\r\nWebLib.addPageEvent('load', WebLib.doPageInit);\r\nWebLib.addPageEvent('pageshow', WebLib.doPageShow);\r\nWebLib.addPageEvent(WebLib.isUserAgent(\"iOS\")? 'pagehide' : (WebLib.isUserAgent(\"Opera\")? 'unload' : 'beforeunload'), WebLib.doPageExit);\r\n\r\n/*\r\n * If this is DEBUG (eg, un-COMPILED) code, then allow the user to override DEBUG with a \"debug=false\" embedded in\r\n * the URL; note that the Closure Compiler won't let us alter the DEBUG variable, because it's defined as a @define, which\r\n * implies @const as well, so we must resort to modifying it indirectly, using the global window object.\r\n *\r\n * TODO: Consider yet another embedXXX() parameter that would also allow DEBUG to be turned off on a page-by-page basis;\r\n * it's low priority, because it would only affect machines that explicitly request un-COMPILED code, and there are very\r\n * few such machines (eg, /blog/_posts/2015/2015-01-17-pcjs-uncompiled.md).\r\n *\r\n * Deal with WebLib.getURLParm(\"backtrack\") in /machines/pcx86/modules/v2/defines.js at the same time.\r\n */\r\nif (DEBUG) {\r\n    let debug = WebLib.getURLParm(\"debug\");\r\n    if (debug == \"false\") {\r\n        globals.window['DEBUG'] = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/component.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/*\r\n * All PCjs components now use JSDoc types, primarily so that Google's Closure Compiler will compile\r\n * everything with zero warnings when ADVANCED_OPTIMIZATIONS are enabled.  For more information about\r\n * the JSDoc types supported by the Closure Compiler:\r\n *\r\n *      https://developers.google.com/closure/compiler/docs/js-for-compiler#types\r\n *\r\n * I also attempted to validate this code with JSLint, but it complained too much; eg, it didn't like\r\n * \"while (true)\", a tried and \"true\" programming convention for decades, and it wanted me to replace\r\n * all \"++\" and \"--\" operators with \"+= 1\" and \"-= 1\", use \"(s || '')\" instead of \"(s? s : '')\", etc.\r\n *\r\n * I prefer sticking with traditional C-style idioms, in part because they are more portable.  That\r\n * does NOT mean I'm trying to write \"portable JavaScript,\" but some of this code was ported from C code\r\n * I'd written long ago, so portability is good, and I'm not going to throw that away if there's no need.\r\n *\r\n * UPDATE: I've since switched from JSLint to JSHint, which seems to have more reasonable defaults.\r\n * And for new code, I have adopted some popular JavaScript idioms, like \"(s || '')\", although the need\r\n * for those kinds of expressions will be reduced as I also start adopting some ES6 features, like\r\n * default parameters.\r\n */\r\n\r\n\r\n/**\r\n * Since the Closure Compiler treats ES6 classes as @struct rather than @dict by default,\r\n * it deters us from defining named properties on our components; eg:\r\n *\r\n *      this['exports'] = {...}\r\n *\r\n * results in an error:\r\n *\r\n *      Cannot do '[]' access on a struct\r\n *\r\n * So, in order to define 'exports', we must override the @struct assumption by annotating\r\n * the class as @unrestricted (or @dict).  Note that this must be done both here and in the\r\n * subclass (eg, SerialPort), because otherwise the Compiler won't allow us to *reference*\r\n * the named property either.\r\n *\r\n * TODO: Consider marking ALL our classes unrestricted, because otherwise it forces us to\r\n * define every single property the class uses in its constructor, which results in a fair\r\n * bit of redundant initialization, since many properties aren't (and don't need to be) fully\r\n * initialized until the appropriate init(), reset(), restore(), etc. function is called.\r\n *\r\n * The upside, however, may be that since the structure of the class is completely defined by\r\n * the constructor, JavaScript engines may be able to optimize and run more efficiently.\r\n *\r\n * @class Component\r\n * @unrestricted\r\n */\r\nclass Component {\r\n    /*\r\n    * Types recognized and supported by selected functions (eg, Computer.getMachineParm())\r\n    */\r\n    static TYPE = {\r\n        NUMBER:     \"number\",\r\n        OBJECT:     \"object\",\r\n        STRING:     \"string\"\r\n    };\r\n\r\n    /*\r\n    * Every component created on the current page is recorded in this array (see Component.add()),\r\n    * enabling any component to locate another component by ID (see Component.getComponentByID())\r\n    * or by type (see Component.getComponentByType()).\r\n    *\r\n    * Every machine on the page are now recorded as well, by their machine ID.  We then record the\r\n    * various resources used by that machine.\r\n    */\r\n\r\n    static asyncCommands = [\r\n        'hold', 'sleep', 'wait'\r\n    ];\r\n\r\n    static globalCommands = {\r\n        'alert': Component.scriptAlert,\r\n        'sleep': Component.scriptSleep\r\n    };\r\n\r\n    static componentCommands = {\r\n        'select':   Component.scriptSelect\r\n    };\r\n\r\n    static lastUID = 0;\r\n\r\n    /**\r\n     * Component(type, parms, bitsMessage)\r\n     *\r\n     * A Component object requires:\r\n     *\r\n     *      type: a user-defined type name (eg, \"CPU\")\r\n     *\r\n     * and accepts any or all of the following (parms) properties:\r\n     *\r\n     *      id: component ID (default is \"\")\r\n     *      name: component name (default is \"\"; if blank, toString() will use the type name only)\r\n     *      comment: component comment string (default is undefined)\r\n     *\r\n     * Component subclasses will usually have additional (parms) properties.\r\n     *\r\n     * @param {string} type\r\n     * @param {Object} [parms]\r\n     * @param {number} [bitsMessage] selects message(s) that the component wants to enable (default is 0)\r\n     */\r\n    constructor(type, parms, bitsMessage)\r\n    {\r\n        this.type = type;\r\n\r\n        if (!parms) parms = {'id': \"\", 'name': \"\"};\r\n\r\n        this.name = parms['name'];\r\n        this.comment = parms['comment'];\r\n        this.parms = parms;\r\n        this.uid = ++Component.lastUID;\r\n\r\n        /*\r\n         * The following Component properties need to be accessible by other machines and/or command scripts;\r\n         * well, OK, or we could have exported some new functions to walk the contents of these properties, as we\r\n         * did with findMachineComponent(), but this works just as well.\r\n         *\r\n         * Also, while the double-assignment looks silly (ie, using both dot and bracket property notation), it\r\n         * resolves a complaint from the Closure Compiler, because if we use ONLY bracket notation here, then the\r\n         * Compiler wants us to change all the other references to bracket notation as well.\r\n         */\r\n        this.id = this['id'] = parms['id'] || \"\";\r\n        this.exports = this['exports'] = {};\r\n        this.bindings = this['bindings'] = {};\r\n\r\n        let i = this.id.indexOf('.');\r\n        if (i < 0) {\r\n            this.idMachine = \"PCjs\";\r\n            this.idComponent = this.id;\r\n        } else {\r\n            this.idMachine = this.id.substr(0, i);\r\n            this.idComponent = this.id.substr(i + 1);\r\n        }\r\n\r\n        /*\r\n         * Gather all the various component flags (booleans) into a single \"flags\" object, and encourage\r\n         * subclasses to do the same, to reduce the property clutter we have to wade through while debugging.\r\n         */\r\n        this.flags = {\r\n            ready:      false,\r\n            busy:       false,\r\n            busyCancel: false,\r\n            initDone:   false,\r\n            powered:    false,\r\n            unloading:  false,\r\n            error:      false\r\n        };\r\n\r\n        this.fnReady = null;\r\n        this.clearError();\r\n        this.bitsMessage = bitsMessage || 0;\r\n\r\n        this.cmp = null;\r\n        this.bus = null;\r\n        this.cpu = null;\r\n        this.dbg = null;\r\n\r\n        /*\r\n         * TODO: Consider adding another parameter to the Component() constructor that allows components to tell\r\n         * us if they support single or multiple instances per machine.  For example, there can be multiple SerialPort\r\n         * components per machine, but only one CPU component (some machines also support an FPU, but that component\r\n         * is considered separate from the CPU).\r\n         *\r\n         * It's not critical, but it would help catch machine configuration errors; for example, a machine that mistakenly\r\n         * includes two CPU components may, aside from wasting memory, end up with odd side-effects, like unresponsive\r\n         * CPU controls.\r\n         */\r\n        Component.add(this);\r\n    }\r\n\r\n    /**\r\n     * Component.add(component)\r\n     *\r\n     * @param {Component} component\r\n     */\r\n    static add(component)\r\n    {\r\n        /*\r\n         * This just generates a lot of useless noise, handy in the early days, not so much these days....\r\n         *\r\n         *      if (DEBUG) Component.printf(\"Component.add(%s,%s)\\n\", component.type, component.id);\r\n         */\r\n        globals.pcjs['components'].push(component);\r\n    }\r\n\r\n    /**\r\n     * Component.addMachine(idMachine)\r\n     *\r\n     * @param {string} idMachine\r\n     */\r\n    static addMachine(idMachine)\r\n    {\r\n        globals.pcjs['machines'][idMachine] = {};\r\n    }\r\n\r\n    /**\r\n     * Component.destroyMachine(idMachine)\r\n     *\r\n     * @param {string} idMachine\r\n     * @returns {boolean} true if the machine was destroyed, false if it didn't exist\r\n     */\r\n    static destroyMachine(idMachine)\r\n    {\r\n        if (globals.pcjs['machines'][idMachine]) {\r\n            let components = globals.pcjs['components'];\r\n            for (let i = 0; i < components.length; i++) {\r\n                let component = components[i];\r\n                if (component.id.indexOf(idMachine) == 0) {\r\n                    components.splice(i--, 1);\r\n                }\r\n            }\r\n            delete globals.pcjs['machines'][idMachine];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Component.getMachines()\r\n     *\r\n     * @returns {Array.<string>}\r\n     */\r\n    static getMachines()\r\n    {\r\n        return Object.keys(globals.pcjs['machines']);\r\n    }\r\n\r\n    /**\r\n     * Component.addMachineResource(idMachine, sName, data)\r\n     *\r\n     * @param {string} idMachine\r\n     * @param {string|null} sName (name of the resource)\r\n     * @param {*} data\r\n     */\r\n    static addMachineResource(idMachine, sName, data)\r\n    {\r\n        /*\r\n         * I used to assert(machines[idMachine]), but when we're running as a Node app, embed.js is not used,\r\n         * so addMachine() is never called, so resources do not need to be recorded.\r\n         */\r\n        if (globals.pcjs['machines'][idMachine] && sName) {\r\n            globals.pcjs['machines'][idMachine][sName] = data;\r\n            if (sName == 'parms' && typeof data == \"string\") {\r\n                globals.pcjs['machines'][idMachine]['config'] = eval('(' + data + ')');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component.getMachineResources(idMachine)\r\n     *\r\n     * @param {string} idMachine\r\n     * @returns {Object|undefined}\r\n     */\r\n    static getMachineResources(idMachine)\r\n    {\r\n        return globals.pcjs['machines'][idMachine];\r\n    }\r\n\r\n    /**\r\n     * Component.getTime()\r\n     *\r\n     * @returns {number} the current time, in milliseconds\r\n     */\r\n    static getTime()\r\n    {\r\n        return Date.now() || +new Date();\r\n    }\r\n\r\n    /**\r\n     * Component.printf(format, ...args)\r\n     *\r\n     * If format is a number, it's used as a message number, and the format string is the first arg.\r\n     *\r\n     * @param {string|number} format\r\n     * @param {...} args\r\n     */\r\n    static printf(format, ...args)\r\n    {\r\n        let bitsMessage = 0;\r\n        if (typeof format == \"number\") {\r\n            bitsMessage = format;\r\n            format = args.shift();\r\n        }\r\n        if (DEBUG || bitsMessage >= MESSAGE.LOG && bitsMessage <= MESSAGE.ERROR) {\r\n            let alert = false;\r\n            if (bitsMessage == MESSAGE.ERROR) {\r\n                alert = true;\r\n                format = \"Error: \" + format;\r\n            } else if (bitsMessage == MESSAGE.WARNING) {\r\n                alert = true;\r\n                format = \"Warning: \" + format;\r\n            } else if (bitsMessage == MESSAGE.NOTICE) {\r\n                alert = true;\r\n            }\r\n            let sMessage = StrLib.sprintf(format, ...args).trim();\r\n            if (!alert) {\r\n                console.log(sMessage);\r\n            } else {\r\n                Component.alertUser(sMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component.assert(f, s)\r\n     *\r\n     * Verifies conditions that must be true (for DEBUG builds only).\r\n     *\r\n     * The Closure Compiler should automatically remove all references to Component.assert() in non-DEBUG builds.\r\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\r\n     *\r\n     * @param {boolean|number|undefined} f is the expression we are asserting to be true\r\n     * @param {string} [s] is description of the assertion on failure\r\n     */\r\n    static assert(f, s)\r\n    {\r\n        if (DEBUG) {\r\n            if (!f) {\r\n                if (!s) s = \"assertion failure\";\r\n                /*\r\n                 * Why do we throw an Error only to immediately catch and ignore it?  Simply to give\r\n                 * any IDE the opportunity to inspect the application's state.  Even when the IDE has\r\n                 * control, you should still be able to invoke Debugger commands from the IDE's REPL,\r\n                 * using the global function that the Debugger constructor defines; eg:\r\n                 *\r\n                 *      pcx86('r')\r\n                 *      pcx86('dw 0:0')\r\n                 *      pcx86('h')\r\n                 *      ...\r\n                 *\r\n                 * If you have no desire to stop on assertions, consider this a no-op.  However, another\r\n                 * potential benefit of creating an Error object is that, for browsers like Chrome, we get\r\n                 * a stack trace, too.\r\n                 */\r\n                try {\r\n                    throw new Error(s);\r\n                } catch(e) {\r\n                    Component.printf(MESSAGE.ERROR, \"%s\\n\", e.stack || e.message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component.warning(s)\r\n     *\r\n     * @param {string} s describes the warning\r\n     */\r\n    static warning(s)\r\n    {\r\n        Component.printf(MESSAGE.WARNING, s);\r\n    }\r\n\r\n    /**\r\n     * Component.error(s)\r\n     *\r\n     * @param {string} s describes the error; an alert() is displayed as well\r\n     */\r\n    static error(s)\r\n    {\r\n        Component.printf(MESSAGE.ERROR, s);\r\n    }\r\n\r\n    /**\r\n     * Component.alertUser(sMessage, fPrinted)\r\n     *\r\n     * @param {string} sMessage\r\n     * @param {boolean} [fPrinted] (true if the message has already been printed)\r\n     */\r\n    static alertUser(sMessage, fPrinted)\r\n    {\r\n        if (globals.window.alert) {\r\n            globals.window.alert(sMessage);\r\n        }\r\n        if (!fPrinted) console.log(sMessage);\r\n    }\r\n\r\n    /**\r\n     * Component.confirmUser(sPrompt)\r\n     *\r\n     * @param {string} sPrompt\r\n     * @returns {boolean} true if the user clicked OK, false if Cancel/Close\r\n     */\r\n    static confirmUser(sPrompt)\r\n    {\r\n        let fResponse = false;\r\n        if (globals.window.confirm) {\r\n            fResponse = globals.window.confirm(sPrompt);\r\n        }\r\n        return fResponse;\r\n    }\r\n\r\n    /**\r\n     * Component.promptUser()\r\n     *\r\n     * @param {string} sPrompt\r\n     * @param {string} [sDefault]\r\n     * @returns {string|null}\r\n     */\r\n    static promptUser(sPrompt, sDefault)\r\n    {\r\n        let sResponse = null;\r\n        if (globals.window.prompt) {\r\n            sResponse = globals.window.prompt(sPrompt, sDefault === undefined? \"\" : sDefault);\r\n        }\r\n        return sResponse;\r\n    }\r\n\r\n    /**\r\n     * Component.appendControl(control, sText)\r\n     *\r\n     * @param {Object} control\r\n     * @param {string} sText\r\n     */\r\n    static appendControl(control, sText)\r\n    {\r\n        control.value += sText;\r\n        /*\r\n         * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\r\n         */\r\n        if (COMPILED) {\r\n            sText = control.value;\r\n            if (sText.length > 8192) control.value = sText.substr(sText.length - 4096);\r\n        }\r\n        control.scrollTop = control.scrollHeight;\r\n    }\r\n\r\n    /**\r\n     * Component.replaceControl(control, sSearch, sReplace)\r\n     *\r\n     * @param {Object} control\r\n     * @param {string} sSearch\r\n     * @param {string} sReplace\r\n     */\r\n    static replaceControl(control, sSearch, sReplace)\r\n    {\r\n        let sText = control.value;\r\n        let i = sText.lastIndexOf(sSearch);\r\n        if (i < 0) {\r\n            sText += sSearch + '\\n';\r\n        } else {\r\n            sText = sText.substr(0, i) + sReplace + sText.substr(i + sSearch.length);\r\n        }\r\n        /*\r\n         * Prevent the <textarea> from getting too large; otherwise, printing becomes slower and slower.\r\n         */\r\n        if (COMPILED && sText.length > 8192) sText = sText.substr(sText.length - 4096);\r\n        control.value = sText;\r\n        control.scrollTop = control.scrollHeight;\r\n    }\r\n\r\n    /**\r\n     * Component.bindExternalControl(component, sBinding, sType)\r\n     *\r\n     * @param {Component} component\r\n     * @param {string} sBinding\r\n     * @param {string} [sType] is the external component type (default is \"Panel\")\r\n     */\r\n    static bindExternalControl(component, sBinding, sType = \"Panel\")\r\n    {\r\n        if (sBinding) {\r\n            let target = Component.getComponentByType(sType, component.id);\r\n            if (target) {\r\n                let control = target.bindings[sBinding];\r\n                if (control) {\r\n                    component.setBinding(\"\", sBinding, control);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component.bindComponentControls(component, element, sAppClass)\r\n     *\r\n     * @param {Component} component\r\n     * @param {HTMLElement} element (from the DOM)\r\n     * @param {string} sAppClass\r\n     */\r\n    static bindComponentControls(component, element, sAppClass)\r\n    {\r\n        let aeControls = Component.getElementsByClass(sAppClass + \"-control\", \"\", element.parentNode);\r\n\r\n        for (let iControl = 0; iControl < aeControls.length; iControl++) {\r\n\r\n            let aeChildNodes = aeControls[iControl].childNodes;\r\n\r\n            for (let iNode = 0; iNode < aeChildNodes.length; iNode++) {\r\n                let control = aeChildNodes[iNode];\r\n                if (control.nodeType !== 1 /* document.ELEMENT_NODE */) {\r\n                    continue;\r\n                }\r\n                let sClass = control.getAttribute(\"class\");\r\n                if (!sClass) continue;\r\n                let aClasses = sClass.split(\" \");\r\n                for (let iClass = 0; iClass < aClasses.length; iClass++) {\r\n                    let parms;\r\n                    sClass = aClasses[iClass];\r\n                    switch (sClass) {\r\n                        case sAppClass + \"-binding\":\r\n                            parms = Component.getComponentParms(/** @type {HTMLElement} */(control));\r\n                            if (parms && parms['binding'] !== undefined) {\r\n                                component.setBinding(parms['type'], parms['binding'], /** @type {HTMLElement} */(control), parms['value']);\r\n                            } else if (!parms || parms['type'] != \"description\") {\r\n                                Component.printf(MESSAGE.WARNING, \"Component \\\"%s\\\" missing binding%s\\n\", component.toString(), (parms? \" for \" + parms['type'] : \"\"));\r\n                            }\r\n                            iClass = aClasses.length;\r\n                            break;\r\n                        default:\r\n                            // if (DEBUG) Component.printf(MESSAGE.WARNING, \"Component.bindComponentControls(%s): unrecognized control class \\\"%s\\\"\\n\", component.toString(), sClass);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component.getComponents(idRelated)\r\n     *\r\n     * We could store components as properties, using the component's ID, and change\r\n     * this linear lookup into a property lookup, but some components may have no ID.\r\n     *\r\n     * @param {string} [idRelated] of related component, if any\r\n     * @returns {Array} of components\r\n     */\r\n    static getComponents(idRelated)\r\n    {\r\n        let i;\r\n        let aComponents = [];\r\n        /*\r\n         * If idRelated is provided, we check it for a machine prefix, and use any\r\n         * existing prefix to constrain matches to IDs with the same prefix, in order to\r\n         * avoid matching components belonging to other machines.\r\n         */\r\n        if (idRelated && (i = idRelated.indexOf('.')) > 0) {\r\n            idRelated = idRelated.substr(0, i + 1);\r\n        }\r\n        let components = globals.pcjs['components'];\r\n        for (i = 0; i < components.length; i++) {\r\n            let component = components[i];\r\n            if (!idRelated || component.id.indexOf(idRelated) == 0) {\r\n                aComponents.push(component);\r\n            }\r\n        }\r\n        return aComponents;\r\n    }\r\n\r\n    /**\r\n     * Component.getComponentByID(id, idRelated)\r\n     *\r\n     * We could store components as properties, using the component's ID, and change\r\n     * this linear lookup into a property lookup, but some components may have no ID.\r\n     *\r\n     * @param {string} id of the desired component\r\n     * @param {string|boolean} [idRelated] of related component\r\n     * @returns {Component|null}\r\n     */\r\n    static getComponentByID(id, idRelated)\r\n    {\r\n        if (id !== undefined) {\r\n            let i;\r\n            /*\r\n             * If idRelated is provided, we check it for a machine prefix, and use any\r\n             * existing prefix to constrain matches to IDs with the same prefix, in order to\r\n             * avoid matching components belonging to other machines.\r\n             */\r\n            if (idRelated && (i = idRelated.indexOf('.')) > 0) {\r\n                id = idRelated.substr(0, i + 1) + id;\r\n            }\r\n            let components = globals.pcjs['components'];\r\n            for (i = 0; i < components.length; i++) {\r\n                if (components[i]['id'] === id) {\r\n                    return components[i];\r\n                }\r\n            }\r\n            if (components.length && idRelated !== false) {\r\n                Component.printf(MESSAGE.WARNING, \"Component ID \\\"%s\\\" not found\\n\", id);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Component.getComponentByType(sType, idRelated, componentPrev)\r\n     *\r\n     * @param {string} sType of the desired component\r\n     * @param {string} [idRelated] of related component\r\n     * @param {Component|boolean|null} [componentPrev] of previously returned component, if any\r\n     * @returns {Component|null}\r\n     */\r\n    static getComponentByType(sType, idRelated, componentPrev = null)\r\n    {\r\n        if (sType !== undefined) {\r\n            let i;\r\n            /*\r\n             * If idRelated is provided, we check it for a machine prefix, and use any\r\n             * existing prefix to constrain matches to IDs with the same prefix, in order to\r\n             * avoid matching components belonging to other machines.\r\n             */\r\n            if (idRelated) {\r\n                if ((i = idRelated.indexOf('.')) > 0) {\r\n                    idRelated = idRelated.substr(0, i + 1);\r\n                } else {\r\n                    idRelated = \"\";\r\n                }\r\n            }\r\n            let components = globals.pcjs['components'];\r\n            for (i = 0; i < components.length; i++) {\r\n                if (componentPrev) {\r\n                    if (componentPrev == components[i]) componentPrev = null;\r\n                    continue;\r\n                }\r\n                if (sType == components[i].type && (!idRelated || !components[i].id.indexOf(idRelated))) {\r\n                    return components[i];\r\n                }\r\n            }\r\n            if (MAXDEBUG && componentPrev !== false) {\r\n                Component.printf(MESSAGE.WARNING, \"Component type \\\"%s\\\" not found\\n\", sType);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Component.getComponentParms(element)\r\n     *\r\n     * @param {HTMLElement} element (from the DOM)\r\n     * @returns {Object|null}\r\n     */\r\n    static getComponentParms(element)\r\n    {\r\n        let parms = null;\r\n        if (element.getAttribute) {\r\n            let sParms = element.getAttribute(\"data-value\");\r\n            if (sParms) {\r\n                try {\r\n                    parms = /** @type {Object} */ (eval('(' + sParms + ')'));\r\n                    /*\r\n                    * We can no longer invoke removeAttribute() because some components (eg, Panel) need\r\n                    * to run their initXXX() code more than once, to avoid initialization-order dependencies.\r\n                    *\r\n                    *      if (!DEBUG) {\r\n                    *          element.removeAttribute(\"data-value\");\r\n                    *      }\r\n                    */\r\n                } catch(e) {\r\n                    Component.error(e.message + \" (\" + sParms + \")\");\r\n                }\r\n            }\r\n        } else {\r\n            parms = element['config'] || null;\r\n            if (parms) {\r\n                let idMachine = element['id'], idComponent = parms['id'];\r\n                if (idMachine && idComponent && idComponent.indexOf('.') < 0) parms['id'] = idMachine + '.' + idComponent;\r\n            }\r\n        }\r\n        return parms;\r\n    }\r\n\r\n    /**\r\n     * Component.getElementsByClass(sClass, sComponent, element)\r\n     *\r\n     * This is a cross-browser helper function, since not all browser's support getElementsByClassName()\r\n     *\r\n     * TODO: This should probably be moved into weblib.js at some point, along with the control binding functions above,\r\n     * to keep all the browser-related code together.\r\n     *\r\n     * @param {string} sClass\r\n     * @param {string} [sComponent]\r\n     * @param {HTMLElement|Object} [element] (from the DOM; default is document)\r\n     * @returns {Array|NodeList}\r\n     */\r\n    static getElementsByClass(sClass, sComponent = \"\", element = globals.document)\r\n    {\r\n        let ae = [];\r\n        if (sComponent) {\r\n            sClass += '-' + sComponent;\r\n            if (sComponent != \"machine\") sClass += \"-object\";\r\n        }\r\n        /*\r\n         * Use the browser's built-in getElementsByClassName() if it appears to be available\r\n         * (for example, it's not available in IE8, but it should be available in IE9 and up)\r\n         */\r\n        if (globals.browser) {\r\n            if (element.getElementsByClassName) {\r\n                ae = element.getElementsByClassName(sClass);\r\n            }\r\n            else if (element.getElementsByTagName) {\r\n                let i, j;\r\n                let aeAll = element.getElementsByTagName(\"*\");\r\n                let re = new RegExp('(^| )' + sClass + '( |$)');\r\n                for (i = 0, j = aeAll.length; i < j; i++) {\r\n                    if (re.test(aeAll[i].className)) {\r\n                        ae.push(aeAll[i]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            let machineIDs = Object.keys(globals.pcjs['machines']);\r\n            for (let iMachine = 0; iMachine < machineIDs.length; iMachine++) {\r\n                let idMachine = machineIDs[iMachine];\r\n                let configMachine = globals.pcjs['machines'][idMachine]['config'];\r\n                if (configMachine) {\r\n                    let configComponent = configMachine[sComponent];\r\n                    if (configComponent) {\r\n                        if (!Array.isArray(configComponent)) {\r\n                            configComponent = [configComponent];\r\n                        }\r\n                        for (let component of configComponent) {\r\n                            let fakeElement = {\r\n                                'id': idMachine,\r\n                                'config': component\r\n                            };\r\n                            ae.push(fakeElement);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!ae.length) {\r\n            if (MAXDEBUG) Component.printf(MESSAGE.WARNING, \"No elements of class \\\"%s\\\" found\\n\", sClass);\r\n        }\r\n        return ae;\r\n    }\r\n\r\n    /**\r\n     * Component.getScriptCommands(sScript)\r\n     *\r\n     * This is a simple parser that breaks sScript into an array of commands, where each command\r\n     * is an array of tokens, where tokens are sequences of characters separated by any of: tab, space,\r\n     * carriage-return (CR), line-feed (LF), semicolon, single-quote, or double-quote; if a quote is\r\n     * used, all characters up to the next matching quote become part of the token, allowing any of the\r\n     * other separators to be part of the token.  CR, LF and semicolon also serve to terminate a command,\r\n     * with semicolon being preferred, because it's 1) more visible, and 2) essential when the entire\r\n     * script is a multi-line string where all CR/LF were replaced by spaces (which is what Jekyll does,\r\n     * and since we can't change Jekyll, it's what our own MarkDown Front Matter parser does as well;\r\n     * see convertMD() in markout.js, where the aCommandDefs array is built).\r\n     *\r\n     * Backslash sequences like \\n, \\r, and \\\\ have already been converted to LF, CR and backslash\r\n     * characters, since the entire script string is injected into a JavaScript function call, so any\r\n     * backslash sequence that JavaScript supports is automatically converted:\r\n     *\r\n     *      \\0  \\'  \\\"  \\\\  \\n  \\r  \\v  \\t  \\b  \\f  \\uXXXX \\xXX\r\n     *                      ^J  ^M  ^K  ^I  ^H  ^L\r\n     *\r\n     * To support any other non-printable 8-bit character, such as ESC, you should use \\xXX, where XX\r\n     * is the ASCII code in hex.  For ESC, that would be \\x1B.\r\n     *\r\n     * @param {string} sScript\r\n     * @returns {Array}\r\n     */\r\n    static getScriptCommands(sScript)\r\n    {\r\n        let cch = sScript.length;\r\n        let commands = [], aTokens = [], sToken = \"\", chQuote = null;\r\n        for (let i = 0; i < cch; i++) {\r\n            let ch = sScript[i];\r\n            if (ch == '\"' || ch == \"'\") {\r\n                if (chQuote && ch != chQuote) {\r\n                    sToken += ch;\r\n                    continue;\r\n                }\r\n                if (!chQuote) {\r\n                    chQuote = ch;\r\n                } else {\r\n                    chQuote = null;\r\n                }\r\n                if (sToken) {\r\n                    aTokens.push(sToken);\r\n                    sToken = \"\";\r\n                }\r\n                continue;\r\n            }\r\n            if (!chQuote) {\r\n                if (ch == '\\r' || ch == '\\n') {\r\n                    ch = ';';\r\n                }\r\n                if (ch == ' ' || ch == '\\t' || ch == ';') {\r\n                    if (sToken) {\r\n                        aTokens.push(sToken);\r\n                        sToken = \"\";\r\n                    }\r\n                    if (ch == ';' && aTokens.length) {\r\n                        commands.push(aTokens);\r\n                        aTokens = [];\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n            sToken += ch;\r\n        }\r\n        if (sToken) {\r\n            aTokens.push(sToken);\r\n        }\r\n        if (aTokens.length) {\r\n            commands.push(aTokens);\r\n        }\r\n        return commands;\r\n    }\r\n\r\n    /**\r\n     * Component.processScript(idMachine, sScript)\r\n     *\r\n     * @param {string} idMachine\r\n     * @param {string} [sScript]\r\n     * @returns {boolean}\r\n     */\r\n    static processScript(idMachine, sScript)\r\n    {\r\n        let fSuccess = false;\r\n        let commands = globals.pcjs['commands'];\r\n        idMachine += \".machine\";\r\n        if (!sScript) {\r\n            delete commands[idMachine];\r\n            fSuccess = true;\r\n        }\r\n        else if (typeof sScript == \"string\" && !commands[idMachine]) {\r\n            fSuccess = true;\r\n            commands[idMachine] = Component.getScriptCommands(sScript);\r\n            if (!Component.processCommands(idMachine)) {\r\n                fSuccess = false;\r\n            }\r\n        }\r\n        return fSuccess;\r\n    }\r\n\r\n    /**\r\n     * Component.processCommands(idMachine)\r\n     *\r\n     * @param {string} idMachine\r\n     * @returns {boolean}\r\n     */\r\n    static processCommands(idMachine)\r\n    {\r\n        let fSuccess = true;\r\n        let commands = globals.pcjs['commands'][idMachine];\r\n\r\n     // let dbg = Component.getComponentByType(\"Debugger\", idMachine);\r\n\r\n        while (commands && commands.length) {\r\n\r\n            let aTokens = commands.splice(0, 1)[0];\r\n            let sCommand = aTokens[0];\r\n\r\n            /*\r\n             * It's possible to route this output to the Debugger window with dbg.printf()\r\n             * instead, but it's a bit too confusing mingling script output in a window that\r\n             * already mingles Debugger and machine output.\r\n             */\r\n            Component.printf(MESSAGE.SCRIPT, aTokens.join(' '));\r\n\r\n            let fnCallReady = null;\r\n            if (Component.asyncCommands.indexOf(sCommand) >= 0) {\r\n                fnCallReady = function processNextCommand() {\r\n                    return function() {\r\n                        Component.processCommands(idMachine);\r\n                    };\r\n                }();\r\n            }\r\n\r\n            let fnCommand = Component.globalCommands[sCommand];\r\n            if (fnCommand) {\r\n                if (!fnCallReady) {\r\n                    fSuccess = fnCommand(aTokens[1], aTokens[2], aTokens[3]);\r\n                } else {\r\n                    if (!fnCommand(fnCallReady, aTokens[1], aTokens[2], aTokens[3])) break;\r\n                }\r\n            }\r\n            else {\r\n                fSuccess = false;\r\n                let component = Component.getComponentByType(aTokens[1], idMachine);\r\n                if (component) {\r\n                    fnCommand = Component.componentCommands[sCommand];\r\n                    if (fnCommand) {\r\n                        fSuccess = fnCommand(component, aTokens[2], aTokens[3]);\r\n                    }\r\n                    else {\r\n                        let exports = component['exports'];\r\n                        if (exports) {\r\n                            fnCommand = exports[sCommand];\r\n                            if (fnCommand) {\r\n                                fSuccess = true;\r\n                                if (!fnCallReady) {\r\n                                    fSuccess = fnCommand.call(component, aTokens[2], aTokens[3]);\r\n                                } else {\r\n                                    if (!fnCommand.call(component, fnCallReady, aTokens[2], aTokens[3])) break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!fSuccess) {\r\n                Component.alertUser(\"Script error: '\" + sCommand + \"' command \" + (fnCommand? \" failed\" : \" not recognized\"));\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (commands && !commands.length) {\r\n            delete globals.pcjs['commands'][idMachine];\r\n        }\r\n\r\n        return fSuccess;\r\n    }\r\n\r\n    /**\r\n     * Component.scriptAlert(sMessage)\r\n     *\r\n     * @param {string} sMessage\r\n     * @returns {boolean}\r\n     */\r\n    static scriptAlert(sMessage)\r\n    {\r\n        Component.alertUser(sMessage);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Component.scriptSelect(component, sBinding, sValue)\r\n     *\r\n     * @param {Component} component\r\n     * @param {string} sBinding\r\n     * @param {string} sValue\r\n     * @returns {boolean}\r\n     */\r\n    static scriptSelect(component, sBinding, sValue)\r\n    {\r\n        let fSuccess = false;\r\n        let aBindings = component['bindings'];\r\n        let control = aBindings[sBinding];\r\n        if (control) {\r\n            for (let i = 0; i < control.options.length; i++) {\r\n                if (control.options[i].textContent == sValue) {\r\n                    if (control.selectedIndex != i) {\r\n                        control.selectedIndex = i;\r\n                    }\r\n                    fSuccess = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return fSuccess;\r\n    }\r\n\r\n    /**\r\n     * Component.scriptSleep(fnCallback, sDelay)\r\n     *\r\n     * @param {function()} fnCallback\r\n     * @param {string} sDelay (in milliseconds)\r\n     * @returns {boolean}\r\n     */\r\n    static scriptSleep(fnCallback, sDelay)\r\n    {\r\n        setTimeout(fnCallback, +sDelay);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * toString()\r\n     *\r\n     * @this {Component}\r\n     * @returns {string}\r\n     */\r\n    toString()\r\n    {\r\n        return (this.name? this.name : (this.id || this.type));\r\n    }\r\n\r\n    /**\r\n     * getMachineNum()\r\n     *\r\n     * @this {Component}\r\n     * @returns {number} unique machine number\r\n     */\r\n    getMachineNum()\r\n    {\r\n        let nMachine = 1;\r\n        if (this.idMachine) {\r\n            let aDigits = this.idMachine.match(/\\d+/);\r\n            if (aDigits !== null) {\r\n                nMachine = parseInt(aDigits[0], 10);\r\n            }\r\n        }\r\n        return nMachine;\r\n    }\r\n\r\n    /**\r\n     * setBinding(sHTMLType, sBinding, control, sValue)\r\n     *\r\n     * Component's setBinding() method is intended to be overridden by subclasses.\r\n     *\r\n     * @this {Component}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\", \"canvas\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, 'print')\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        switch (sBinding) {\r\n\r\n        case 'clear':\r\n            if (!this.bindings[sBinding]) {\r\n                this.bindings[sBinding] = control;\r\n                control.onclick = (function(component) {\r\n                    return function clearControl() {\r\n                        if (component.bindings['print']) {\r\n                            component.bindings['print'].value = \"\";\r\n                        }\r\n                    };\r\n                }(this));\r\n            }\r\n            return true;\r\n\r\n        case 'print':\r\n            if (!this.bindings[sBinding]) {\r\n                let controlTextArea = /** @type {HTMLTextAreaElement} */(control);\r\n                this.bindings[sBinding] = controlTextArea;\r\n                /*\r\n                 * This was added for Firefox (Safari will clear the <textarea> on a page reload, but Firefox does not).\r\n                 */\r\n                controlTextArea.value = \"\";\r\n                this.print = function(component, control) {\r\n                    return function printControl(sMessage, bitsMessage = 0) {\r\n                        if (!sMessage) sMessage = \"\";\r\n                        if (bitsMessage == MESSAGE.PROGRESS && sMessage.slice(-4) == \"...\\n\") {\r\n                            Component.replaceControl(control, sMessage.slice(0, -1), sMessage.slice(0, -1) + \".\");\r\n                        } else {\r\n                            Component.appendControl(control, sMessage);\r\n                        }\r\n                        if (!COMPILED) Component.printf(sMessage);\r\n                    };\r\n                }(this, controlTextArea);\r\n            }\r\n            return true;\r\n\r\n        default:\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * assert(f, s)\r\n     *\r\n     * Verifies conditions that must be true (for DEBUG builds only).\r\n     *\r\n     * WARNING: Make sure you preface all calls to this.assert() with \"if (DEBUG)\", because unlike Component.assert(),\r\n     * the Closure Compiler can't be sure that this instance method hasn't been overridden, so it refuses to treat it as\r\n     * dead code in non-DEBUG builds.\r\n     *\r\n     * TODO: Add a task to the build process that \"asserts\" there are no instances of \"assertion failure\" in RELEASE builds.\r\n     *\r\n     * @this {Component}\r\n     * @param {boolean|number|undefined} f is the expression asserted to be true\r\n     * @param {string} [s] is a description of the assertion to be displayed or logged on failure\r\n     */\r\n    assert(f, s)\r\n    {\r\n        if (DEBUG) {\r\n            if (!f) {\r\n                s = \"assertion failure in \" + (this.id || this.type) + (s? \": \" + s : \"\");\r\n                if (DEBUGGER && this.dbg) {\r\n                    this.dbg.stopCPU();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * print(s, bitsMessage)\r\n     *\r\n     * Components using print() should wait until after their constructor has run to display any messages;\r\n     * if a Control Panel has been loaded, its override will not take effect until its own constructor has run.\r\n     *\r\n     * @this {Component}\r\n     * @param {string} s\r\n     * @param {number} [bitsMessage] (optional; this method doesn't use it, but some overrides do)\r\n     */\r\n    print(s, bitsMessage = 0)\r\n    {\r\n        Component.printf(bitsMessage, s);\r\n    }\r\n\r\n    /**\r\n     * setError(s)\r\n     *\r\n     * Set a fatal error condition\r\n     *\r\n     * TODO: Any cases where we should still prefix the string with \"Fatal error: \"?\r\n     *\r\n     * @this {Component}\r\n     * @param {string} s describes a fatal error condition\r\n     */\r\n    setError(s)\r\n    {\r\n        this.flags.error = true;\r\n        this.printf(MESSAGE.NOTICE, \"%s\\n\", s);\r\n    }\r\n\r\n    /**\r\n     * clearError()\r\n     *\r\n     * Clear any fatal error condition\r\n     *\r\n     * @this {Component}\r\n     */\r\n    clearError() {\r\n        this.flags.error = false;\r\n    }\r\n\r\n    /**\r\n     * isError()\r\n     *\r\n     * Report any fatal error condition\r\n     *\r\n     * @this {Component}\r\n     * @returns {boolean} true if a fatal error condition exists, false if not\r\n     */\r\n    isError()\r\n    {\r\n        if (this.flags.error) {\r\n            this.print(this.toString() + \" error\\n\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * isReady(fnReady)\r\n     *\r\n     * Return the \"ready\" state of the component; if the component is not ready, it will queue the optional\r\n     * notification function, otherwise it will immediately call the notification function, if any, without queuing it.\r\n     *\r\n     * NOTE: Since only the Computer component actually cares about the \"readiness\" of other components, the so-called\r\n     * \"queue\" of notification functions supports exactly one function.  This keeps things nice and simple.\r\n     *\r\n     * @this {Component}\r\n     * @param {function()} [fnReady]\r\n     * @returns {boolean} true if the component is in a \"ready\" state, false if not\r\n     */\r\n    isReady(fnReady)\r\n    {\r\n        if (fnReady) {\r\n            if (this.flags.ready) {\r\n                fnReady();\r\n            } else {\r\n                if (MAXDEBUG) this.printf(MESSAGE.LOG, \"NOT ready\\n\");\r\n                this.fnReady = fnReady;\r\n            }\r\n        }\r\n        return this.flags.ready;\r\n    }\r\n\r\n    /**\r\n     * setReady(fReady)\r\n     *\r\n     * Set the \"ready\" state of the component to true, and call any queued notification functions.\r\n     *\r\n     * @this {Component}\r\n     * @param {boolean} [fReady] is assumed to indicate \"ready\" unless EXPLICITLY set to false\r\n     */\r\n    setReady(fReady)\r\n    {\r\n        if (!this.flags.error) {\r\n            this.flags.ready = (fReady !== false);\r\n            if (this.flags.ready) {\r\n                if (MAXDEBUG /* || this.name */) this.printf(MESSAGE.LOG, \"ready\\n\");\r\n                let fnReady = this.fnReady;\r\n                this.fnReady = null;\r\n                if (fnReady) fnReady();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * isBusy(fCancel)\r\n     *\r\n     * Return the \"busy\" state of the component\r\n     *\r\n     * @this {Component}\r\n     * @param {boolean} [fCancel] is set to true to cancel a \"busy\" state\r\n     * @returns {boolean} true if \"busy\", false if not\r\n     */\r\n    isBusy(fCancel)\r\n    {\r\n        if (this.flags.busy) {\r\n            if (fCancel) {\r\n                this.flags.busyCancel = true;\r\n            } else if (fCancel === undefined) {\r\n                this.print(this.toString() + \" busy\\n\");\r\n            }\r\n        }\r\n        return this.flags.busy;\r\n    }\r\n\r\n    /**\r\n     * setBusy(fBusy)\r\n     *\r\n     * Update the current busy state; if a busyCancel request is pending, it will be honored now.\r\n     *\r\n     * @this {Component}\r\n     * @param {boolean} fBusy\r\n     * @returns {boolean}\r\n     */\r\n    setBusy(fBusy)\r\n    {\r\n        if (this.flags.busyCancel) {\r\n            this.flags.busy = false;\r\n            this.flags.busyCancel = false;\r\n            return false;\r\n        }\r\n        if (this.flags.error) {\r\n            this.print(this.toString() + \" error\\n\");\r\n            return false;\r\n        }\r\n        this.flags.busy = fBusy;\r\n        return this.flags.busy;\r\n    }\r\n\r\n    /**\r\n     * powerUp(fSave)\r\n     *\r\n     * @this {Component}\r\n     * @param {Object|null} data\r\n     * @param {boolean} [fRepower] is true if this is \"repower\" notification\r\n     * @returns {boolean} true if successful, false if failure\r\n     */\r\n    powerUp(data, fRepower)\r\n    {\r\n        this.flags.powered = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * powerDown(fSave, fShutdown)\r\n     *\r\n     * @this {Component}\r\n     * @param {boolean} fSave\r\n     * @param {boolean} [fShutdown]\r\n     * @returns {Object|boolean} component state if fSave; otherwise, true if successful, false if failure\r\n     */\r\n    powerDown(fSave, fShutdown)\r\n    {\r\n        if (fShutdown) this.flags.powered = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * clearBits(num, bits)\r\n     *\r\n     * Helper function for clearing bits in numbers with more than 32 bits.\r\n     *\r\n     * @param {number} num\r\n     * @param {number} bits\r\n     * @returns {number}\r\n     */\r\n    static clearBits(num, bits)\r\n    {\r\n        let shift = Math.pow(2, 32);\r\n        let numHi = (num / shift)|0;\r\n        let bitsHi = (bits / shift)|0;\r\n        return (num & ~bits) + (numHi & ~bitsHi) * shift;\r\n    }\r\n\r\n    /**\r\n     * maskBits(num, bits)\r\n     *\r\n     * Helper function for returning bits in numbers with more than 32 bits.\r\n     *\r\n     * @param {number} num\r\n     * @param {number} bits\r\n     * @returns {number}\r\n     */\r\n    static maskBits(num, bits)\r\n    {\r\n        let shift = Math.pow(2, 32);\r\n        let numHi = (num / shift)|0;\r\n        let bitsHi = (bits / shift)|0;\r\n        return (num & bits) + (numHi & bitsHi) * shift;\r\n    }\r\n\r\n    /**\r\n     * setBits(num, bits)\r\n     *\r\n     * Helper function for setting bits in numbers with more than 32 bits.\r\n     *\r\n     * @param {number} num\r\n     * @param {number} bits\r\n     * @returns {number}\r\n     */\r\n    static setBits(num, bits)\r\n    {\r\n        let shift = Math.pow(2, 32);\r\n        let numHi = (num / shift)|0;\r\n        let bitsHi = (bits / shift)|0;\r\n        return (num | bits) + (numHi | bitsHi) * shift;\r\n    }\r\n\r\n    /**\r\n     * testBits(num, bits)\r\n     *\r\n     * Helper function for testing bits in numbers with more than 32 bits.\r\n     *\r\n     * @param {number} num\r\n     * @param {number} bits\r\n     * @returns {boolean} (true if ALL specified bits are set, false if not)\r\n     */\r\n    static testBits(num, bits)\r\n    {\r\n        let shift = Math.pow(2, 32);\r\n        let numHi = (num / shift)|0;\r\n        let bitsHi = (bits / shift)|0;\r\n        return ((num & bits) == (bits|0) && (numHi & bitsHi) == bitsHi);\r\n    }\r\n\r\n    /**\r\n     * messageEnabled(bitsMessage)\r\n     *\r\n     * If bitsMessage is MESSAGE.NONE (0), then the component's Messages category is used.\r\n     *\r\n     * @this {Component}\r\n     * @param {number} [bitsMessage] is zero or more Message flags\r\n     * @returns {boolean} true if the specified message(s) are enabled, false if not\r\n     */\r\n    messageEnabled(bitsMessage = 0)\r\n    {\r\n        /*\r\n         * It's important to subtract MESSAGE.ADDR from bitsMessage before testing for MESSAGE.NONE, because\r\n         * if MESSAGE.ADDR was the ONLY bit specified, we still want to default to the component's message category.\r\n         */\r\n        if (bitsMessage & MESSAGE.ADDR) bitsMessage -= MESSAGE.ADDR;\r\n        bitsMessage = bitsMessage || this.bitsMessage;\r\n        /*\r\n         * printf() calls that specify MESSAGE.DEBUG should be stripped out of non-DEBUG builds, but just in case\r\n         * any of those calls slipped through the cracks, we ensure that DEBUG messages are only printed in DEBUG builds.\r\n         */\r\n        if (DEBUG || !Component.testBits(bitsMessage, MESSAGE.DEBUG)) {\r\n            /*\r\n             * The debugger has the ability to filter any messages listed in MESSAGE.NAMES, and that currently\r\n             * includes message types LOG and WARNING, so if the debugger is loaded, subtract those from the types we allow\r\n             * by default.\r\n             */\r\n            let allowedMessages = MESSAGE.TYPES - (this.dbg? MESSAGE.LOG + MESSAGE.WARNING : 0);\r\n            if (Component.testBits(allowedMessages, bitsMessage) || this.dbg && Component.testBits(this.dbg.bitsMessage, bitsMessage)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * printf(format, ...args)\r\n     *\r\n     * If format is a number, it's used as a message number, and the format string is the first arg; the call\r\n     * will be suppressed unless the corresponding message category has been enabled by the debugger.\r\n     *\r\n     * Most components provide a default message number to their constructor, so any printf() without an explicit\r\n     * message number will use that default.  If the caller wants a particular call to ALWAYS print, regardless\r\n     * of whether the debugger has enabled it, the caller can use printf(MESSAGE.NONE), and if the caller wants\r\n     * EVERY call to print, then simply omit any message number from their constructor AND all printf() calls.\r\n     *\r\n     * @this {Component}\r\n     * @param {string|number} format\r\n     * @param {...} args\r\n     */\r\n    printf(format, ...args)\r\n    {\r\n        let bitsMessage = 0;\r\n        if (typeof format == \"number\") {\r\n            bitsMessage = format || MESSAGE.PROGRESS;\r\n            format = args.shift();\r\n            if (Component.testBits(bitsMessage, MESSAGE.LOG)) {\r\n                format = (this.id || this.type || \"log\") + \": \" + format;\r\n            }\r\n            else if (Component.testBits(bitsMessage, MESSAGE.STATUS)) {\r\n                format = this.type + \": \" + format;\r\n            }\r\n        }\r\n        if (this.messageEnabled(bitsMessage)) {\r\n            let sMessage = StrLib.sprintf(format, ...args);\r\n            if (this.dbg && this.dbg.message) {\r\n                this.dbg.message(sMessage, bitsMessage);\r\n            } else {\r\n                this.print(sMessage, bitsMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * printIO(port, bOut, addrFrom, name, bIn, bitsMessage)\r\n     *\r\n     * If bitsMessage is not specified, the component's Messages category is used,\r\n     * and if bitsMessage is true, the message is displayed if MESSAGE.PORT is enabled also.\r\n     *\r\n     * @this {Component}\r\n     * @param {number} port\r\n     * @param {number} [bOut] if an output operation\r\n     * @param {number} [addrFrom]\r\n     * @param {string} [name] of the port, if any\r\n     * @param {number} [bIn] is the input value, if known, on an input operation\r\n     * @param {number|boolean} [bitsMessage] is zero or more Messages flag(s)\r\n     */\r\n    printIO(port, bOut, addrFrom, name, bIn, bitsMessage = this.bitsMessage)\r\n    {\r\n        if (DEBUGGER && this.dbg) {\r\n            if (bitsMessage === true) {\r\n                bitsMessage = 0;\r\n            }\r\n            this.dbg.messageIO(this, port, bOut, addrFrom, name, bIn, bitsMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * The following polyfills provide ES5 functionality that's missing in older browsers (eg, IE8),\r\n * allowing PCjs apps to run without slamming into exceptions; however, due to the lack of HTML5 canvas\r\n * support in those browsers, all you're likely to see are \"soft\" errors (eg, \"Missing <canvas> support\").\r\n *\r\n * Perhaps we can implement a text-only faux video display for a fun retro-browser experience someday.\r\n *\r\n * TODO: Come up with a better place to put these polyfills.  We will likely have more if we decide to\r\n * make the leap from ES5 to ES6 features.\r\n */\r\n\r\n/*\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\r\n */\r\nif (!Array.prototype.indexOf) {\r\n    Array.prototype.indexOf = function(obj, start) {\r\n        for (let i = (start || 0), j = this.length; i < j; i++) {\r\n            if (this[i] === obj) { return i; }\r\n        }\r\n        return -1;\r\n    };\r\n}\r\n\r\n/*\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\r\n */\r\nif (!Array.isArray) {\r\n    Array.isArray = function(arg) {\r\n        return Object.prototype.toString.call(arg) === '[object Array]';\r\n    };\r\n}\r\n\r\n/*\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\r\n */\r\nif (!Function.prototype.bind) {\r\n    Function.prototype.bind = function(obj) {\r\n        if (typeof this != \"function\") {\r\n            // Closest thing possible to the ECMAScript 5 internal IsCallable function\r\n            throw new TypeError(\"Function.prototype.bind: non-callable object\");\r\n        }\r\n        let args = Array.prototype.slice.call(arguments, 1);\r\n        let fToBind = this;\r\n        let fnNOP = /** @constructor */ (function() {});\r\n        let fnBound = function() {\r\n            return fToBind.apply(this instanceof fnNOP && obj? this : obj, args.concat(/** @type {Array} */(Array.prototype.slice.call(arguments))));\r\n        };\r\n        fnNOP.prototype = this.prototype;\r\n        fnBound.prototype = new fnNOP();\r\n        return fnBound;\r\n    };\r\n}\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/defines.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * @define {string}\r\n */\r\nconst APPCLASS = \"c1p\";         // this @define is the default application class (eg, \"pcx86\", \"c1p\")\r\n\r\n/**\r\n * @define {string}\r\n */\r\nconst APPNAME = \"C1Pjs\";        // this @define is the default application name (eg, \"PCx86\", \"C1Pjs\")\r\n\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/panel.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PPanel\r\n * @unrestricted\r\n */\r\nclass C1PPanel extends Component {\r\n    /**\r\n     * C1PPanel(parmsPanel)\r\n     *\r\n     * The Panel component has no required (parmsPanel) properties.\r\n     *\r\n     * @this {C1PPanel}\r\n     * @param {Object} parmsPanel\r\n     */\r\n    constructor(parmsPanel)\r\n    {\r\n        super(\"C1PPanel\", parmsPanel);\r\n\r\n        this.flags.powered = false;\r\n    }\r\n\r\n    /**\r\n     * The Panel doesn't have any bindings of its own; it passes along all binding requests to\r\n     * the Computer, CPU, Keyboard and Debugger components. The order shouldn't matter, since any\r\n     * component that doesn't recognize the specified binding should simply ignore it.\r\n     *\r\n     * @this {C1PPanel}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\", \"canvas\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"reset\")\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        if (this.cmp && this.cmp.setBinding(sHTMLType, sBinding, control, sValue)) return true;\r\n        if (this.cpu && this.cpu.setBinding(sHTMLType, sBinding, control, sValue)) return true;\r\n        if (this.kbd && this.kbd.setBinding(sHTMLType, sBinding, control, sValue)) return true;\r\n        if (DEBUGGER && this.dbg && this.dbg.setBinding(sHTMLType, sBinding, control, sValue)) return true;\r\n        return super.setBinding(sHTMLType, sBinding, control, sValue);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PPanel}\r\n     * @param {boolean} fOn\r\n     * @param {C1PComputer} cmp\r\n     */\r\n    setPower(fOn, cmp)\r\n    {\r\n        if (fOn && !this.flags.powered) {\r\n            this.flags.powered = true;\r\n            this.cmp = cmp;\r\n            this.cpu = cmp.getComponentByType(\"cpu\");\r\n            this.kbd = cmp.getComponentByType(\"keyboard\");\r\n            if (DEBUGGER) this.dbg = cmp.getComponentByType(\"debugger\");\r\n            C1PPanel.init();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * C1PPanel.init()\r\n     *\r\n     * This function operates on every HTML element of class \"panel\", extracting the\r\n     * JSON-encoded parameters for the C1PPanel constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PPanel component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     *\r\n     * NOTE: Unlike most other component init() functions, this one is designed to be\r\n     * called multiple times: once at load time, so that we can binding our print()\r\n     * function to the panel's output control ASAP, and again when the C1PComputer component\r\n     * is verifying that all components are ready and invoking their setPower() functions.\r\n     *\r\n     * Our setPower() method gives us a second opportunity to notify any components that\r\n     * that might care (eg, C1PCPU, C1PKeyboard, and C1PDebugger) that we have some controls\r\n     * they might want to use.\r\n     */\r\n    static init()\r\n    {\r\n        var fReady = false;\r\n        var aePanels = Component.getElementsByClass(APPCLASS, \"panel\");\r\n        for (var iPanel=0; iPanel < aePanels.length; iPanel++) {\r\n            var ePanel = aePanels[iPanel];\r\n            var parmsPanel = Component.getComponentParms(ePanel);\r\n            var panel = Component.getComponentByID(parmsPanel['id'], false);\r\n            if (!panel) {\r\n                fReady = true;\r\n                panel = new C1PPanel(parmsPanel);\r\n            }\r\n            Component.bindComponentControls(panel, ePanel, APPCLASS);\r\n            if (fReady) panel.setReady();\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialize every Panel module on the page.\r\n */\r\nWebLib.onInit(C1PPanel.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/cpu.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PCPU\r\n * @unrestricted\r\n */\r\nclass C1PCPU extends Component {\r\n    /**\r\n     * C1PCPU(parmsCPU)\r\n     *\r\n     * The C1PCPU object has one component-specific initialization property:\r\n     *\r\n     *      autoStart: true to automatically start, false to not, or null (default)\r\n     *      to make the autoStart decision based on whether or not a Debugger is\r\n     *      installed (if there's no Debugger AND no \"Run\" button, then auto-start,\r\n     *      otherwise don't)\r\n     *\r\n     * It is hard-coded to simulate a 6502 microprocessor, but it also contains\r\n     * hooks into other components for communication with the outside world (eg,\r\n     * Panel and Debugger components). This is a logical simulation, not a physical\r\n     * simulation, and performance is important, so we take lots of liberties; any\r\n     * idiosyncrasies of actual 6502 hardware may not be simulated here, unless it\r\n     * affects the accuracy of the simulation when running actual 6502 software.\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {Object} parmsCPU\r\n     */\r\n    constructor(parmsCPU)\r\n    {\r\n        super(\"C1PCPU\", parmsCPU);\r\n\r\n        this.clearRegs();\r\n        this.flags.powered = false;\r\n        this.flags.running = false;\r\n        var s = WebLib.getURLParm('autoStart');\r\n        if (s == \"true\" || s == \"false\") {\r\n            this.fAutoStart = JSON.parse(s);\r\n        } else {\r\n            this.fAutoStart = parmsCPU['autoStart'];\r\n        }\r\n\r\n        /*\r\n         * speed is a number from 0 to 2, where 0 means run as close to 1Mhz as possible,\r\n         * 1 means run at the fastest safe speed, and 2 means run at maximum speed.\r\n         *\r\n         * It's updated via the setSpeed() function, which the Debugger's \"option\" command\r\n         * uses to adjust the virtual speed (eg, \"o slow\", \"o fast\").  There may also\r\n         * be a button present to control the speed as well (using the \"setSpeed\" binding).\r\n         */\r\n        this.SPEED_SLOW = 0;        // see this.mhzSlow\r\n        this.SPEED_FAST = 1;        // see this.mhzFast\r\n        this.SPEED_MAX  = 2;\r\n        this.speed = this.SPEED_SLOW;\r\n        this.nCyclesPerSecond = 1000000;\r\n\r\n        /*\r\n         * Additional values that control the overall speed of the simulated hardware,\r\n         * and the frequency at which various updates should occur.  There are no UI\r\n         * mechanisms for tweaking these values (yet).\r\n         *\r\n         * NOTE: Use of the term \"second\" below refers to a virtual CPU second, consisting of\r\n         * 1 million simulated cycles.  The values below are used to divide those 1 million\r\n         * cycles into intervals of \"work\", and as long we are limiting the simulation to 1Mhz\r\n         * per ACTUAL second, then 1 virtual second == 1 real second.\r\n         *\r\n         * However, if the setSpeed() function is used to lift the 1Mhz limit, then 1 virtual\r\n         * second may become much shorter, which is why you may briefly notice the video and/or\r\n         * status (control panel) updates occurring more frequently. To compensate, calcCycles()\r\n         * will automatically scale these values if a recent speed recalculation reveals that\r\n         * we're running significantly faster than 1Mhz.\r\n         */\r\n        this.nYieldsPerSecond = 30;\r\n        this.nVideoUpdatesPerSecond = 30;\r\n        this.nStatusUpdatesPerSecond = 5;\r\n        this.mhzSlow = 1;\r\n        this.mhzFast = 8;\r\n        this.aSpeeds = [\"Slow\", \"Fast\", \"Max\"];\r\n        this.aSpeedDescs = [\"(\" + this.mhzSlow + \"Mhz)\", \"(up to \" + this.mhzFast + \"Mhz)\", \"(unlimited)\"];\r\n\r\n        /*\r\n         * Lists of notification handlers: aReadNotify and aWriteNotify are lists (ie, Arrays)\r\n         * of 4-element sub-arrays that, in turn, contain:\r\n         *\r\n         *      [0]: starting address of memory range to monitor\r\n         *      [1]: ending address of memory range to monitor (inclusive)\r\n         *      [2]: registered component\r\n         *      [3]: registered function to call for every read/write from/to memory in that range\r\n         *\r\n         * The virtual Serial Port and virtual Keyboard components use these handlers to trap\r\n         * references to their respective memory-based \"ports\".  Also, the ROM component uses it\r\n         * to \"repair\" any writes to its address range, since memory is one big array, and arrays\r\n         * don't support \"write-only\" regions.\r\n         *\r\n         * NOTE: the Video component does NOT use notification handlers, because video memory\r\n         * is written (and occasionally read) far too frequently for that to be efficient.  We\r\n         * just let the CPU pound on it like any other chunk of memory, and then make periodic\r\n         * calls directly to the Video component to refresh all portions of the video buffer\r\n         * that have changed since the last refresh. See displayVideo() for more details.\r\n         *\r\n         * WARNING: Write notifications currently do not catch STACK writes (ie, BRK, JSR, PHA and\r\n         * PHP instructions), because I simply haven't added the necessary code.  Besides, JSR is\r\n         * one of the most-executed instructions, so I'd rather not slow it down. Note that this\r\n         * STACK write limitation affects both the CPU's write-notification handlers AND the Debugger's\r\n         * write breakpoints.\r\n         */\r\n        this.aReadNotify = [];\r\n        this.aWriteNotify = [];\r\n\r\n        /*\r\n         * To speed up the processing of read and write notification handlers, we keep track of\r\n         * lower and upper address bounds for each set.  These variables maintain those bounds.\r\n         * They are initialized to values outside the accessible range of addresses.\r\n         */\r\n        this.addrReadLower = 0x10000;\r\n        this.addrReadUpper = 0x0;\r\n        this.addrWriteLower = 0x10000;\r\n        this.addrWriteUpper = 0x0;\r\n\r\n        /*\r\n         * Processor status register (P) flag masks\r\n         */\r\n        this.BIT_PN = 0x80;     // N = sign\r\n        this.BIT_PV = 0x40;     // V = overflow\r\n        this.BIT_PB = 0x10;     // B = break\r\n        this.BIT_PD = 0x08;     // D = decimal\r\n        this.BIT_PI = 0x04;     // I = interrupt\r\n        this.BIT_PZ = 0x02;     // Z = zero\r\n        this.BIT_PC = 0x01;     // C = carry\r\n\r\n     // this.VECTOR_NMI     = 0xfffa;\r\n        this.VECTOR_RESET   = 0xfffc;\r\n     // this.VECTOR_IRQ     = 0xfffe;\r\n\r\n        /*\r\n         * Popular opcodes\r\n         */\r\n        this.OP_JSR         = 0x20;\r\n\r\n        /*\r\n         * opSim operation codes\r\n         */\r\n        this.OP_SIM         = 0x02;\r\n        this.SIMOP_HLT      = 0x00;\r\n        this.SIMOP_MSG      = 0x01;\r\n\r\n        /*\r\n         * This 256-entry array of opcode functions is at the heart of the CPU engine: step(n).\r\n         *\r\n         * It might be worth trying a switch() statement instead, to see how the performance compares,\r\n         * but I suspect that will vary quite a bit across JavaScript engines; for now, I'm putting my\r\n         * money on array lookup.\r\n         */\r\n        this.aOpcodeFuncs = [\r\n            this.opBRK,         // 0x00\r\n            this.opORAindx,     // 0x01\r\n            this.opSim,         // 0x02\r\n            this.opUndefined,   // 0x03\r\n            this.opUndefined,   // 0x04\r\n            this.opORAzp,       // 0x05\r\n            this.opASLzp,       // 0x06\r\n            this.opUndefined,   // 0x07\r\n            this.opPHP,         // 0x08\r\n            this.opORAimm,      // 0x09\r\n            this.opASLacc,      // 0x0a\r\n            this.opUndefined,   // 0x0b\r\n            this.opUndefined,   // 0x0c\r\n            this.opORAabs,      // 0x0d\r\n            this.opASLabs,      // 0x0e\r\n            this.opUndefined,   // 0x0f\r\n            this.opBPL,         // 0x10\r\n            this.opORAindy,     // 0x11\r\n            this.opUndefined,   // 0x12\r\n            this.opUndefined,   // 0x13\r\n            this.opUndefined,   // 0x14\r\n            this.opORAzpx,      // 0x15\r\n            this.opASLzpx,      // 0x16\r\n            this.opUndefined,   // 0x17\r\n            this.opCLC,         // 0x18\r\n            this.opORAabsy,     // 0x19\r\n            this.opUndefined,   // 0x1a\r\n            this.opUndefined,   // 0x1b\r\n            this.opUndefined,   // 0x1c\r\n            this.opORAabsx,     // 0x1d\r\n            this.opASLabsx,     // 0x1e\r\n            this.opUndefined,   // 0x1f\r\n            this.opJSRabs,      // 0x20\r\n            this.opANDindx,     // 0x21\r\n            this.opUndefined,   // 0x22\r\n            this.opUndefined,   // 0x23\r\n            this.opBITzp,       // 0x24\r\n            this.opANDzp,       // 0x25\r\n            this.opROLzp,       // 0x26\r\n            this.opUndefined,   // 0x27\r\n            this.opPLP,         // 0x28\r\n            this.opANDimm,      // 0x29\r\n            this.opROLacc,      // 0x2a\r\n            this.opUndefined,   // 0x2b\r\n            this.opBITabs,      // 0x2c\r\n            this.opANDabs,      // 0x2d\r\n            this.opROLabs,      // 0x2e\r\n            this.opUndefined,   // 0x2f\r\n            this.opBMI,         // 0x30\r\n            this.opANDindy,     // 0x31\r\n            this.opUndefined,   // 0x32\r\n            this.opUndefined,   // 0x33\r\n            this.opUndefined,   // 0x34\r\n            this.opANDzpx,      // 0x35\r\n            this.opROLzpx,      // 0x36\r\n            this.opUndefined,   // 0x37\r\n            this.opSEC,         // 0x38\r\n            this.opANDabsy,     // 0x39\r\n            this.opUndefined,   // 0x3a\r\n            this.opUndefined,   // 0x3b\r\n            this.opUndefined,   // 0x3c\r\n            this.opANDabsx,     // 0x3d\r\n            this.opROLabsx,     // 0x3e\r\n            this.opUndefined,   // 0x3f\r\n            this.opRTI,         // 0x40\r\n            this.opEORindx,     // 0x41\r\n            this.opUndefined,   // 0x42\r\n            this.opUndefined,   // 0x43\r\n            this.opUndefined,   // 0x44\r\n            this.opEORzp,       // 0x45\r\n            this.opLSRzp,       // 0x46\r\n            this.opUndefined,   // 0x47\r\n            this.opPHA,         // 0x48\r\n            this.opEORimm,      // 0x49\r\n            this.opLSRacc,      // 0x4a\r\n            this.opUndefined,   // 0x4b\r\n            this.opJMPimm16,    // 0x4c\r\n            this.opEORabs,      // 0x4d\r\n            this.opLSRabs,      // 0x4e\r\n            this.opUndefined,   // 0x4f\r\n            this.opBVC,         // 0x50\r\n            this.opEORindy,     // 0x51\r\n            this.opUndefined,   // 0x52\r\n            this.opUndefined,   // 0x53\r\n            this.opUndefined,   // 0x54\r\n            this.opEORzpx,      // 0x55\r\n            this.opLSRzpx,      // 0x56\r\n            this.opUndefined,   // 0x57\r\n            this.opCLI,         // 0x58\r\n            this.opEORabsy,     // 0x59\r\n            this.opUndefined,   // 0x5a\r\n            this.opUndefined,   // 0x5b\r\n            this.opUndefined,   // 0x5c\r\n            this.opEORabsx,     // 0x5d\r\n            this.opLSRabsx,     // 0x5e\r\n            this.opUndefined,   // 0x5f\r\n            this.opRTS,         // 0x60\r\n            this.opADCindx,     // 0x61\r\n            this.opUndefined,   // 0x62\r\n            this.opUndefined,   // 0x63\r\n            this.opUndefined,   // 0x64\r\n            this.opADCzp,       // 0x65\r\n            this.opRORzp,       // 0x66\r\n            this.opUndefined,   // 0x67\r\n            this.opPLA,         // 0x68\r\n            this.opADCimm,      // 0x69\r\n            this.opRORacc,      // 0x6a\r\n            this.opUndefined,   // 0x6b\r\n            this.opJMPabs16,    // 0x6c\r\n            this.opADCabs,      // 0x6d\r\n            this.opRORabs,      // 0x6e\r\n            this.opUndefined,   // 0x6f\r\n            this.opBVS,         // 0x70\r\n            this.opADCindy,     // 0x71\r\n            this.opUndefined,   // 0x72\r\n            this.opUndefined,   // 0x73\r\n            this.opUndefined,   // 0x74\r\n            this.opADCzpx,      // 0x75\r\n            this.opRORzpx,      // 0x76\r\n            this.opUndefined,   // 0x77\r\n            this.opSEI,         // 0x78\r\n            this.opADCabsy,     // 0x79\r\n            this.opUndefined,   // 0x7a\r\n            this.opUndefined,   // 0x7b\r\n            this.opUndefined,   // 0x7c\r\n            this.opADCabsx,     // 0x7d\r\n            this.opRORabsx,     // 0x7e\r\n            this.opUndefined,   // 0x7f\r\n            this.opUndefined,   // 0x80\r\n            this.opSTAindx,     // 0x81\r\n            this.opUndefined,   // 0x82\r\n            this.opUndefined,   // 0x83\r\n            this.opSTYzp,       // 0x84\r\n            this.opSTAzp,       // 0x85\r\n            this.opSTXzp,       // 0x86\r\n            this.opUndefined,   // 0x87\r\n            this.opDEY,         // 0x88\r\n            this.opUndefined,   // 0x89\r\n            this.opTXA,         // 0x8a\r\n            this.opUndefined,   // 0x8b\r\n            this.opSTYabs,      // 0x8c\r\n            this.opSTAabs,      // 0x8d\r\n            this.opSTXabs,      // 0x8e\r\n            this.opUndefined,   // 0x8f\r\n            this.opBCC,         // 0x90\r\n            this.opSTAindy,     // 0x91\r\n            this.opUndefined,   // 0x92\r\n            this.opUndefined,   // 0x93\r\n            this.opSTYzpx,      // 0x94\r\n            this.opSTAzpx,      // 0x95\r\n            this.opSTXzpy,      // 0x96\r\n            this.opUndefined,   // 0x97\r\n            this.opTYA,         // 0x98\r\n            this.opSTAabsy,     // 0x99\r\n            this.opTXS,         // 0x9a\r\n            this.opUndefined,   // 0x9b\r\n            this.opUndefined,   // 0x9c\r\n            this.opSTAabsx,     // 0x9d\r\n            this.opUndefined,   // 0x9e\r\n            this.opUndefined,   // 0x9f\r\n            this.opLDYimm,      // 0xa0\r\n            this.opLDAindx,     // 0xa1\r\n            this.opLDXimm,      // 0xa2\r\n            this.opUndefined,   // 0xa3\r\n            this.opLDYzp,       // 0xa4\r\n            this.opLDAzp,       // 0xa5\r\n            this.opLDXzp,       // 0xa6\r\n            this.opUndefined,   // 0xa7\r\n            this.opTAY,         // 0xa8\r\n            this.opLDAimm,      // 0xa9\r\n            this.opTAX,         // 0xaa\r\n            this.opUndefined,   // 0xab\r\n            this.opLDYabs,      // 0xac\r\n            this.opLDAabs,      // 0xad\r\n            this.opLDXabs,      // 0xae\r\n            this.opUndefined,   // 0xaf\r\n            this.opBCS,         // 0xb0\r\n            this.opLDAindy,     // 0xb1\r\n            this.opUndefined,   // 0xb2\r\n            this.opUndefined,   // 0xb3\r\n            this.opLDYzpx,      // 0xb4\r\n            this.opLDAzpx,      // 0xb5\r\n            this.opLDXzpy,      // 0xb6\r\n            this.opUndefined,   // 0xb7\r\n            this.opCLV,         // 0xb8\r\n            this.opLDAabsy,     // 0xb9\r\n            this.opTSX,         // 0xba\r\n            this.opUndefined,   // 0xbb\r\n            this.opLDYabsx,     // 0xbc\r\n            this.opLDAabsx,     // 0xbd\r\n            this.opLDXabsy,     // 0xbe\r\n            this.opUndefined,   // 0xbf\r\n            this.opCPYimm,      // 0xc0\r\n            this.opCMPindx,     // 0xc1\r\n            this.opUndefined,   // 0xc2\r\n            this.opUndefined,   // 0xc3\r\n            this.opCPYzp,       // 0xc4\r\n            this.opCMPzp,       // 0xc5\r\n            this.opDECzp,       // 0xc6\r\n            this.opUndefined,   // 0xc7\r\n            this.opINY,         // 0xc8\r\n            this.opCMPimm,      // 0xc9\r\n            this.opDEX,         // 0xca\r\n            this.opUndefined,   // 0xcb\r\n            this.opCPYabs,      // 0xcc\r\n            this.opCMPabs,      // 0xcd\r\n            this.opDECabs,      // 0xce\r\n            this.opUndefined,   // 0xcf\r\n            this.opBNE,         // 0xd0\r\n            this.opCMPindy,     // 0xd1\r\n            this.opUndefined,   // 0xd2\r\n            this.opUndefined,   // 0xd3\r\n            this.opUndefined,   // 0xd4\r\n            this.opCMPzpx,      // 0xd5\r\n            this.opDECzpx,      // 0xd6\r\n            this.opUndefined,   // 0xd7\r\n            this.opCLD,         // 0xd8\r\n            this.opCMPabsy,     // 0xd9\r\n            this.opUndefined,   // 0xda\r\n            this.opUndefined,   // 0xdb\r\n            this.opUndefined,   // 0xdc\r\n            this.opCMPabsx,     // 0xdd\r\n            this.opDECabsx,     // 0xde\r\n            this.opUndefined,   // 0xdf\r\n            this.opCPXimm,      // 0xe0\r\n            this.opSBCindx,     // 0xe1\r\n            this.opUndefined,   // 0xe2\r\n            this.opUndefined,   // 0xe3\r\n            this.opCPXzp,       // 0xe4\r\n            this.opSBCzp,       // 0xe5\r\n            this.opINCzp,       // 0xe6\r\n            this.opUndefined,   // 0xe7\r\n            this.opINX,         // 0xe8\r\n            this.opSBCimm,      // 0xe9\r\n            this.opNOP,         // 0xea\r\n            this.opUndefined,   // 0xeb\r\n            this.opCPXabs,      // 0xec\r\n            this.opSBCabs,      // 0xed\r\n            this.opINCabs,      // 0xee\r\n            this.opUndefined,   // 0xef\r\n            this.opBEQ,         // 0xf0\r\n            this.opSBCindy,     // 0xf1\r\n            this.opUndefined,   // 0xf2\r\n            this.opUndefined,   // 0xf3\r\n            this.opUndefined,   // 0xf4\r\n            this.opSBCzpx,      // 0xf5\r\n            this.opINCzpx,      // 0xf6\r\n            this.opUndefined,   // 0xf7\r\n            this.opSED,         // 0xf8\r\n            this.opSBCabsy,     // 0xf9\r\n            this.opUndefined,   // 0xfa\r\n            this.opUndefined,   // 0xfb\r\n            this.opUndefined,   // 0xfc\r\n            this.opSBCabsx,     // 0xfd\r\n            this.opINCabsx,     // 0xfe\r\n            this.opUndefined    // 0xff\r\n        ];\r\n        /*\r\n         * This is a 256-byte array of cycle counts, indexed by opcode.\r\n         * Obviously, true cycle counts are a bit more complicated, but this\r\n         * gets us most of the way to an authentic-feeling simulation.\r\n         *\r\n         * NOTE: BCD functions now account for an extra cycle, and branches\r\n         * now account for an extra cycle whenever the branch is taken.\r\n         * However, branches still don't add an extra cycle whenever the branch\r\n         * crosses a page boundary.\r\n         *\r\n         * The other gaping hole in our cycle-counting is accounting for all\r\n         * page-boundary penalties.  Ideally, that's just a matter of checking\r\n         * MODE_ABSX, MODE_ABSY, and MODE_INDY instructions for EA straddling\r\n         * a page boundary--but is it more complicated than that? What if the\r\n         * criteria is not the final EA, but whether the pre-indexing and\r\n         * post-indexing EAs are in different pages? I also need to confirm\r\n         * whether any other situations merit checking (eg, when a 2 or 3-byte\r\n         * instruction straddles a page boundary).\r\n         */\r\n        this.aOpcodeCycles = [\r\n            7,6,0,0,0,3,5,0,3,2,2,0,0,4,6,0,\r\n            2,5,0,0,0,4,6,0,2,4,0,0,0,4,7,0,\r\n            3,6,0,0,3,3,5,0,4,2,2,0,4,4,6,0,\r\n            2,5,0,0,0,4,6,0,2,4,0,0,0,4,7,0,\r\n            6,6,0,0,0,3,5,0,3,2,2,0,3,4,6,0,\r\n            2,5,0,0,0,4,6,0,2,4,0,0,0,4,7,0,\r\n            6,6,0,0,0,3,5,0,4,2,2,0,5,4,6,0,\r\n            2,5,0,0,0,4,6,0,2,4,0,0,0,4,7,0,\r\n            0,6,0,0,3,3,3,0,2,0,2,0,4,4,4,0,\r\n            2,5,0,0,4,4,4,0,2,4,2,0,0,4,0,0,\r\n            2,6,2,0,3,3,3,0,2,2,2,0,4,4,4,0,\r\n            2,5,0,0,4,4,4,0,2,4,2,0,4,4,4,0,\r\n            2,6,0,0,3,3,5,0,2,2,2,0,4,4,6,0,\r\n            2,5,0,0,0,4,6,0,2,4,0,0,0,4,7,0,\r\n            2,6,0,0,3,3,5,0,2,2,2,0,4,4,6,0,\r\n            2,5,0,0,0,4,6,0,2,4,0,0,0,4,7,0\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * reset(fPowerOn)\r\n     *\r\n     * Note that we follow the same model here as other selected reset() handlers; for example, Video.reset()\r\n     * accepts an fPowerOn parameter to govern what's initially displayed on the video screen.\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {boolean|undefined} fPowerOn is true for the initial reset, so that if the Debugger isn't\r\n     * loaded, we can elect to start running.  Under any other circumstances (such as whenever Computer.reset()\r\n     * is called), \"auto-run\" is not a good idea, and can actually introduce bugs (eg, multiple run() timers).\r\n     */\r\n    reset(fPowerOn)\r\n    {\r\n        if (this.flags.running) {\r\n            this.halt();\r\n        }\r\n        this.clearRegs();\r\n        this.regPC = this.getWord(this.VECTOR_RESET);\r\n        this.clearError();              // clear any fatal error/exception\r\n        /*\r\n         * If there's a Debugger, notify Debugger.reset(); otherwise, start running\r\n         */\r\n        if (DEBUGGER && this.dbg) {\r\n            this.dbg.reset();\r\n        }\r\n        else if (fPowerOn) {\r\n            if (this.fAutoStart === true || this.fAutoStart === null && (!DEBUGGER || !this.dbg) && this.bindings[\"run\"] === undefined) {\r\n                this.run();             // start running automatically on the initial power-up, assuming there's no Debugger\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"run\")\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        var fBound = false;\r\n        switch(sBinding) {\r\n            case \"run\":\r\n                this.bindings[sBinding] = control;\r\n                control.onclick = function(cpu) {\r\n                    return function() {\r\n                        if (!cpu.flags.running) {\r\n                            cpu.run();\r\n                        } else {\r\n                            cpu.halt();\r\n                        }\r\n                    };\r\n                }(this);\r\n                fBound = true;\r\n                break;\r\n            case \"A\": case \"X\": case \"Y\": case \"S\": case \"PC\":\r\n            case \"C\": case \"Z\": case \"I\": case \"D\": case \"B\": case \"V\": case \"N\":\r\n            case \"speed\":\r\n                this.bindings[sBinding] = control;\r\n                fBound = true;\r\n                break;\r\n            case \"setSpeed\":\r\n                this.bindings[sBinding] = control;\r\n                control.onclick = function(cpu) {\r\n                    return function() {\r\n                        var speed = (cpu.speed >= cpu.SPEED_MAX? cpu.SPEED_SLOW : cpu.speed+1);\r\n                        cpu.setSpeed(speed, true);\r\n                    };\r\n                }(this);\r\n                fBound = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return fBound;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {Array} abMemory\r\n     * @param {number} start\r\n     * @param {number} end\r\n     */\r\n    setBuffer(abMemory, start, end)\r\n    {\r\n        this.abMem = abMemory;\r\n        this.offMem = start;\r\n        this.cbMem = end - start + 1;\r\n        this.offLimit = this.offMem + this.cbMem;\r\n        if (this.offMem) {\r\n            /*\r\n             * It's not that we couldn't support an address buffer that starts at a non-zero offset;\r\n             * we simply have lots of code (eg, all the opcode handlers) that assumes offMem is zero,\r\n             * and therefore that abMem can be indexed by any of the CPU registers without adding offMem.\r\n             * All that code would have to be changed (at a slight performance penalty) if we couldn't\r\n             * make this assumption.\r\n             */\r\n            Component.error(\"unsupported CPU address buffer offset (\" + this.offMem + \")\");\r\n            return;\r\n        }\r\n        this.setReady();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {boolean} fOn\r\n     * @param {C1PComputer} cmp\r\n     */\r\n    setPower(fOn, cmp)\r\n    {\r\n        if (fOn && !this.flags.powered) {\r\n            this.cmp = cmp;\r\n            /*\r\n             * Attach the Debugger, if any, to the CPU, so that the CPU can periodically\r\n             * notify it as needed (when the CPU starts, stops, and executes instructions)\r\n             */\r\n            if (DEBUGGER) {\r\n                this.dbg = cmp.getComponentByType(\"debugger\");\r\n                if (this.dbg) {\r\n                    this.dbg.init();\r\n                }\r\n            }\r\n            /*\r\n             * Attach the Video device to the CPU, so that the CPU can periodically update\r\n             * the video display via displayVideo(), as cycles permit.\r\n             */\r\n            var video = cmp.getComponentByType(\"video\");\r\n            if (video) {\r\n                this.displayVideo = function(v) {\r\n                    return function() {\r\n                        v.updateScreen();\r\n                    };\r\n                }(video);\r\n                this.setFocus = function(v) {\r\n                    return function() {\r\n                        v.setFocus();\r\n                    };\r\n                }(video);\r\n            }\r\n            this.flags.powered = true;\r\n            this.reset(true);\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a memory read-notification handler to the CPU's list of such handlers.\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {number} start address\r\n     * @param {number} end address\r\n     * @param {Component} component\r\n     * @param {function(number,number)} fn is called with the EA and PC values at the time of the write\r\n     */\r\n    addReadNotify(start, end, component, fn)\r\n    {\r\n        if (this.findNotify(this.aReadNotify, start, end, component, fn) < 0) {\r\n            if (this.addrReadLower > start) {\r\n                this.addrReadLower = start;\r\n            }\r\n            if (this.addrReadUpper < end) {\r\n                this.addrReadUpper = end;\r\n            }\r\n            this.aReadNotify.push([start, end, component, fn]);\r\n            if (DEBUG) {\r\n                this.printf(MESSAGE.LOG, \"addReadNotify(%#06x,%#06x,%s): new read range: %#06x-%#06x\\n\", start, end, component.id, this.addrReadLower, this.addrReadUpper);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} addrRead is the EA value at the time of the read\r\n     * @param {number} [addrFrom] is the PC value at the time of the read;\r\n     * this will be undefined for read notifications triggered by assorted Debugger commands,\r\n     * so all handlers should be prepared for that as well.\r\n     */\r\n    checkReadNotify(addrRead, addrFrom)\r\n    {\r\n        for (var i=0; i < this.aReadNotify.length; i++) {\r\n            if (addrRead >= this.aReadNotify[i][0] && addrRead <= this.aReadNotify[i][1]) {\r\n                this.aReadNotify[i][3].call(this.aReadNotify[i][2], addrRead, addrFrom);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a memory read-notification handler from the CPU's list of such handlers.\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {number} start address\r\n     * @param {number} end address\r\n     * @param {Component} component\r\n     * @param {function(number,number)} fn of previously added handler\r\n     * @returns {boolean} true if remove was successful, false if the handler was not found\r\n     */\r\n    removeReadNotify(start, end, component, fn)\r\n    {\r\n        var aBounds = this.removeNotify(this.aReadNotify, start, end, component, fn);\r\n        if (aBounds.length == 4) {\r\n            this.addrReadLower = aBounds[2];\r\n            this.addrReadUpper = aBounds[3];\r\n            if (DEBUG) {\r\n                this.printf(MESSAGE.LOG, \"removeReadNotify(%#06x,%#06x,%s): new read range: %#06x-%#06x\\n\", start, end, component.id, this.addrReadLower, this.addrReadUpper);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Add a memory write-notification handler to the CPU's list of such handlers.\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {number} start address\r\n     * @param {number} end address\r\n     * @param {Component} component\r\n     * @param {function(number,number)} fn is called with the EA and PC values at the time of the write\r\n     */\r\n    addWriteNotify(start, end, component, fn)\r\n    {\r\n        if (this.findNotify(this.aWriteNotify, start, end, component, fn) < 0) {\r\n            if (this.addrWriteLower > start) {\r\n                this.addrWriteLower = start;\r\n            }\r\n            if (this.addrWriteUpper < end) {\r\n                this.addrWriteUpper = end;\r\n            }\r\n            this.aWriteNotify.push([start, end, component, fn]);\r\n            if (DEBUG) {\r\n                this.printf(MESSAGE.LOG, \"addWriteNotify(%#06x,%#06x,%s): new write range: %#06x-%#06x\\n\", start, end, component.id, this.addrWriteLower, this.addrWriteUpper);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} addrWrite is the EA value at the time of the write\r\n     * @param {number} [addrFrom] is the PC value at the time of the write;\r\n     * this will be undefined for write notifications triggered by assorted Debugger commands,\r\n     * so all handlers should be prepared for that as well.\r\n     */\r\n    checkWriteNotify(addrWrite, addrFrom)\r\n    {\r\n        for (var i=0; i < this.aWriteNotify.length; i++) {\r\n            if (addrWrite >= this.aWriteNotify[i][0] && addrWrite <= this.aWriteNotify[i][1]) {\r\n                this.aWriteNotify[i][3].call(this.aWriteNotify[i][2], addrWrite, addrFrom);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a memory write-notification handler from the CPU's list of such handlers.\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {number} start address\r\n     * @param {number} end address\r\n     * @param {Component} component\r\n     * @param {function(number,number)} fn of previously added handler\r\n     * @returns {boolean} true if remove was successful, false if the handler was not found\r\n     */\r\n    removeWriteNotify(start, end, component, fn)\r\n    {\r\n        var aBounds = this.removeNotify(this.aWriteNotify, start, end, component, fn);\r\n        if (aBounds.length == 4) {\r\n            this.addrWriteLower = aBounds[2];\r\n            this.addrWriteUpper = aBounds[3];\r\n            if (DEBUG) {\r\n                this.printf(MESSAGE.LOG, \"removeWriteNotify(%#06x,%#06x,%s): new write range: %#06x-%#06x\\n\", start, end, component.id, this.addrWriteLower, this.addrWriteUpper);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Find a memory notification handler from the given array of handlers\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {Array} aNotify array of handlers\r\n     * @param {number} start address\r\n     * @param {number} end address\r\n     * @param {Component} component\r\n     * @param {function(number,number)} fn of previously added handler\r\n     * @returns {number} index of the matching handler, or -1 if not found\r\n     */\r\n    findNotify(aNotify, start, end, component, fn)\r\n    {\r\n        for (var i=0; i < aNotify.length; i++) {\r\n            if (aNotify[i][0] == start && aNotify[i][1] == end && aNotify[i][2] == component && aNotify[i][3] == fn) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Remove a memory notification handler from the given array of handlers\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {Array} aNotify array of handlers\r\n     * @param {number} start address\r\n     * @param {number} end address\r\n     * @param {Component} component\r\n     * @param {function(number,number)} fn of previously added handler\r\n     * @returns {Array} bounds of previous handler ([0] and [1]) and new lower and upper address bounds ([2] and [3])\r\n     */\r\n    removeNotify(aNotify, start, end, component, fn)\r\n    {\r\n        var aBounds = [];\r\n        var i = this.findNotify(aNotify, start, end, component, fn);\r\n        if (i >= 0) {\r\n            aBounds.push(aNotify[i][0]);\r\n            aBounds.push(aNotify[i][1]);\r\n            aNotify.splice(i, 1);\r\n            var addrLower = 0x10000, addrUpper = 0x0;\r\n            for (i=0; i < aNotify.length; i++) {\r\n                if (addrLower > aNotify[i][0]) {\r\n                    addrLower = aNotify[i][0];\r\n                }\r\n                if (addrUpper < aNotify[i][1]) {\r\n                    addrUpper = aNotify[i][1];\r\n                }\r\n            }\r\n            aBounds.push(addrLower);\r\n            aBounds.push(addrUpper);\r\n        }\r\n        return aBounds;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} [speed] is one of: 0 (slow), 1 (fast) or 2 (maximum)\r\n     * @param {boolean} [fOnClick] is true if called from a click handler that might have stolen focus\r\n     * @desc Whenever the speed is changed, the running cycle count and corresponding start time must be reset,\r\n     * so that the next effective speed calculation obtains sensible results.  In fact, when run() initially calls\r\n     * setSpeed() with no parameters, that's all this function does (it doesn't change the current speed setting).\r\n     */\r\n    setSpeed(speed, fOnClick)\r\n    {\r\n        if (speed !== undefined) {\r\n            this.speed = speed;\r\n            if (this.bindings[\"setSpeed\"]) {\r\n                this.bindings[\"setSpeed\"].innerHTML = this.aSpeeds[speed >= 2? 0 : speed+1];\r\n            }\r\n            this.printf(\"running at %s speed %s\\n\", this.aSpeeds[speed].toLowerCase(), this.aSpeedDescs[speed]);\r\n            if (fOnClick) this.setFocus();\r\n        }\r\n        this.nRunCycles = 0;\r\n        this.msRunStart = Component.getTime();\r\n        this.calcCycles();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} nCycles\r\n     * @param {number} msElapsed\r\n     */\r\n    calcSpeed(nCycles, msElapsed)\r\n    {\r\n        if (msElapsed) {\r\n            this.mhz = Math.round(nCycles / ( msElapsed * 100)) / 10;\r\n            if (msElapsed >= 86400000) {\r\n                this.setSpeed();        // reset all our counters once per day so that we never have to worry about overflow\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    displayVideo()\r\n    {\r\n        // Nothing to do until setPower() installs a replacement function\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    setFocus()\r\n    {\r\n        // Nothing to do until setPower() installs a replacement function\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {string} sReg\r\n     * @param {number} vReg\r\n     * @param {number} [len]\r\n     */\r\n    displayReg(sReg, vReg, len)\r\n    {\r\n        if (this.bindings[sReg] !== undefined) {\r\n            if (len === undefined) len = 1;\r\n            var s = \"0000\" + vReg.toString(16);\r\n            this.bindings[sReg].innerHTML = s.slice(s.length-len).toUpperCase();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    displayStatus()\r\n    {\r\n        this.displayReg(\"A\", this.regA, 2);\r\n        this.displayReg(\"X\", this.regX, 2);\r\n        this.displayReg(\"Y\", this.regY, 2);\r\n        var regP = this.getRegP();\r\n        this.displayReg(\"C\", (regP & this.BIT_PC)? 1 : 0);\r\n        this.displayReg(\"Z\", (regP & this.BIT_PZ)? 1 : 0);\r\n        this.displayReg(\"I\", (regP & this.BIT_PI)? 1 : 0);\r\n        this.displayReg(\"D\", (regP & this.BIT_PD)? 1 : 0);\r\n        this.displayReg(\"B\", (regP & this.BIT_PB)? 1 : 0);\r\n        this.displayReg(\"V\", (regP & this.BIT_PV)? 1 : 0);\r\n        this.displayReg(\"N\", (regP & this.BIT_PN)? 1 : 0);\r\n        this.displayReg(\"S\", this.regS, 4);\r\n        this.displayReg(\"PC\", this.regPC, 4);\r\n        if (this.bindings[\"speed\"] && this.mhz) {\r\n            this.bindings[\"speed\"].innerHTML = this.mhz.toFixed(1) + \"Mhz\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @returns {boolean}\r\n     */\r\n    isRunning()\r\n    {\r\n        return this.flags.running;\r\n    }\r\n\r\n    /**\r\n     * Calculate the number of cycles to process for each \"burst\" of CPU activity.  The size of a burst\r\n     * is driven by the following values:\r\n     *\r\n     *      nYieldsPerSecond (eg, 30)\r\n     *      nVideoUpdatesPerSecond (eg, 30)\r\n     *      nStatusUpdatesPerSecond (eg, 5)\r\n     *\r\n     * The largest of the above values forces the size of the burst to its smallest value.  Let's say that\r\n     * largest value is 30.  Assuming nCyclesPerSecond is 1,000,000, that results in bursts of 33,333 cycles.\r\n     *\r\n     * At the end of each burst, we subtract burst cycles from yield, video, and status cycle \"threshold\"\r\n     * counters. Whenever the \"next yield\" cycle counter goes to (or below) zero, we compare elapsed time\r\n     * to the time we expected the virtual hardware to take (eg, 1000ms/50 or 20ms), and if we still have time\r\n     * remaining, we sleep the remaining time (or 0ms if there's no remaining time), and then restart run().\r\n     *\r\n     * Similarly, whenever the \"next video update\" cycle counter goes to (or below) zero, we call displayVideo(),\r\n     * and whenever the \"next status update\" cycle counter goes to (or below) zero, we call displayStatus().\r\n     *\r\n     * @this {C1PCPU}\r\n     * @param {boolean} [fRecalc] is true if the caller wants to recalculate thresholds based on the\r\n     * most recent mhz calculation (see calcSpeed)\r\n     */\r\n    calcCycles(fRecalc)\r\n    {\r\n        /*\r\n         * Calculate the most cycles we're allowed to execute in a single \"burst\"\r\n         */\r\n        var nMostUpdatesPerSecond = this.nYieldsPerSecond;\r\n        if (nMostUpdatesPerSecond < this.nVideoUpdatesPerSecond) nMostUpdatesPerSecond = this.nVideoUpdatesPerSecond;\r\n        if (nMostUpdatesPerSecond < this.nStatusUpdatesPerSecond) nMostUpdatesPerSecond = this.nStatusUpdatesPerSecond;\r\n\r\n        /*\r\n         * Calculate \"per\" values for the yield, video update, and status update cycle counters\r\n         */\r\n        var vMultiplier = 1;\r\n        if (fRecalc && this.speed > this.SPEED_SLOW && this.mhz) vMultiplier = this.mhz;\r\n        if (vMultiplier > this.mhzFast && this.speed < this.SPEED_MAX) vMultiplier = this.mhzFast;\r\n\r\n        this.msPerYield = Math.round(1000/this.nYieldsPerSecond);\r\n        this.nCyclesPerBurst = Math.floor(this.nCyclesPerSecond / nMostUpdatesPerSecond * vMultiplier);\r\n        this.nCyclesPerYield = Math.floor(this.nCyclesPerSecond / this.nYieldsPerSecond * vMultiplier);\r\n        this.nCyclesPerVideoUpdate = Math.floor(this.nCyclesPerSecond / this.nVideoUpdatesPerSecond * vMultiplier);\r\n        this.nCyclesPerStatusUpdate = Math.floor(this.nCyclesPerSecond / this.nStatusUpdatesPerSecond * vMultiplier);\r\n\r\n        /*\r\n         * And initialize \"next\" yield, video update, and status update cycle \"threshold\" counters to those \"per\" values\r\n         */\r\n        if (!fRecalc) {\r\n            this.nCyclesNextYield = this.nCyclesPerYield;\r\n            this.nCyclesNextVideoUpdate = this.nCyclesPerVideoUpdate;\r\n            this.nCyclesNextStatusUpdate = this.nCyclesPerStatusUpdate;\r\n        }\r\n        this.nRecalcCycles = 0;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    calcStartTime()\r\n    {\r\n        if (this.nRecalcCycles >= this.nCyclesPerSecond) {\r\n            this.calcCycles(true);\r\n        }\r\n        this.nCyclesThisRun = 0;\r\n        this.msStartThisRun = Component.getTime();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @returns {number}\r\n     */\r\n    calcRemainingTime()\r\n    {\r\n        var msCurrent = Component.getTime();\r\n        var msYield = this.msPerYield;\r\n\r\n        if (this.nCyclesThisRun) {\r\n            /*\r\n             * Normally, we would assume we executed a full quota of work over msPerYield, but since the CPU\r\n             * now has the option of calling yieldCPU(), that might not be true.  If nCyclesThisRun is correct, then\r\n             * the ratio of nCyclesThisRun/nCyclesPerYield should represent the percentage of work we performed,\r\n             * and so applying that percentage to msPerYield should give us a better estimate of work vs. time.\r\n             */\r\n            msYield = Math.round(msYield * this.nCyclesThisRun / this.nCyclesPerYield);\r\n            // if (msYield < this.msPerYield) this.printf(\"scaling msPerYield (%d) to msYield (%d)\\n\", this.msPerYield, msYield);\r\n        }\r\n\r\n        var msElapsedThisRun = msCurrent - this.msStartThisRun;\r\n        var msRemainsThisRun = msYield - msElapsedThisRun;\r\n\r\n        /*\r\n         * We could pass only \"this run\" results to calcSpeed():\r\n         *\r\n         *      nCycles = this.nCyclesThisRun;\r\n         *      msElapsed = msElapsedThisRun;\r\n         *\r\n         * but it seems preferable to use longer time periods and hopefully get a more accurate speed.\r\n         *\r\n         * Also, if msRemainsThisRun >= 0 && this.speed == this.SPEED_SLOW, we could pass these results instead:\r\n         *\r\n         *      nCycles = this.nCyclesThisRun;\r\n         *      msElapsed = this.msPerYield;\r\n         *\r\n         * to insure that we display a smooth, constant 1Mhz.  But the displayed speed seems pretty steady as-is.\r\n         */\r\n        var nCycles = this.nRunCycles;\r\n        var msElapsed = msCurrent - this.msRunStart;\r\n\r\n        if (DEBUG && msRemainsThisRun < 0 && this.speed == this.SPEED_FAST) {\r\n            this.printf(\"warning: updates @%dms (prefer %dms)\\n\", msElapsedThisRun, Math.round(msYield));\r\n        }\r\n\r\n        this.calcSpeed(nCycles, msElapsed);\r\n\r\n        if (msRemainsThisRun < 0) {\r\n            /*\r\n             * This is an easy case: it's taking more than 1 second to simulate 1Mhz,\r\n             * so all we can do is yield for as little time as possible (ie, 0ms) and hope the\r\n             * simulation is at least usable.\r\n             */\r\n            msRemainsThisRun = 0;\r\n        }\r\n        else {\r\n            if (this.speed == this.SPEED_FAST) {\r\n                /*\r\n                 * This case requires us to artificially limit the CPU speed.  calcSpeed()\r\n                 * already cranks up the number of cycles we process per burst, in proportion\r\n                 * to the effective mhz, so there isn't much to do here except sleep for\r\n                 * whatever time is in msRemainsThisRun.\r\n                 *\r\n                 * The artificial limit was chosen largely because it's not currently possible\r\n                 * for the keyboard component to inject keys fast enough to avoid duplicate\r\n                 * keystrokes at higher speeds. Perhaps with future improvements to the keyboard\r\n                 * component, this limit can be lifted.\r\n                 */\r\n                if (this.mhz <= this.mhzFast) {\r\n                    msRemainsThisRun = 0;\r\n                }\r\n            }\r\n            else\r\n            if (this.speed == this.SPEED_MAX) {\r\n                /*\r\n                 * This is also an easy case: yield for as little time as possible (ie, 0ms), to execute\r\n                 * the maximum number of cycles per second.\r\n                 */\r\n                msRemainsThisRun = 0;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Last but not least, update nRecalcCycles, so that when run() starts up again and calls calcStartTime(),\r\n         * it'll be ready to decide if calcCycles() should be called again.\r\n         */\r\n        this.nRecalcCycles += this.nCyclesThisRun;\r\n\r\n        return msRemainsThisRun;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    run()\r\n    {\r\n        if (!this.setBusy(true)) {\r\n            this.update();\r\n            if (this.cmp) this.cmp.stop(this.msRunStart, this.nRunCycles);\r\n            return;\r\n        }\r\n        if (!this.flags.running) {\r\n            /*\r\n             *  setSpeed() without a speed parameter leaves the selected speed in place, but also resets the\r\n             *  cycle counter and timestamp for the current series of run() calls, calculates the maximum number\r\n             *  of cycles for each burst based on the last known effective CPU speed, and resets the nRecalcCycles\r\n             *  threshold counter.\r\n             */\r\n            this.setSpeed();\r\n            if (this.cmp) this.cmp.start();\r\n            this.flags.running = true;\r\n            if (this.bindings[\"run\"]) this.bindings[\"run\"].innerHTML = \"Halt\";\r\n            this.setFocus();\r\n        }\r\n        /*\r\n         *  calcStartTime() initializes the cycle counter and timestamp for this run() invocation, and optionally\r\n         *  recalculates the the maximum number of cycles for each burst if the nRecalcCycles threshold has been reached.\r\n         */\r\n        this.calcStartTime();\r\n        try {\r\n            do {\r\n                /*\r\n                 * NOTE: nCyclesPerBurst is how many cycles we WANT to run each iteration of step(), but that just\r\n                 * initializes nBurstCycles, which (after subtracting any remaining nStepCycles) is how many cycles\r\n                 * we ACTUALLY ran.\r\n                 */\r\n                this.step(this.nCyclesPerBurst);\r\n                /*\r\n                 * nCyclesThisRun is increased by nBurstCycles, plus any additional cycles step() processed after\r\n                 * its cycle count had reached zero (and conversely, minus any cycles that it still had yet to process);\r\n                 * ditto for nRunCycles, which is the cycle count since the CPU first started running.\r\n                 */\r\n                var nCycles = this.nBurstCycles - this.nStepCycles;\r\n                this.nRunCycles += nCycles;\r\n                this.nCyclesThisRun += nCycles;\r\n                /*\r\n                 * These step() cycle variables must be zeroed now, so that getCycles() always returns a valid cycle count.\r\n                 */\r\n                this.nBurstCycles = this.nStepCycles = 0;\r\n\r\n                this.nCyclesNextVideoUpdate -= this.nCyclesPerBurst;\r\n                if (this.nCyclesNextVideoUpdate <= 0) {\r\n                    this.nCyclesNextVideoUpdate += this.nCyclesPerVideoUpdate;\r\n                    this.displayVideo();\r\n                }\r\n\r\n                this.nCyclesNextStatusUpdate -= this.nCyclesPerBurst;\r\n                if (this.nCyclesNextStatusUpdate <= 0) {\r\n                    this.nCyclesNextStatusUpdate += this.nCyclesPerStatusUpdate;\r\n                    this.displayStatus();\r\n                }\r\n\r\n                this.nCyclesNextYield -= this.nCyclesPerBurst;\r\n                if (this.nCyclesNextYield <= 0) {\r\n                    this.nCyclesNextYield += this.nCyclesPerYield;\r\n                    break;\r\n                }\r\n            } while (this.flags.running);\r\n        }\r\n        catch (e) {\r\n            this.halt();\r\n            this.update();\r\n            this.setBusy(false);\r\n            this.setError(e.stack || e.message);\r\n            return;\r\n        }\r\n        setTimeout(function(cpu) { return function() {cpu.run();}; }(this), this.calcRemainingTime());\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} nMinCycles (0 implies a single-step, and therefore breakpoints should be ignored)\r\n     * @returns {boolean|undefined} undefined indicates that the last instruction was not executed (eg,\r\n     * we hit an execution breakpoint), false implies a post-execution condition was triggered (eg, a write\r\n     * breakpoint), and true indicates successful completion of all requested cycles.\r\n     */\r\n    step(nMinCycles)\r\n    {\r\n        /*\r\n         * The Debugger uses fCompleted to determine if the instruction completed (true) or was interrupted\r\n         * by a breakpoint or some other exceptional condition (false). NOTE: this does NOT include thrown\r\n         * exceptions, which step() expects the caller to catch using its own exception handler.\r\n         *\r\n         * The CPU relies on the use of halt() rather than fCompleted, because the CPU never single-steps\r\n         * (ie, nMinCycles is always some large number), whereas the Debugger does.  And conversely, when the\r\n         * Debugger is single-stepping (even when performing multiple single-steps), fRunning is never set,\r\n         * so halt() would have no effect as far as the Debugger is concerned.\r\n         */\r\n        var fCompleted = true;\r\n\r\n        /*\r\n         * fDebugCheck is true if we need to \"check\" every instruction with the Debugger.  The Debugger will\r\n         * call cpu.step(n) with n == 0 if it's executing only ONE instruction (ie, the user just clicked the\r\n         * \"Step\" button, or they've issued a \"t\" or \"t1\" command).  Otherwise, it will call with n == 1\r\n         * (ie, the user is holding the \"Step\" button, or they've issued a \"t#\" command where # > 1).\r\n         *\r\n         * In the first case, we want to ignore (ie, \"step over\") any breakpoints; otherwise, the Debugger has\r\n         * no easy way of moving past a breakpoint (other than clearing it, of course).  In the second case,\r\n         * we want to honor any breakpoints, which in turn will set fCompleted to false and signal the Debugger\r\n         * to stop.\r\n         *\r\n         * Note that as a practical matter, both 0 and 1 are otherwise treated the same when it comes to the\r\n         * minimum number of cycles to run: one and only one instruction will execute, since every instruction\r\n         * consumes at least 1 cycle.\r\n         */\r\n        this.regEA = this.regEAWrite = -1;\r\n        var fDebugCheck = (DEBUGGER && nMinCycles && this.dbg && this.dbg.checksEnabled());\r\n\r\n        /*\r\n         * We move the minimum cycle count to nStepCycles (the number of cycles left to run), so that other\r\n         * methods have the ability to force that number to zero (eg, halt()), and thus we don't have to check\r\n         * some other criteria just to determine whether we should continue running or not.\r\n         */\r\n        this.nBurstCycles = this.nStepCycles = nMinCycles;\r\n        do {\r\n            var bOpCode = this.abMem[this.regPC];\r\n\r\n            if (fDebugCheck && !this.dbg.checkInstruction(this.regPC, bOpCode)) {\r\n                fCompleted = undefined;\r\n                this.halt();\r\n                break;\r\n            }\r\n\r\n            this.regPC++;\r\n            this.aOpcodeFuncs[bOpCode].call(this);\r\n\r\n            /*\r\n             * Assert that all register contents remain within their respective ranges.\r\n             */\r\n\r\n\r\n            /*\r\n             * WARNING: By making the following read-or-write test exclusive, we're not going to catch\r\n             * those situations where an instruction does BOTH. For example, JSR pushes the old PC\r\n             * (which, if we were tracking STACK writes, would set regEAWrite) and then fetches a new PC\r\n             * (which should set regEA).  However, that's a situation which, except for a peculiar\r\n             * combination of read and write breakpoints set by the Debugger, is one we simply don't care\r\n             * about.  Moreover, none of our opcode handlers currently set BOTH regEA and regEAWrite,\r\n             * so it would be completely pointless to check both conditions here.\r\n             *\r\n             * Since READS are FAR more common than WRITES, we check the common case first.  If the\r\n             * day comes that we implement opcode functions that set both regEA AND regEAWrite, then we'll\r\n             * want to remove the \"else\" below and stop making the read and write tests exclusive.\r\n             * If we don't, then some of those rare/unusual writes will either get missed or delayed.\r\n             *\r\n             * It's also worth mentioning here that not all instructions READ or WRITE (eg, INX, INY and\r\n             * others that are completely flag or register-bound).  It's a bit ironic that those instructions,\r\n             * which are typically the fastest, have to perform both the READ and WRITE tests below.  But\r\n             * on the plus side, both tests will fail, so they'll still get out of here faster than any of\r\n             * the other instructions.\r\n             */\r\n            if (this.regEA >= 0) {\r\n                /*\r\n                 * Serial emulation requires a read notification handler, and the keyboard may eventually\r\n                 * want one, too.\r\n                 */\r\n                if (this.regEA >= this.addrReadLower && this.regEA <= this.addrReadUpper) {\r\n                    this.checkReadNotify(this.regEA, this.regPC);\r\n                }\r\n                if (fDebugCheck && !this.dbg.checkMemoryRead(this.regEA)) {\r\n                    fCompleted = false;\r\n                    this.halt();\r\n                    break;\r\n                }\r\n                this.regEA = -1;\r\n            }\r\n            else if (this.regEAWrite >= 0) {\r\n                /*\r\n                 * We process the write notification handlers before the write breakpoint handlers,\r\n                 * because we don't want to leave any ROM (read-only memory) writes in place before we\r\n                 * (potentially) give up control.  Undoing every write to ROM address space is an essential\r\n                 * part of simulating the \"read-only\" behavior of ROM.\r\n                 *\r\n                 * Obviously, there are other write notification handlers as well (like the keyboard's),\r\n                 * which may sometimes do things we'd prefer to intercept first, but let's keep things simple.\r\n                 */\r\n                if (this.regEAWrite >= this.addrWriteLower && this.regEAWrite <= this.addrWriteUpper) {\r\n                    this.checkWriteNotify(this.regEAWrite, this.regPC);\r\n                }\r\n                if (fDebugCheck && !this.dbg.checkMemoryWrite(this.regEAWrite, this.abMem[this.regEAWrite])) {\r\n                    fCompleted = false;\r\n                    this.halt();\r\n                    break;\r\n                }\r\n                this.regEAWrite = -1;\r\n            }\r\n\r\n            this.nStepCycles -= this.aOpcodeCycles[bOpCode];\r\n\r\n        } while (this.nStepCycles > 0);\r\n\r\n        return fCompleted;\r\n    }\r\n\r\n    /**\r\n     * yieldCPU() is similar to halt() with regard to how it resets various cycle countdown values,\r\n     * but the CPU remains in a \"running\" state.\r\n     *\r\n     * @this {C1PCPU}\r\n     */\r\n    yieldCPU()\r\n    {\r\n        this.nCyclesNextYield = 0;          // this will break us out of run(), once we break out of step()\r\n        this.nBurstCycles -= this.nStepCycles;\r\n        this.nStepCycles = 0;               // this will break us out of step()\r\n    }\r\n\r\n    /**\r\n     * halt() is similar to yieldCPU(), but it doesn't need to zero nCyclesNextYield to break out of run();\r\n     * it simply needs to clear fRunning.\r\n     *\r\n     * @this {C1PCPU}\r\n     */\r\n    halt()\r\n    {\r\n        this.isBusy(true);\r\n        this.nBurstCycles -= this.nStepCycles;\r\n        this.nStepCycles = 0;\r\n        if (this.flags.running) {\r\n            this.flags.running = false;\r\n            if (this.bindings[\"run\"]) this.bindings[\"run\"].innerHTML = \"Run\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * This used to be performed at the end of every step(), but run() -- which relies upon step() -- needed to have\r\n     * more control over when these updates are performed.  However, for other callers of step(), such as the Debugger,\r\n     * the combination of step() + update() provides the old behavior.\r\n     */\r\n    update()\r\n    {\r\n        this.displayVideo();\r\n        this.displayStatus();\r\n    }\r\n\r\n    /**\r\n     * getCycles() returns the number of cycles executed so far.  Note that we can be called after\r\n     * a run() OR during a run(), perhaps from a handler triggered during the current run's step(),\r\n     * so nRunCycles must always be adjusted by number of cycles step() was asked to run (nBurstCycles),\r\n     * less the number of cycles it has yet to run (nStepCycles).\r\n     *\r\n     * nRunCycles is reset whenever the CPU is halted or the CPU speed is changed, so returning 0 when the\r\n     * CPU is stopped seems perfectly reasonable.  As a result, components that rely on getCycles() returning a\r\n     * steadily increasing number should also be prepared for a reset at any time (eg, the Keyboard's\r\n     * updateMemory() function).\r\n     *\r\n     * @this {C1PCPU}\r\n     * @returns {number}\r\n     */\r\n    getCycles()\r\n    {\r\n        return (this.flags.running? this.nRunCycles + this.nBurstCycles - this.nStepCycles : 0);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} addr\r\n     * @returns {number}\r\n     *\r\n     * Unlike the Debugger versions of these functions, these presume that addr is always valid,\r\n     * since it's internally generated, not user-supplied. Of course, we could still have internal\r\n     * bugs, so asserts are included, but they are present in DEBUG code only (automatically\r\n     * removed from RELEASE code).\r\n     *\r\n     * Moreover, it's unlikely we'll use this function much (unless performance becomes secondary\r\n     * to code size), since all the opCode functions should perform their own fetches, for obvious\r\n     * performance reasons.\r\n     */\r\n    getByte(addr)\r\n    {\r\n\r\n        var b = this.abMem[addr];\r\n\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} addr\r\n     * @returns {number}\r\n     */\r\n    getWord(addr)\r\n    {\r\n\r\n        var w = this.abMem[addr] | (this.abMem[addr+1] << 8);\r\n\r\n        return w;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} addr\r\n     * @param {number} b\r\n     */\r\n    setByte(addr, b)\r\n    {\r\n\r\n\r\n        this.abMem[addr] = b;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @returns {number}\r\n     */\r\n    getRegP()\r\n    {\r\n        /*\r\n         *  // C = LAZY_C;\r\n         *  this.regP = ((this.regP & 0xfe) | ((((this.regRC & 0x0100)))? 0x01 : 0));\r\n         *  // Z = LAZY_Z;\r\n         *  this.regP = ((this.regP & 0xfd) | ((((this.regRZ & 0xff) == 0))? 0x02 : 0));\r\n         *  // V = LAZY_V;\r\n         *  this.regP = ((this.regP & 0xbf) | (((((((this.regRV & 0xff) ^ this.regRU) ^ (this.regRV >> 1)) & 0x80) != 0))? 0x40 : 0));\r\n         *  // N = LAZY_N;\r\n         *  this.regP = ((this.regP & 0x7f) | ((((this.regRN & 0x80)))? 0x80 : 0));\r\n         */\r\n        var regP = ((this.regRC & 0x0100)? 0x01 : 0x00);\r\n        regP |= (!(this.regRZ & 0xff)? 0x02 : 0x00);\r\n        regP |= (((((this.regRV & 0xff) ^ this.regRU) ^ (this.regRV >> 1)) & 0x80)? 0x40 : 0x00);\r\n        regP |= ((this.regRN & 0x80)? 0x80 : 0x00);\r\n        return (this.regP & 0x3C) | regP;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Clear the C flag\r\n     */\r\n    clearC()\r\n    {\r\n        this.regRC = 0x00;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Set the C flag\r\n     */\r\n    setC()\r\n    {\r\n        this.regRC = 0x100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Clear the N bit\r\n     */\r\n    clearN()\r\n    {\r\n        this.regRN = 0x00;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Set the N bit\r\n     */\r\n    setN()\r\n    {\r\n        this.regRN = 0x80;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Clear the V bit\r\n     */\r\n    clearV()\r\n    {\r\n        this.regRV = 0x00; this.regRU = 0x00;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Set the V bit\r\n     */\r\n    setV()\r\n    {\r\n        this.regRV = 0x00; this.regRU = 0x80;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Clear the Z bit\r\n     */\r\n    clearZ()\r\n    {\r\n        this.regRZ = 0x01;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Set the Z bit\r\n     */\r\n    setZ()\r\n    {\r\n        this.regRZ = 0x00;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Set the BCD bit and install the BCD opcode handlers\r\n     */\r\n    setBCD()\r\n    {\r\n        this.regP |= 0x08;\r\n        this.aOpcodeFuncs[0x61] = this.opADCindxBCD;\r\n        this.aOpcodeFuncs[0x65] = this.opADCzpBCD;\r\n        this.aOpcodeFuncs[0x69] = this.opADCimmBCD;\r\n        this.aOpcodeFuncs[0x6d] = this.opADCabsBCD;\r\n        this.aOpcodeFuncs[0x71] = this.opADCindyBCD;\r\n        this.aOpcodeFuncs[0x75] = this.opADCzpxBCD;\r\n        this.aOpcodeFuncs[0x79] = this.opADCabsyBCD;\r\n        this.aOpcodeFuncs[0x7d] = this.opADCabsxBCD;\r\n        this.aOpcodeFuncs[0xe1] = this.opSBCindxBCD;\r\n        this.aOpcodeFuncs[0xe5] = this.opSBCzpBCD;\r\n        this.aOpcodeFuncs[0xe9] = this.opSBCimmBCD;\r\n        this.aOpcodeFuncs[0xed] = this.opSBCabsBCD;\r\n        this.aOpcodeFuncs[0xf1] = this.opSBCindyBCD;\r\n        this.aOpcodeFuncs[0xf5] = this.opSBCzpxBCD;\r\n        this.aOpcodeFuncs[0xf9] = this.opSBCabsyBCD;\r\n        this.aOpcodeFuncs[0xfd] = this.opSBCabsxBCD;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * Clear the BCD bit and remove the BCD opcode handlers\r\n     */\r\n    clearBCD()\r\n    {\r\n        this.regP &= ~0x08;\r\n        this.aOpcodeFuncs[0x61] = this.opADCindx;\r\n        this.aOpcodeFuncs[0x65] = this.opADCzp;\r\n        this.aOpcodeFuncs[0x69] = this.opADCimm;\r\n        this.aOpcodeFuncs[0x6d] = this.opADCabs;\r\n        this.aOpcodeFuncs[0x71] = this.opADCindy;\r\n        this.aOpcodeFuncs[0x75] = this.opADCzpx;\r\n        this.aOpcodeFuncs[0x79] = this.opADCabsy;\r\n        this.aOpcodeFuncs[0x7d] = this.opADCabsx;\r\n        this.aOpcodeFuncs[0xe1] = this.opSBCindx;\r\n        this.aOpcodeFuncs[0xe5] = this.opSBCzp;\r\n        this.aOpcodeFuncs[0xe9] = this.opSBCimm;\r\n        this.aOpcodeFuncs[0xed] = this.opSBCabs;\r\n        this.aOpcodeFuncs[0xf1] = this.opSBCindy;\r\n        this.aOpcodeFuncs[0xf5] = this.opSBCzpx;\r\n        this.aOpcodeFuncs[0xf9] = this.opSBCabsy;\r\n        this.aOpcodeFuncs[0xfd] = this.opSBCabsx;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} reg\r\n     * @param {number} mem\r\n     * @returns {number}\r\n     *\r\n     * Refer to http://www.6502.org/tutorials/decimal_mode.html for 6502-specific details.\r\n     * Refer to http://homepage.cs.uiowa.edu/~jones/bcd/bcd.html for optimization tips.\r\n     */\r\n    addBCD(reg, mem)\r\n    {\r\n        var carry = ((this.regRC & 0x0100)? 1 : 0);\r\n\r\n        /*\r\n         * First add the low nibbles.\r\n         */\r\n        var r = (reg & 0x0f) + (mem & 0x0f) + carry;\r\n\r\n        /*\r\n         * Adjust the result. NOTE: The extra AND'ing and ADD'ing isn't necessary if we want to\r\n         * assume that ONLY valid BCD digits will be added, but we probably shouldn't assume that.\r\n         * NOTE: We use an OR instead of an ADD at the end because it's logically equivalent and faster.\r\n         */\r\n        if (r >= 0x0A) r = ((r + 0x06) & 0x0f) | 0x10;\r\n\r\n        /*\r\n         * Now add the high nibbles.\r\n         */\r\n        r += (reg & 0xf0) + (mem & 0xf0);\r\n\r\n        /*\r\n         * Before we do the next adjust, it seems that N and V are dependent on this intermediate\r\n         * result (however, the meaning of N and V in BCD mode is not well documented).\r\n         */\r\n        this.regRU = reg ^ mem; this.regRV = r;\r\n        this.regRN = (r & 0xff);\r\n\r\n        /*\r\n         * Final adjustment.\r\n         */\r\n        if (r >= 0xA0) r += 0x60;\r\n        /*\r\n         * NOTE: If the intermediate result was 0x1A0 or more, then adding 0x60 would yield a result\r\n         * of 0x200 or more, but because the rest of the simulator tests regRC for 0x100, rather than\r\n         * comparing regRC for values >= 0x100, we'll miss the fact that there was a carry, unless we\r\n         * scale any value in the 0x200-0x2ff range down to 0x100-0x1ff.  We then assert that the\r\n         * resulting value is within the proper range.\r\n         */\r\n        if (r >= 0x200) r -= 0x100;\r\n\r\n\r\n        /*\r\n         * In BCD mode, the C flag reflects the decimal result, but the Z flag reflects binary addition.\r\n         */\r\n        this.regRC = r;\r\n        this.regRZ = ((reg + mem + carry) & 0xff);\r\n\r\n        /*\r\n         * Account for an extra cycle in BCD mode as well.\r\n         */\r\n        this.nStepCycles--;\r\n\r\n        return r & 0xff;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     * @param {number} reg\r\n     * @param {number} mem\r\n     * @returns {number}\r\n     *\r\n     * Refer to http://www.6502.org/tutorials/decimal_mode.html for 6502-specific details.\r\n     * Refer to http://homepage.cs.uiowa.edu/~jones/bcd/bcd.html for optimization tips.\r\n     */\r\n    subBCD(reg, mem)\r\n    {\r\n        var notcarry = ((this.regRC & 0x0100)? 0 : 1);\r\n\r\n        /*\r\n         * First subtract the low nibbles.\r\n         */\r\n        var r = (reg & 0x0f) - (mem & 0x0f) - notcarry;\r\n\r\n        /*\r\n         * Adjust the result. NOTE: The extra AND'ing and SUB'ing isn't necessary if we want to\r\n         * assume that ONLY valid BCD digits will be added, but we probably shouldn't assume that.\r\n         */\r\n        if (r < 0x00) r = ((r - 0x06) & 0x0f) - 0x10;\r\n\r\n        /*\r\n         * Now subtract the high nibbles.\r\n         */\r\n        r += (reg & 0xf0) - (mem & 0xf0);\r\n\r\n        /*\r\n         * Final adjustment.\r\n         */\r\n        if (r < 0x00) r -= 0x60;\r\n\r\n        /*\r\n         * In BCD mode, the Z -- and C, N and V -- flags are all set as if binary subtraction was performed.\r\n         */\r\n        // RC = (A - ML - !LAZY_C); SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = (this.regRC = (reg - mem - notcarry)) & 0xff;\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = reg ^ mem; this.regRV = this.regRC;\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n\r\n        /*\r\n         * Account for an extra cycle in BCD mode as well.\r\n         */\r\n        this.nStepCycles--;\r\n\r\n        return r & 0xff;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    clearRegs()\r\n    {\r\n        this.regA = 0;\r\n        this.regX = 0;\r\n        this.regY = 0;\r\n        this.regS = 0x100;\r\n        this.regP = 0;\r\n        this.regRN = 0;\r\n        this.regRZ = 0;\r\n        this.regRU = 0;\r\n        this.regRV = 0;\r\n        this.regRC = 0;\r\n        this.regPC = 0;\r\n        this.regEA = -1;\r\n        this.regEAWrite = -1;\r\n        this.mhz = 0;\r\n        this.nRunCycles = this.nBurstCycles = this.nStepCycles = 0;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBRK()\r\n    {   // opcode 0x00\r\n        // PC++;\r\n        this.regPC++;\r\n        // STACK(S--) = PCH;\r\n        this.abMem[this.regS--] = (this.regPC >> 8);\r\n        this.regS |= 0x100;\r\n        // STACK(S--) = PCL;\r\n        this.abMem[this.regS--] = (this.regPC & 0xff);\r\n        this.regS |= 0x100;\r\n        // B = 1;\r\n        this.regP |= 0x10;\r\n        // C = LAZY_C; Z = LAZY_Z; V = LAZY_V; N = LAZY_N;\r\n        this.regP = this.getRegP();\r\n        // STACK(S--) = P;\r\n        this.abMem[this.regS--] = this.regP;\r\n        this.regS |= 0x100;\r\n        // B = 0;\r\n        this.regP &= 0xef;\r\n        // EA = 0xFFFE;\r\n        this.regEA = 0xFFFE;\r\n        // PC = M;\r\n        this.regPC = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAindx()\r\n    {   // opcode 0x01\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA |= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAzp()\r\n    {   // opcode 0x05\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA |= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opASLzp()\r\n    {   // opcode 0x06\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // RC = ML << 1;\r\n        this.regRC = this.abMem[this.regEAWrite] << 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opPHP()\r\n    {   // opcode 0x08\r\n        this.regP = this.getRegP();\r\n        // STACK(S--) = P;\r\n        this.abMem[this.regS--] = this.regP;\r\n        this.regS |= 0x100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAimm()\r\n    {   // opcode 0x09\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA |= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opASLacc()\r\n    {   // opcode 0x0a\r\n        // RC = A << 1;\r\n        this.regRC = this.regA << 1;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAabs()\r\n    {   // opcode 0x0d\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA |= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opASLabs()\r\n    {   // opcode 0x0e\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RC = ML << 1;\r\n        this.regRC = this.abMem[this.regEAWrite] << 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBPL()\r\n    {   // opcode 0x10\r\n        // PC = PC + (LAZY_N == 0? SBYTE(PC) : 0) + 1;\r\n        this.regPC += (!(this.regRN & 0x80)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAindy()\r\n    {   // opcode 0x11\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA |= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAzpx()\r\n    {   // opcode 0x15\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA |= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opASLzpx()\r\n    {   // opcode 0x16\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // RC = ML << 1;\r\n        this.regRC = this.abMem[this.regEAWrite] << 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCLC()\r\n    {   // opcode 0x18\r\n        // SET_LAZY_C(0);\r\n        this.regRC = 0x00;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAabsy()\r\n    {   // opcode 0x19\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA |= this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opORAabsx()\r\n    {   // opcode 0x1d\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // A = A | ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA |= this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opASLabsx()\r\n    {   // opcode 0x1e\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // RC = ML << 1;\r\n        this.regRC = this.abMem[this.regEAWrite] << 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opJSRabs()\r\n    {   // opcode 0x20\r\n        // EA = PC; PC += 1;\r\n        this.regEA = this.regPC++;\r\n        // STACK(S--) = PCH;\r\n        this.abMem[this.regS--] = (this.regPC >> 8);\r\n        this.regS |= 0x100;\r\n        // STACK(S--) = PCL;\r\n        this.abMem[this.regS--] = (this.regPC & 0xff);\r\n        this.regS |= 0x100;\r\n        // PC = M;\r\n        this.regPC = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDindx()\r\n    {   // opcode 0x21\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBITzp()\r\n    {   // opcode 0x24\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // SET_LAZY_Z((A & ML) == 0);\r\n        this.regRZ = (this.regA & this.abMem[this.regEA]);\r\n        // SET_LAZY_N(ML7);\r\n        this.regRN = ((this.regRN & 0x7f) | (this.abMem[this.regEA] & 0x80));\r\n        // SET_LAZY_V(ML6);\r\n        this.regRV = 0; this.regRU = ((this.abMem[this.regEA] & 0x40)? 0x80 : 0x00);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDzp()\r\n    {   // opcode 0x25\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opROLzp()\r\n    {   // opcode 0x26\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RC = RC << 1;\r\n        this.regRC <<= 1;\r\n        // RCL0 = RCH1;\r\n        this.regRC = ((this.regRC & 0xfffe) | (((this.regRC & 0x0200))? 0x0001 : 0));\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opPLP()\r\n    {   // opcode 0x28\r\n        // P = STACK(++S);\r\n        this.regS = ((this.regS+1) & 0xff) | 0x100;\r\n        this.regP = this.abMem[this.regS];\r\n        // SET_LAZY_C(C);\r\n        this.regRC = ((this.regP & 0x01)? 0x0100 : 0);\r\n        // SET_LAZY_Z(Z);\r\n        this.regRZ = (!(this.regP & 0x02)? 0x01 : 0);\r\n        // SET_LAZY_N(N);\r\n        this.regRN = (this.regP & 0x80);\r\n        // SET_LAZY_V(V);\r\n        this.regRV = 0; this.regRU = ((this.regP & 0x40)? 0x80 : 0x00);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDimm()\r\n    {   // opcode 0x29\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opROLacc()\r\n    {   // opcode 0x2a\r\n        // RCL =  A;\r\n        this.regRC = ((this.regRC & 0xff00) | this.regA);\r\n        // RC = RC << 1;\r\n        this.regRC <<= 1;\r\n        // RCL0 = RCH1;\r\n        this.regRC = ((this.regRC & 0xfffe) | ((this.regRC & 0x0200)? 0x0001 : 0));\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBITabs()\r\n    {   // opcode 0x2c\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // SET_LAZY_Z((A & ML) == 0);\r\n        this.regRZ = (this.regA & this.abMem[this.regEA]);\r\n        // SET_LAZY_N(ML7);\r\n        this.regRN = ((this.regRN & 0x7f) | (this.abMem[this.regEA] & 0x80));\r\n        // SET_LAZY_V(ML6);\r\n        this.regRV = 0; this.regRU = ((this.abMem[this.regEA] & 0x40)? 0x80 : 0x00);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDabs()\r\n    {   // opcode 0x2d\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opROLabs()\r\n    {   // opcode 0x2e\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RC = RC << 1;\r\n        this.regRC <<= 1;\r\n        // RCL0 = RCH1;\r\n        this.regRC = ((this.regRC & 0xfffe) | (((this.regRC & 0x0200))? 0x0001 : 0));\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBMI()\r\n    {   // opcode 0x30\r\n        // PC = PC + (LAZY_N != 0? SBYTE(PC) : 0) + 1;\r\n        this.regPC += ((this.regRN & 0x80)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDindy()\r\n    {   // opcode 0x31\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDzpx()\r\n    {   // opcode 0x35\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opROLzpx()\r\n    {   // opcode 0x36\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RC = RC << 1;\r\n        this.regRC <<= 1;\r\n        // RCL0 = RCH1;\r\n        this.regRC = ((this.regRC & 0xfffe) | (((this.regRC & 0x0200))? 0x0001 : 0));\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSEC()\r\n    {   // opcode 0x38\r\n        // SET_LAZY_C(1);\r\n        this.regRC = 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDabsy()\r\n    {   // opcode 0x39\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opANDabsx()\r\n    {   // opcode 0x3d\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // A = A & ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA &= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opROLabsx()\r\n    {   // opcode 0x3e\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RC = RC << 1;\r\n        this.regRC <<= 1;\r\n        // RCL0 = RCH1;\r\n        this.regRC = ((this.regRC & 0xfffe) | (((this.regRC & 0x0200))? 0x0001 : 0));\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opRTI()\r\n    {   // opcode 0x40\r\n        // P = STACK(++S);\r\n        this.regS = ((this.regS+1) & 0xff) | 0x100;\r\n        this.regP = this.abMem[this.regS];\r\n        // SET_LAZY_C(C);\r\n        this.regRC = ((this.regP & 0x01)? 0x0100 : 0);\r\n        // SET_LAZY_Z(Z);\r\n        this.regRZ = (!(this.regP & 0x02)? 0x01 : 0);\r\n        // SET_LAZY_N(N);\r\n        this.regRN = (this.regP & 0x80);\r\n        // SET_LAZY_V(V);\r\n        this.regRV = 0; this.regRU = ((this.regP & 0x40)? 0x80 : 0x00);\r\n        // PCL = STACK(++S);\r\n        // PCH = STACK(++S);\r\n        this.regS = ((this.regS+2) & 0xff) | 0x100;\r\n        this.regPC = (this.abMem[(this.regS-1) | 0x100]) | (this.abMem[this.regS] << 8);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORindx()\r\n    {   // opcode 0x41\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // A = A ^ ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORzp()\r\n    {   // opcode 0x45\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // A = A ^ ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLSRzp()\r\n    {   // opcode 0x46\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // SET_LAZY_C(ML0);\r\n        this.regRC = ((this.regRC & 0xfeff) | ((this.abMem[this.regEAWrite] & 0x01)? 0x0100 : 0));\r\n        // ML = RCL = ML >> 1;\r\n        this.abMem[this.regEAWrite] = ((this.regRC = ((this.regRC & 0xff00) | (this.abMem[this.regEAWrite] >> 1))) & 0xff);\r\n        // SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = (this.regRC & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opPHA()\r\n    {   // opcode 0x48\r\n        // STACK(S--) = A;\r\n        this.abMem[this.regS--] = this.regA;\r\n        this.regS |= 0x100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORimm()\r\n    {   // opcode 0x49\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // A = A ^ ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLSRacc()\r\n    {   // opcode 0x4a\r\n        // SET_LAZY_C( A0);\r\n        this.regRC = ((this.regRC & 0xfeff) | ((this.regA & 0x01)? 0x0100 : 0));\r\n        // A = RCL =  A >> 1;\r\n        this.regA = ((this.regRC = ((this.regRC & 0xff00) | (this.regA >> 1))) & 0xff);\r\n        // SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opJMPimm16()\r\n    {   // opcode 0x4c\r\n        // EA = PC;\r\n        this.regEA = this.regPC;\r\n        // PC += 2;\r\n        // this.regPC += 2;\r\n        // PC = M;\r\n        this.regPC = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORabs()\r\n    {   // opcode 0x4d\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // A = A ^ ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLSRabs()\r\n    {   // opcode 0x4e\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // SET_LAZY_C(ML0);\r\n        this.regRC = ((this.regRC & 0xfeff) | ((this.abMem[this.regEAWrite] & 0x01)? 0x0100 : 0));\r\n        // ML = RCL = ML >> 1;\r\n        this.abMem[this.regEAWrite] = ((this.regRC = ((this.regRC & 0xff00) | (this.abMem[this.regEAWrite] >> 1))) & 0xff);\r\n        // SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBVC()\r\n    {   // opcode 0x50\r\n        // PC = PC + (LAZY_V == 0? SBYTE(PC) : 0) + 1;\r\n        this.regPC += (!((((this.regRV & 0xff) ^ this.regRU) ^ (this.regRV >> 1)) & 0x80)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORindy()\r\n    {   // opcode 0x51\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = this.abMem[this.regPC++];\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // A = A ^ ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORzpx()\r\n    {   // opcode 0x55\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // A = A ^ ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLSRzpx()\r\n    {   // opcode 0x56\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // SET_LAZY_C(ML0);\r\n        this.regRC = ((this.regRC & 0xfeff) | ((this.abMem[this.regEAWrite] & 0x01)? 0x0100 : 0));\r\n        // ML = RCL = ML >> 1;\r\n        this.abMem[this.regEAWrite] = ((this.regRC = ((this.regRC & 0xff00) | (this.abMem[this.regEAWrite] >> 1))) & 0xff);\r\n        // SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = (this.regRC & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCLI()\r\n    {   // opcode 0x58\r\n        // I = 0;\r\n        this.regP &= 0xfb;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORabsy()\r\n    {   // opcode 0x59\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // A = A ^ ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opEORabsx()\r\n    {   // opcode 0x5d\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // A = A ^ ML; SET_LAZY_NZ(A)\r\n        this.regRN = this.regRZ = (this.regA ^= this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLSRabsx()\r\n    {   // opcode 0x5e\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // SET_LAZY_C(ML0);\r\n        this.regRC = ((this.regRC & 0xfeff) | ((this.abMem[this.regEAWrite] & 0x01)? 0x0100 : 0));\r\n        // ML = RCL = ML >> 1;\r\n        this.abMem[this.regEAWrite] = ((this.regRC = ((this.regRC & 0xff00) | (this.abMem[this.regEAWrite] >> 1))) & 0xff);\r\n        // SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opRTS()\r\n    {   // opcode 0x60\r\n        // PCL = STACK(++S);\r\n        // PCH = STACK(++S);\r\n        // PC++;\r\n        this.regS = ((this.regS+2) & 0xff) | 0x100;\r\n        this.regPC = (((this.abMem[(this.regS-1) | 0x100])) | ((this.abMem[this.regS]) << 8)) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCindx()\r\n    {   // opcode 0x61\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC = (this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCindxBCD()\r\n    {   // opcode 0x61\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCzp()\r\n    {   // opcode 0x65\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC = (this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCzpBCD()\r\n    {   // opcode 0x65\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opRORzp()\r\n    {   // opcode 0x66\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RCH1 = RCL0;\r\n        this.regRC = ((this.regRC & 0xfdff) | ((this.regRC & 0x0001)? 0x0200 : 0));\r\n        // RC = RC >> 1;\r\n        this.regRC >>= 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opPLA()\r\n    {   // opcode 0x68\r\n        // A = STACK(++S); SET_LAZY_NZ(A);\r\n        this.regS = ((this.regS+1) & 0xff) | 0x100;\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regS];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCimm()\r\n    {   // opcode 0x69\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC = (this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCimmBCD()\r\n    {   // opcode 0x69\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opRORacc()\r\n    {   // opcode 0x6a\r\n        // RCL =  A;\r\n        this.regRC = ((this.regRC & 0xff00) | this.regA);\r\n        // RCH1 = RCL0;\r\n        this.regRC = ((this.regRC & 0xfdff) | ((this.regRC & 0x0001)? 0x0200 : 0));\r\n        // RC = RC >> 1;\r\n        this.regRC >>= 1;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     *\r\n     * NOTE from Wikipedia: \"The 6502's memory indirect jump instruction, JMP (<address>), is partially broken.\r\n     * If <address> is hex xxFF (i.e., any word ending in FF), the processor will not jump to the address stored in xxFF and xxFF+1 as expected,\r\n     * but rather the one defined by xxFF and xx00. This defect continued through the entire NMOS line, but was corrected in the CMOS derivatives.\"\r\n     */\r\n    opJMPabs16()\r\n    {   // opcode 0x6c\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // PC = M;\r\n        this.regPC = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCabs()\r\n    {   // opcode 0x6d\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC =(this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCabsBCD()\r\n    {   // opcode 0x6d\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opRORabs()\r\n    {   // opcode 0x6e\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RCH1 = RCL0;\r\n        this.regRC = ((this.regRC & 0xfdff) | ((this.regRC & 0x0001)? 0x0200 : 0));\r\n        // RC = RC >> 1;\r\n        this.regRC >>= 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBVS()\r\n    {   // opcode 0x70\r\n        // PC = PC + (LAZY_V != 0? SBYTE(PC) : 0) + 1;\r\n        this.regPC += (((((this.regRV & 0xff) ^ this.regRU) ^ (this.regRV >> 1)) & 0x80)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCindy()\r\n    {   // opcode 0x71\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC = (this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCindyBCD()\r\n    {   // opcode 0x71\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCzpx()\r\n    {   // opcode 0x75\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC = (this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCzpxBCD()\r\n    {   // opcode 0x75\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opRORzpx()\r\n    {   // opcode 0x76\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RCH1 = RCL0;\r\n        this.regRC = ((this.regRC & 0xfdff) | ((this.regRC & 0x0001)? 0x0200 : 0));\r\n        // RC = RC >> 1;\r\n        this.regRC >>= 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSEI()\r\n    {   // opcode 0x78\r\n        // I = 1;\r\n        this.regP |= 0x04;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCabsy()\r\n    {   // opcode 0x79\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC = (this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCabsyBCD()\r\n    {   // opcode 0x79\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCabsx()\r\n    {   // opcode 0x7d\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // RC = (A + ML + LAZY_C);\r\n        this.regRC = (this.regA + this.abMem[this.regEA] + ((this.regRC & 0x0100)? 1 : 0));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opADCabsxBCD()\r\n    {   // opcode 0x7d\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // A = this.addBCD(A,ML);\r\n        this.regA = this.addBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opRORabsx()\r\n    {   // opcode 0x7e\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // RCL = ML;\r\n        this.regRC = ((this.regRC & 0xff00) | this.abMem[this.regEAWrite]);\r\n        // RCH1 = RCL0;\r\n        this.regRC = ((this.regRC & 0xfdff) | ((this.regRC & 0x0001)? 0x0200 : 0));\r\n        // RC = RC >> 1;\r\n        this.regRC >>= 1;\r\n        // ML = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = (this.regRC & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTAindx()\r\n    {   // opcode 0x81\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEAWrite = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regEAWrite] | (this.abMem[this.regEAWrite+1] << 8));\r\n        // ML = A;\r\n        this.abMem[this.regEAWrite] = this.regA;\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTYzp()\r\n    {   // opcode 0x84\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // ML = Y;\r\n        this.abMem[this.regEAWrite] = this.regY;\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTAzp()\r\n    {   // opcode 0x85\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // ML = A;\r\n        this.abMem[this.regEAWrite] = this.regA;\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTXzp()\r\n    {   // opcode 0x86\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // ML = X;\r\n        this.abMem[this.regEAWrite] = this.regX;\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opDEY()\r\n    {   // opcode 0x88\r\n        // Y = ((Y - 1) & 0xff);\r\n        this.regY = ((this.regY - 1) & 0xff);\r\n        // SET_LAZY_NZ(Y);\r\n        this.regRN = this.regRZ = (this.regY);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opTXA()\r\n    {   // opcode 0x8a\r\n        // A = X; SET_LAZY_NZ(X);\r\n        this.regRN = this.regRZ = this.regA = this.regX;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTYabs()\r\n    {   // opcode 0x8c\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // ML = Y;\r\n        this.abMem[this.regEAWrite] = this.regY;\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTAabs()\r\n    {   // opcode 0x8d\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // ML = A;\r\n        this.abMem[this.regEAWrite] = this.regA;\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTXabs()\r\n    {   // opcode 0x8e\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // ML = X;\r\n        this.abMem[this.regEAWrite] = this.regX;\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBCC()\r\n    {   // opcode 0x90\r\n        // PC = PC + (LAZY_C == 0? SBYTE(PC) : 0) + 1;\r\n        this.regPC += (!(this.regRC & 0x0100)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTAindy()\r\n    {   // opcode 0x91\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEAWrite = (this.abMem[this.regPC++]);\r\n        this.regEAWrite = (this.abMem[this.regEAWrite] | (this.abMem[this.regEAWrite+1] << 8)) + this.regY;\r\n        // ML = A;\r\n        this.abMem[this.regEAWrite] = this.regA;\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTYzpx()\r\n    {   // opcode 0x94\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // ML = Y;\r\n        this.abMem[this.regEAWrite] = this.regY;\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTAzpx()\r\n    {   // opcode 0x95\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // ML = A;\r\n        this.abMem[this.regEAWrite] = this.regA;\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTXzpy()\r\n    {   // opcode 0x96\r\n        // EA = (BYTE(PC++)+Y) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regY) & 0xff;\r\n        // ML = X;\r\n        this.abMem[this.regEAWrite] = this.regX;\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opTYA()\r\n    {   // opcode 0x98\r\n        // A = Y; SET_LAZY_NZ(Y);\r\n        this.regRN = this.regRZ = this.regA = this.regY;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTAabsy()\r\n    {   // opcode 0x99\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // ML = A;\r\n        this.abMem[this.regEAWrite] = this.regA;\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opTXS()\r\n    {   // opcode 0x9a\r\n        // S = X;\r\n        this.regS = this.regX | 0x100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSTAabsx()\r\n    {   // opcode 0x9d\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // ML = A;\r\n        this.abMem[this.regEAWrite] = this.regA;\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDYimm()\r\n    {   // opcode 0xa0\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // Y = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regY = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAindx()\r\n    {   // opcode 0xa1\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // A = ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDXimm()\r\n    {   // opcode 0xa2\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // X = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regX = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDYzp()\r\n    {   // opcode 0xa4\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // Y = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regY = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAzp()\r\n    {   // opcode 0xa5\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // A = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDXzp()\r\n    {   // opcode 0xa6\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // X = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regX = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opTAY()\r\n    {   // opcode 0xa8\r\n        // Y = A; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regY = this.regA;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAimm()\r\n    {   // opcode 0xa9\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // A = ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opTAX()\r\n    {   // opcode 0xaa\r\n        // X = A; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regX = this.regA;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDYabs()\r\n    {   // opcode 0xac\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // Y = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regY = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAabs()\r\n    {   // opcode 0xad\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // A = ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDXabs()\r\n    {   // opcode 0xae\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // X = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regX = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBCS()\r\n    {   // opcode 0xb0\r\n        // PC = PC + (LAZY_C != 0? SBYTE(PC) : 0) + 1;\r\n        this.regPC += ((this.regRC & 0x0100)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAindy()\r\n    {   // opcode 0xb1\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // A = ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDYzpx()\r\n    {   // opcode 0xb4\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // Y = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regY = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAzpx()\r\n    {   // opcode 0xb5\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // A = ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDXzpy()\r\n    {   // opcode 0xb6\r\n        // EA = (BYTE(PC++)+Y) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regY) & 0xff;\r\n        // X = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regX = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCLV()\r\n    {   // opcode 0xb8\r\n        // SET_LAZY_V(0);\r\n        this.regRV = 0; this.regRU = 0;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAabsy()\r\n    {   // opcode 0xb9\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // A = ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opTSX()\r\n    {   // opcode 0xba\r\n        // X = S; SET_LAZY_NZ(S);\r\n        this.regRN = this.regRZ = this.regX = this.regS & 0xff;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDYabsx()\r\n    {   // opcode 0xbc\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // Y = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regY = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDAabsx()\r\n    {   // opcode 0xbd\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // A = ML; SET_LAZY_NZ(A);\r\n        this.regRN = this.regRZ = this.regA = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opLDXabsy()\r\n    {   // opcode 0xbe\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // X = ML; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.regX = this.abMem[this.regEA];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCPYimm()\r\n    {   // opcode 0xc0\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // RC = Y - ML;\r\n        this.regRC = this.regY - this.abMem[this.regEA];\r\n        // SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = (this.regRC);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPindx()\r\n    {   // opcode 0xc1\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCPYzp()\r\n    {   // opcode 0xc4\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // RC = Y - ML;\r\n        this.regRC = this.regY - this.abMem[this.regEA];\r\n        // SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = (this.regRC);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPzp()\r\n    {   // opcode 0xc5\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opDECzp()\r\n    {   // opcode 0xc6\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // ML = ML - 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] - 1) & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opINY()\r\n    {   // opcode 0xc8\r\n        // Y = ((Y + 1) & 0xff);\r\n        this.regY = ((this.regY + 1) & 0xff);\r\n        // SET_LAZY_NZ(Y);\r\n        this.regRN = this.regRZ = (this.regY);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPimm()\r\n    {   // opcode 0xc9\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opDEX()\r\n    {   // opcode 0xca\r\n        // X = ((X - 1) & 0xff); SET_LAZY_NZ(X);\r\n        this.regRN = this.regRZ = this.regX = ((this.regX - 1) & 0xff);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCPYabs()\r\n    {   // opcode 0xcc\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RC = Y - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = this.regY - this.abMem[this.regEA];\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPabs()\r\n    {   // opcode 0xcd\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opDECabs()\r\n    {   // opcode 0xce\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // ML = ML - 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] - 1) & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBNE()\r\n    {   // opcode 0xd0\r\n        // PC = PC + (LAZY_Z == 0? SBYTE(PC) : 0) + 1;\r\n        this.regPC += ((this.regRZ & 0xff)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPindy()\r\n    {   // opcode 0xd1\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPzpx()\r\n    {   // opcode 0xd5\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opDECzpx()\r\n    {   // opcode 0xd6\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // ML = ML - 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] - 1) & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCLD()\r\n    {   // opcode 0xd8\r\n        // D = 0;\r\n        this.clearBCD();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPabsy()\r\n    {   // opcode 0xd9\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCMPabsx()\r\n    {   // opcode 0xdd\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // RC = A - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = (this.regA - this.abMem[this.regEA]);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opDECabsx()\r\n    {   // opcode 0xde\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // ML = ML - 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] - 1) & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCPXimm()\r\n    {   // opcode 0xe0\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // RC = X - ML;\r\n        this.regRC = this.regX - this.abMem[this.regEA];\r\n        // SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = (this.regRC);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCindx()\r\n    {   // opcode 0xe1\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCindxBCD()\r\n    {   // opcode 0xe1\r\n        // EA = WORD((BYTE(PC++)+X) & 0xff);\r\n        this.regEA = ((this.abMem[this.regPC++]) + this.regX) & 0xff;\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8));\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCPXzp()\r\n    {   // opcode 0xe4\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // RC = X - ML;\r\n        this.regRC = this.regX - this.abMem[this.regEA];\r\n        // SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = (this.regRC);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCzp()\r\n    {   // opcode 0xe5\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCzpBCD()\r\n    {   // opcode 0xe5\r\n        // EA = BYTE(PC++);\r\n        this.regEA = this.abMem[this.regPC++];\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opINCzp()\r\n    {   // opcode 0xe6\r\n        // EA = BYTE(PC++);\r\n        this.regEAWrite = this.abMem[this.regPC++];\r\n        // ML = ML + 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] + 1) & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opINX()\r\n    {   // opcode 0xe8\r\n        // X = ((X + 1) & 0xff);\r\n        this.regX = ((this.regX + 1) & 0xff);\r\n        // SET_LAZY_NZ(X);\r\n        this.regRN = this.regRZ = (this.regX);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCimm()\r\n    {   // opcode 0xe9\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCimmBCD()\r\n    {   // opcode 0xe9\r\n        // EA = PC++;\r\n        this.regEA = this.regPC++;\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opNOP()\r\n    {   // opcode 0xea\r\n        //\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opCPXabs()\r\n    {   // opcode 0xec\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RC = X - ML; SET_LAZY_NZ(RC);\r\n        this.regRN = this.regRZ = this.regRC = this.regX - this.abMem[this.regEA];\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCabs()\r\n    {   // opcode 0xed\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCabsBCD()\r\n    {   // opcode 0xed\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opINCabs()\r\n    {   // opcode 0xee\r\n        // EA = WORD(PC); PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n        // ML = ML + 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] + 1) & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opBEQ()\r\n    {   // opcode 0xf0\r\n        // PC = PC + (LAZY_Z == 1? SBYTE(PC) : 0) + 1;\r\n        this.regPC += (!(this.regRZ & 0xff)? (this.nStepCycles--,((this.abMem[this.regPC] << 24) >> 24)) : 0) + 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCindy()\r\n    {   // opcode 0xf1\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCindyBCD()\r\n    {   // opcode 0xf1\r\n        // EA = WORD(BYTE(PC++))+Y;\r\n        this.regEA = (this.abMem[this.regPC++]);\r\n        this.regEA = (this.abMem[this.regEA] | (this.abMem[this.regEA+1] << 8)) + this.regY;\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCzpx()\r\n    {   // opcode 0xf5\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCzpxBCD()\r\n    {   // opcode 0xf5\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEA = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opINCzpx()\r\n    {   // opcode 0xf6\r\n        // EA = (BYTE(PC++)+X) & 0xff;\r\n        this.regEAWrite = (this.abMem[this.regPC++]+this.regX) & 0xff;\r\n        // ML = ML + 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] + 1) & 0xff);\r\n        // W = 1;\r\n        // NOTE: Consider alternatives for tracking zero-page writes (eg, regEAWriteZP)\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSED()\r\n    {   // opcode 0xf8\r\n        // D = 1;\r\n        this.setBCD();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCabsy()\r\n    {   // opcode 0xf9\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCabsyBCD()\r\n    {   // opcode 0xf9\r\n        // EA = WORD(PC)+Y; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regY;\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCabsx()\r\n    {   // opcode 0xfd\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // RC = (A - ML - !LAZY_C);\r\n        this.regRC = (this.regA - this.abMem[this.regEA] - ((this.regRC & 0x0100)? 0 : 1));\r\n        // SET_LAZY_OV(A,ML,RC);\r\n        this.regRU = this.regA ^ this.abMem[this.regEA]; this.regRV = this.regRC;\r\n        // A = RCL; SET_LAZY_NZ(RCL);\r\n        this.regRN = this.regRZ = this.regA = (this.regRC & 0xff);\r\n        // SET_LAZY_C(!LAZY_C);\r\n        this.regRC ^= 0x0100;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSBCabsxBCD()\r\n    {   // opcode 0xfd\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEA = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // A = this.subBCD(A,ML);\r\n        this.regA = this.subBCD(this.regA, this.abMem[this.regEA]);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opINCabsx()\r\n    {   // opcode 0xfe\r\n        // EA = WORD(PC)+X; PC += 2;\r\n        this.regEAWrite = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8)) + this.regX;\r\n        // ML = ML + 1; SET_LAZY_NZ(ML);\r\n        this.regRN = this.regRZ = this.abMem[this.regEAWrite] = ((this.abMem[this.regEAWrite] + 1) & 0xff);\r\n        // W = 1;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opSim()\r\n    {\r\n        var addr;\r\n        var bSimOp = this.abMem[this.regPC++];\r\n        switch(bSimOp) {\r\n\r\n            case this.SIMOP_HLT:\r\n                this.printf(\"HALT\\n\");\r\n                this.halt();\r\n                break;\r\n\r\n            case this.SIMOP_MSG:\r\n                addr = this.regPC;                  // currently we're using \"inline\" strings\r\n                // addr = (this.abMem[this.regPC++] | (this.abMem[this.regPC++] << 8));\r\n                var s = \"\";\r\n                while (addr < this.abMem.length) {\r\n                    var b = this.abMem[addr++];\r\n                    if (!b) break;\r\n                    s += String.fromCharCode(b);\r\n                }\r\n                this.regPC = addr;                  // update regPC as long as we're doing \"inline\" strings\r\n                /*\r\n                 * Before simply printing the string, what kinds of handy substitutions should we provide?\r\n                 *\r\n                 *      eg: %A for this.regA, %X for this.regX, etc\r\n                 */\r\n                s = s.replace(/%A/g, StrLib.toHex(this.regA, 2)).replace(/%X/g, StrLib.toHex(this.regX, 2)).replace(/%Y/g, StrLib.toHex(this.regY, 2));\r\n                this.printf(\"%s\\n\", s);\r\n                /*\r\n                 * To make printing \"smoother\", let's force a yield\r\n                 */\r\n                this.yieldCPU();\r\n                break;\r\n\r\n            default:\r\n                this.regPC -= 2;\r\n                this.printf(\"undefined opSim: %#04x at %#06x\\n\", bSimOp, this.regPC);\r\n                this.halt();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PCPU}\r\n     */\r\n    opUndefined()\r\n    {\r\n        var b = this.abMem[--this.regPC];\r\n        this.printf(\"undefined opcode: %#04x at %#06x\\n\", b, this.regPC);\r\n        this.halt();\r\n    }\r\n\r\n    /**\r\n     * C1PCPU.init()\r\n     *\r\n     * This function operates on every HTML element of class \"cpu\", extracting the\r\n     * JSON-encoded parameters for the C1PCPU constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PCPU component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeCPUs = Component.getElementsByClass(APPCLASS, \"cpu\");\r\n        for (var iCPU=0; iCPU < aeCPUs.length; iCPU++) {\r\n            var eCPU = aeCPUs[iCPU];\r\n            var parmsCPU = Component.getComponentParms(eCPU);\r\n            var cpu = new C1PCPU(parmsCPU);\r\n            Component.bindComponentControls(cpu, eCPU, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Macro reference (from my original 1998 C source code, preserved in the comments below):\r\n *\r\n *      #define BYTE(a)  (abMem[(a) & 0xffff])\r\n *      #define WORD(a)  (*(word *)&BYTE(a))\r\n *      #define SBYTE(a) ((int)(char)BYTE(a))\r\n *      #define STACK(a) BYTE(((a) & 0xff)+0x100)\r\n *      #define M WORD(EA)\r\n *      #define ML BYTE(EA+0)\r\n *      #define MH BYTE(EA+1)\r\n *      #define A (aRegs[0].value)  // 8 bits\r\n *      #define X (aRegs[1].value)  // 8 bits\r\n *      #define Y (aRegs[2].value)  // 8 bits\r\n *      #define S (aRegs[3].value)  // 8 bits\r\n *      #define P (aRegs[4].value)  // 8 bits\r\n *      #define RN (aRegs[5].value) // 8 bits\r\n *      #define RZ (aRegs[6].value) // 8 bits\r\n *      #define RU (aRegs[7].value) // 8 bits\r\n *      #define RV (aRegs[8].value) // 16 bits\r\n *      #define RC (aRegs[9].value) // 16 bits\r\n *      #define EA (aRegs[10].value)// 16 bits\r\n *      #define LA (aRegs[11].value)// 16 bits\r\n *      #define PC (aRegs[12].value)// 16 bits\r\n *      #define EF (aRegs[13].value)// 8 bits\r\n *      #define C P0\r\n *      #define Z P1\r\n *      #define I P2\r\n *      #define D P3\r\n *      #define B P4\r\n *      #define V P6\r\n *      #define N P7\r\n *      #define W EF0\r\n *      #define LAZY_C (RCH0)\r\n *      #define SET_LAZY_C(b) (RCH0 = (b))\r\n *      #define LAZY_N (RN7)\r\n *      #define SET_LAZY_N(b) (RN7 = (b))\r\n *      #define SET_LAZY_NZ(v) (RN = RZ = (v))\r\n *      #define LAZY_Z ((byte)RZ == 0)\r\n *      #define SET_LAZY_Z(b) (RZ = !(b))\r\n *      #define LAZY_V ((((RVL ^ RU) ^ (RV >> 1)) & 0x80) != 0)\r\n *      #define SET_LAZY_V(b) (RV = 0, RU = ((b)? 0x80 : 0x00))\r\n *      #define SET_LAZY_OV(a,b,r) (RU = (a) ^ (b), RV = (r))\r\n */\r\n\r\n/*\r\n * Initialize every CPU module on the page (as IF there's ever going to be more than one ;-))\r\n */\r\nWebLib.onInit(C1PCPU.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/rom.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PROM\r\n * @unrestricted\r\n */\r\nclass C1PROM extends Component {\r\n    /**\r\n     * C1PROM(parmsROM)\r\n     *\r\n     * The ROM component expects the following (parmsROM) properties:\r\n     *\r\n     *      'size': size of ROM, in bytes\r\n     *      'file': name of ROM image file (prior to v1.76, this was 'image')\r\n     *\r\n     * NOTE: The final location for the ROM image, once loaded, will be specified\r\n     * by the Computer object, using the setBuffer() method.\r\n     *\r\n     * @this {C1PROM}\r\n     * @param {Object} parmsROM\r\n     * @property {function()} convertImage\r\n     */\r\n    constructor(parmsROM)\r\n    {\r\n        super(\"C1PROM\", parmsROM);\r\n\r\n        this.abMem = null;\r\n        this.abImage = null;\r\n        this.cbROM = +parmsROM['size'];\r\n        this.sImage = parmsROM['file'] || parmsROM['image'];\r\n        if (this.sImage) {\r\n            var sFileURL = this.sImage;\r\n            /**\r\n             * If the selected ROM image has a \".json\" extension, then we assume it's a pre-converted\r\n             * JSON-encoded ROM image, so we load it as-is; ditto for files with a \".hex\" extension. Otherwise,\r\n             * we ask our server-side ROM image converter to return the corresponding JSON-encoded data,\r\n             * in compact form (ie, minimal whitespace, no ASCII data comments, etc).\r\n             */\r\n            var sFileExt = StrLib.getExtension(this.sImage);\r\n            if (sFileExt != DumpAPI.FORMAT.JSON && sFileExt != DumpAPI.FORMAT.HEX) {\r\n                sFileURL = WebLib.getHostOrigin() + DumpAPI.ENDPOINT + '?' + DumpAPI.QUERY.FILE + '=' + this.sImage + '&' + DumpAPI.QUERY.FORMAT + '=' + DumpAPI.FORMAT.BYTES;\r\n            }\r\n            var rom = this;\r\n            WebLib.getResource(sFileURL, null, true, function(sURL, sResponse, nErrorCode) {\r\n                rom.convertImage(sURL, sResponse, nErrorCode);\r\n            });\r\n            return;\r\n        }\r\n        this.setReady();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PROM}\r\n     * @param {Array} abMemory\r\n     * @param {number} start\r\n     * @param {number} end\r\n     * @param {C1PCPU} cpu\r\n     */\r\n    setBuffer(abMemory, start, end, cpu)\r\n    {\r\n        this.abMem = abMemory;\r\n        this.offROM = start;\r\n        var cbROM = end - start + 1;\r\n        /*\r\n         * It's possible that the ROM component didn't specify a size,\r\n         * in which case just use the size the Computer component has specified.\r\n         */\r\n        if (!this.cbROM) {\r\n            this.cbROM = cbROM;\r\n        }\r\n        if (cbROM != this.cbROM) {\r\n            this.setError(\"computer-specified ROM size (\" + StrLib.toHexWord(cbROM) + \") does not match component-specified size (\" + StrLib.toHexWord(this.cbROM) + \")\");\r\n            return;\r\n        }\r\n        if (cpu) {\r\n            this.cpu = cpu;\r\n            cpu.addWriteNotify(start, end, this, this.setByte);\r\n        }\r\n        this.copyImage();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PROM}\r\n     * @param {boolean} fOn\r\n     * @param {C1PComputer} cmp\r\n     */\r\n    setPower(fOn, cmp)\r\n    {\r\n        if (fOn && !this.flags.powered) {\r\n            this.flags.powered = true;\r\n            if (DEBUGGER) this.dbg = cmp.getComponentByType(\"debugger\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PROM}\r\n     * @param {number} addr\r\n     * @param {number|undefined} [addrFrom]\r\n     */\r\n    setByte(addr, addrFrom)\r\n    {\r\n        /*\r\n         * Beyond reporting this write, we need to \"repair\" the ROM, using the original image data,\r\n         * but only if addrFrom is defined (undefined implies this is a write from the Debugger, and\r\n         * we need to allow the Debugger to modify ROM contents).\r\n         */\r\n        if (addrFrom !== undefined) {\r\n            if (DEBUGGER && this.dbg) this.dbg.messageIO(this, addr, addrFrom, this.dbg.MESSAGE_PORT, true);\r\n            var offset = (addr - this.offROM);\r\n\r\n            if (!this.abImage) {\r\n                this.abMem[this.offROM + offset] = 0;\r\n            } else {\r\n                this.abMem[this.offROM + offset] = this.abImage[offset];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PROM}\r\n     * @param {string} sImageName\r\n     * @param {string} sImageData\r\n     * @param {number} nErrorCode (response from server if anything other than 200)\r\n     */\r\n    convertImage(sImageName, sImageData, nErrorCode)\r\n    {\r\n        if (nErrorCode) {\r\n            this.printf(\"Error loading ROM \\\"%s\\\" (%d)\\n\", sImageName, nErrorCode);\r\n            return;\r\n        }\r\n        if (sImageData.charAt(0) == \"[\" || sImageData.charAt(0) == \"{\") {\r\n            try {\r\n                /*\r\n                 * The most likely source of any exception will be here: parsing the JSON-encoded ROM data.\r\n                 */\r\n                var rom = eval(\"(\" + sImageData + \")\");\r\n                var ab = rom['bytes'];\r\n                if (ab) {\r\n                    this.abImage = ab;\r\n                } else {\r\n                    this.abImage = rom;\r\n                }\r\n            } catch (e) {\r\n                this.printf(\"Error processing ROM \\\"%s\\\": %s\\n\", sImageName, e.message);\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            /*\r\n             * Parse the ROM image data manually; we assume it's in \"simplified\" hex form (a series of hex byte-values separated by whitespace)\r\n             */\r\n            var sData = sImageData.replace(/\\n/gm, \" \").replace(/ +$/, \"\");\r\n            var asData = sData.split(\" \");\r\n            this.abImage = new Array(asData.length);\r\n            for (var i=0; i < asData.length; i++) {\r\n                this.abImage[i] = parseInt(asData[i], 16);\r\n            }\r\n        }\r\n        this.copyImage();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PROM}\r\n     */\r\n    copyImage()\r\n    {\r\n        /*\r\n         * The Computer object may give us the address of the ROM image before we've finished downloading the image,\r\n         * so both setBuffer() and convertImage() call copyImage(), which in turn will copy the image ONLY when both\r\n         * pieces are in place.  At that point, the component becomes \"ready\", in much the same way that other components\r\n         * (eg, CPU and Screen) become \"ready\" when all their prerequisites are satisfied.\r\n         */\r\n        if (!this.isReady()) {\r\n            if (!this.sImage) {\r\n                this.setReady();\r\n            }\r\n            else\r\n            if (this.abImage && this.abMem) {\r\n                var cbImage = this.abImage.length;\r\n                if (cbImage != this.cbROM) {\r\n                    this.setError(\"ROM image size (\" + StrLib.toHexWord(cbImage) + \") does not match component-specified size (\" + StrLib.toHexWord(this.cbROM) + \")\");\r\n                    return;\r\n                }\r\n                if (DEBUG) this.printf(MESSAGE.LOG, \"copyImage(%#06x): %#06x bytes\\n\", this.offROM, cbImage);\r\n                for (var i=0; i < cbImage; i++) {\r\n                    this.abMem[this.offROM + i] = this.abImage[i];\r\n                }\r\n                this.setReady();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * C1PROM.init()\r\n     *\r\n     * This function operates on every HTML element of class \"rom\", extracting the\r\n     * JSON-encoded parameters for the C1PROM constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PROM component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeROM = Component.getElementsByClass(APPCLASS, \"rom\");\r\n        for (var iROM=0; iROM < aeROM.length; iROM++) {\r\n            var eROM = aeROM[iROM];\r\n            var parmsROM = Component.getComponentParms(eROM);\r\n            var rom = new C1PROM(parmsROM);\r\n            Component.bindComponentControls(rom, eROM, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialize all the ROM modules on the page.\r\n */\r\nWebLib.onInit(C1PROM.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/ram.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PRAM\r\n * @unrestricted\r\n */\r\nclass C1PRAM extends Component {\r\n    /**\r\n     * C1PRAM(parmsRAM)\r\n     *\r\n     * The RAM component expects the following (parmsRAM) properties:\r\n     *\r\n     *      size: amount of RAM, in bytes\r\n     *\r\n     * NOTE: We may make a note of the specified size, but we will not actually allocate\r\n     * any memory for the RAM; we wait for the Computer object to tell us where our RAM is,\r\n     * using the setBuffer() method.\r\n     *\r\n     * @this {C1PRAM}\r\n     * @param {Object} parmsRAM\r\n     */\r\n    constructor(parmsRAM)\r\n    {\r\n        super(\"C1PRAM\", parmsRAM);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PRAM}\r\n     * @param {Array} abMemory\r\n     * @param {number} start\r\n     * @param {number} end\r\n     * @param {C1PCPU} cpu\r\n     */\r\n    setBuffer(abMemory, start, end, cpu)\r\n    {\r\n        this.abMem = abMemory;\r\n     // this.offRAM = start;\r\n     // this.cbRAM = end - start + 1;\r\n        this.setReady();\r\n    }\r\n\r\n    /**\r\n     * C1PRAM.init()\r\n     *\r\n     * This function operates on every HTML element of class \"ram\", extracting the\r\n     * JSON-encoded parameters for the C1PRAM constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PRAM component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeRAM = Component.getElementsByClass(APPCLASS, \"ram\");\r\n        for (var iRAM=0; iRAM < aeRAM.length; iRAM++) {\r\n            var eRAM = aeRAM[iRAM];\r\n            var parmsRAM = Component.getComponentParms(eRAM);\r\n            var ram = new C1PRAM(parmsRAM);\r\n            Component.bindComponentControls(ram, eRAM, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialize all the RAM modules on the page.\r\n */\r\nWebLib.onInit(C1PRAM.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/keyboard.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PKeyboard\r\n * @unrestricted\r\n */\r\nclass C1PKeyboard extends Component {\r\n    /**\r\n     * C1PKeyboard(parmsKbd)\r\n     *\r\n     * The Keyboard component can be configured with the following (parmsKbd) properties:\r\n     *\r\n     *      model: model number (one of: 542 or 600; 600 is the default)\r\n     *\r\n     * Its main purpose is to receive binding requests for various keyboard events,\r\n     * and to use those events to simulate the C1P's keyboard hardware; specifically,\r\n     * an OSI model 600 board (NOT the model 542).\r\n     *\r\n     * Keys on the C1P keyboard that differ from modern keyboards, along with their\r\n     * closest modern counterpart:\r\n     *\r\n     *      C1P      PC\r\n     *      ---      --\r\n     *      2\"       2@\r\n     *      6&       6^\r\n     *      7'       7&\r\n     *      8(       8*\r\n     *      9)       9(\r\n     *      0        0)\r\n     *      :*       -_\r\n     *      -=       =+\r\n     *      ;+       ;:\r\n     *      LINEFEED CTRL-J\r\n     *      RETURN   ENTER (or CTRL-M)\r\n     *      SHIFT-O  DELETE (or CTRL-H)\r\n     *      SHIFT-N  ^\r\n     *      SHIFT-P  @ (used by the BASIC-IN-ROM to abandon the current line)\r\n     *      SHIFT-L  \\\r\n     *      SHIFT-K  [\r\n     *      SHIFT-M  ]\r\n     *      CTRL-C   Same (used by the BASIC-IN-ROM to interrupt RUN and LIST, unless disabled with POKE 530,1)\r\n     *      CTRL-O   Same (used by the BASIC-IN-ROM to suppress output until another CTRL-O is typed)\r\n     *      RUB-OUT  (no mapping chosen for this key yet)\r\n     *      REPEAT   (no mapping chosen for this key yet)\r\n     *\r\n     * Problems with iOS Devices\r\n     * -------------------------\r\n     * The keyboard pops up with the SHIFT key depressed, which is not the initial keyboard state that the C1P expects.\r\n     * I tried to fix that by adding an 'autocapitalize=\"off\"' attribute alongside the 'contenteditable=\"true\"' attribute\r\n     * on the <canvas> element, but apparently Safari v5 honors that only inside certain elements (eg, <input>).  The simplest\r\n     * work-around is to tap the iOS device's SHIFT key before starting to type, but I'd prefer an automatic solution.\r\n     *\r\n     * Another work-around might be to NEVER pass the real CAPS-LOCK state to the virtual machine, and whenever CAPS-LOCK is\r\n     * actually down, automatically \"uncapitalize\" all letters.\r\n     *\r\n     * However, the current work-around is for keyPressSimulate() to ALWAYS convert all alphabetic charCodes to their\r\n     * lower-case equivalents, and simply let the C1P's own shift-key logic do its thing.  Note that we do this ONLY for\r\n     * iOS devices, so that on all other devices, you can still use special shifted key combinations like SHIFT-O and SHIFT-P;\r\n     * this work-around breaks those key combinations for iOS devices, but that seems like a reasonable trade-off.\r\n     *\r\n     * Simple C1P Virtual Hardware Test\r\n     * --------------------------------\r\n     * Using the following code:\r\n     *\r\n     *      10 POKE 530,1\r\n     *      20 KEY=57088\r\n     *      25 Q=-1\r\n     *      30 POKE KEY,64\r\n     *      40 P=PEEK(KEY)\r\n     *      50 IF P<>Q THEN PRINT P\r\n     *      60 Q=P\r\n     *      70 GOTO 30\r\n     *\r\n     * The value 64 (0x40) should have enabled every row except R6.  Here were the results for keys\r\n     * on row R7:\r\n     *\r\n     *        1   2   3   4   5   6   7\r\n     *      --- --- --- --- --- --- ---\r\n     *      126 190 222 238 246 250 252\r\n     *\r\n     * Sure enough, none of the keys on R6 worked, and all the keys on rows R0-R5 generated the same\r\n     * values as R7. But why were the values read all EVEN instead of ODD (ie, why was bit 0 cleared as\r\n     * well?)  Answer: because 0x40 also enables keys on row R0, where the SHIFT-LOCK key resides,\r\n     * and since the SHIFT-LOCK is normally locked AND also sits in column C0, bit 0 will be clear as well.\r\n     *\r\n     * This explains why the \"STAR WARS\" game (SAMPLE4.BAS) expected values \"126,190,222,238,246,250\"\r\n     * for keys 1-6 after POKE'ing 64 into location 57088 (0xdf00), instead of the more typical values\r\n     * \"127,191,223,239,247,251.\"  This also means that anyone who happened to unlock their SHIFT-LOCK\r\n     * would have trouble playing that game.\r\n     *\r\n     * @this {C1PKeyboard}\r\n     * @param {Object} parmsKbd\r\n     */\r\n    constructor(parmsKbd)\r\n    {\r\n        super(\"C1PKeyboard\", parmsKbd);\r\n\r\n        this.flags.powered = false;\r\n        this.nDefaultModel = parmsKbd['model'];\r\n\r\n        /*\r\n         * keyCodes that I must pay particular attention to\r\n         */\r\n        this.KEYCODE_DELETE     = 0x08;\r\n        this.KEYCODE_TAB        = 0x09;\r\n        this.KEYCODE_LF         = 0x0A;\r\n        this.KEYCODE_CR         = 0x0D;\r\n        this.KEYCODE_SHIFT      = 0x10;                 // I map this to CHARCODE_LSHIFT\r\n        this.KEYCODE_CONTROL    = 0x11;\r\n        this.KEYCODE_ALT        = 0x12;                 // I map this to CHARCODE_RSHIFT (since the C1P keyboard has no ALT key)\r\n        this.KEYCODE_CAPSLOCK   = 0x14;\r\n        this.KEYCODE_ESC        = 0x1B;                 // NOTE: for some reason, this comes in via keyDown/keyUp only, not keyPress\r\n        this.KEYCODE_COMMAND    = 0x5B;\r\n\r\n        /*\r\n         * The following charCodes are the same as the corresponding keyCodes\r\n         */\r\n        this.CHARCODE_DELETE    = this.KEYCODE_DELETE;\r\n        this.CHARCODE_LF        = this.KEYCODE_LF;\r\n        this.CHARCODE_CR        = this.KEYCODE_CR;\r\n        this.CHARCODE_ESC       = this.KEYCODE_ESC;\r\n\r\n        /*\r\n         * The following charCodes are NOT the same as the corresponding keyCodes, hence the bias (PSEUDO_CHARCODE);\r\n         * I've deliberately chosen a bias that still produces values in the byte range (0x00-0xFF) and will therefore\r\n         * fit into aCharCodeMap, but which shouldn't conflict with any actual, type-able keys.\r\n         */\r\n        this.PSEUDO_CHARCODE    = 0xE0;\r\n        this.CHARCODE_LSHIFT    = this.KEYCODE_SHIFT    + this.PSEUDO_CHARCODE;\r\n        this.CHARCODE_CTRL      = this.KEYCODE_CONTROL  + this.PSEUDO_CHARCODE;\r\n        this.CHARCODE_RSHIFT    = this.KEYCODE_ALT      + this.PSEUDO_CHARCODE;\r\n        this.CHARCODE_SHIFTLOCK = this.KEYCODE_CAPSLOCK + this.PSEUDO_CHARCODE;\r\n\r\n        /*\r\n         * Other common character codes, pseudo (like the C1P's \"BREAK\" key, which has no modern analog) or otherwise\r\n         */\r\n        this.CHARCODE_BREAK     = 0x00 + this.PSEUDO_CHARCODE;\r\n        this.CHARCODE_CTRLC     = 0x03;\r\n        this.CHARCODE_CTRLO     = 0x0F;\r\n\r\n        /*\r\n         * These are \"shift key\" bits I store in bitsShift, and with the exception of BIT_COMMAND (because\r\n         * the C1P doesn't have a COMMAND key), they all match the bit position of the corresponding shift key's\r\n         * column on row 0 (abKbdCols[0]) of the simulated keyboard hardware.\r\n         *\r\n         * NOTE: Whenever shift key bits need to be restored from bitsShift to abKbdCols[0] (eg, when restoring\r\n         * the current shift state at the completion of a simulated key), be sure to mask bitsShift with BITS_SIMULATE\r\n         * before propagating them.\r\n         */\r\n        this.BIT_SHIFTLOCK      = 0x01;\r\n        this.BIT_RSHIFT         = 0x02;\r\n        this.BIT_LSHIFT         = 0x04;\r\n        this.BIT_COMMAND        = 0x08;     // the C1P has no key \"wired\" to this column, so I can use this bit for COMMAND\r\n        this.BIT_CTRL           = 0x40;\r\n        this.BITS_SIMULATE      = (this.BIT_RSHIFT | this.BIT_LSHIFT | this.BIT_CTRL);\r\n\r\n        this.SIMCODE_KEYPRESS   = 0;\r\n        this.SIMCODE_KEYRELEASE = 1;\r\n        this.SIMCODE_KEYEVENT   = 2;\r\n        this.SIMCODE_KEYTIMEOUT = 3;\r\n        this.SIMCODE_AUTOCLEAR  = 4;\r\n        this.aSimCodeDescs = [\"keyPress\",\"keyRelease\",\"keyEvent\",\"keyTimeout\",\"autoClear\"];\r\n\r\n        /*\r\n         * From \"OSI C1P Technical Report\" p.19 regarding the Model 600 Board:\r\n         *\r\n         *      \"By holding down any key, one will first get one character output, and after approximately\r\n         *      a half second delay a repeat rate of approximately 5 characters per second.\"\r\n         */\r\n        this.nCyclesThreshold   = 8192;     // number of virtual CPU cycles required before aKbdStates is propagated\r\n        this.msReleaseDelay     = 250;      // number of milliseconds before a down key is \"forced\" up (unless we see it go up)\r\n        this.msReleaseRepeat    = 100;      // number of milliseconds before a held key is \"forced\" up (assuming auto-repeat)\r\n        this.msInjectDelay      = 300;      // number of milliseconds between injected keystrokes\r\n\r\n        this.aButtonCodeMap = {};\r\n        this.aButtonCodeMap['break']  = this.CHARCODE_BREAK;\r\n        this.aButtonCodeMap['esc']    = this.CHARCODE_ESC;\r\n        this.aButtonCodeMap['ctrl-c'] = this.CHARCODE_CTRLC;\r\n        this.aButtonCodeMap['ctrl-o'] = this.CHARCODE_CTRLO;\r\n\r\n        /*\r\n         * This array is used by keyEventSimulate() to lookup a given charCode and convert it to the appropriate\r\n         * row/col bit combination that the C1P requires.  I assign each supported charCode a 16-bit value, where\r\n         * the high byte contains the row/col pair (in the high and low nibbles, respectively), and the low byte\r\n         * contains any required shift-key code.\r\n         *\r\n         * For example, an apostrophe (0x27) is an unshifted key on a modern keyboard, but it is a SHIFT-7 on the\r\n         * C1P keyboard, so when I simulate the 7, I must also simulate a SHIFT (I always choose the LEFT shift\r\n         * key -- CHARCODE_LSHIFT -- but that choice is completely arbitrary).\r\n         *\r\n         * Using charCodes (from keyPress events) proved to be more robust than using keyCodes (from keyDown and\r\n         * keyUp events), in part because of differences between the C1P keyboard's layout and modern keyboards,\r\n         * and also because of differences in the way browsers generate the keyDown and keyUp events.  For\r\n         * example, Safari on iOS devices will not generate up/down events for shift keys, and for other keys,\r\n         * the up/down events are usually generated after the actual press is complete, and in rapid succession,\r\n         * which doesn't give the slow C1P virtual machine enough time to detect the key.\r\n         *\r\n         * There are still a few times that I call keyEventSimulate() from keyEvent(), and for those occasions,\r\n         * I create a pseudo-charCode value by adding PSEUDO_CHARCODE (0xE0) to the keyCode value, to avoid any\r\n         * confusion with real charCodes:\r\n         *\r\n         *      CHARCODE_LSHIFT     (originally 0x10, which also looks like CTRL-P, so converted to 0xF0)\r\n         *      CHARCODE_CTRL       (originally 0x11, which also looks like CTRL-Q, so converted to 0xF1)\r\n         *      CHARCODE_RSHIFT     (originally 0x12, which also looks like CTRL-R, so converted to 0xF2)\r\n         *      CHARCODE_SHIFTLOCK  (originally 0x14, which also looks like CTRL-T, so converted to 0xF4)\r\n         *\r\n         * Again, as things currently stand, iOS devices will never generate the above charCodes, so any C1P software\r\n         * that relies detecting on shift-key state changes will not work on those devices.\r\n         *\r\n         * For reference purposes, I've left some parenthetical references to corresponding keyCodes in the comments\r\n         * below.  Relying on keyCodes is problematic, which is why I've tried to eliminate most dependencies on them,\r\n         * but still, they're all you get on keyDown/keyUp events.\r\n         */\r\n        this.aCharCodeMap = [];\r\n        this.aCharCodeMap[0x31] = 0x7700; this.aCharCodeMap[0x21] = 0x7700 + this.CHARCODE_LSHIFT;  // 1 (0x31) ! (0x31)\r\n        this.aCharCodeMap[0x32] = 0x7600; this.aCharCodeMap[0x22] = 0x7600 + this.CHARCODE_LSHIFT;  // 2 (0x32) \" (0xDE)\r\n        this.aCharCodeMap[0x33] = 0x7500; this.aCharCodeMap[0x23] = 0x7500 + this.CHARCODE_LSHIFT;  // 3 (0x33) # (0x33)\r\n        this.aCharCodeMap[0x34] = 0x7400; this.aCharCodeMap[0x24] = 0x7400 + this.CHARCODE_LSHIFT;  // 4 (0x34) $ (0x34)\r\n        this.aCharCodeMap[0x35] = 0x7300; this.aCharCodeMap[0x25] = 0x7300 + this.CHARCODE_LSHIFT;  // 5 (0x35) % (0x35)\r\n        this.aCharCodeMap[0x36] = 0x7200; this.aCharCodeMap[0x26] = 0x7200 + this.CHARCODE_LSHIFT;  // 6 (0x36) & (0x37)\r\n        this.aCharCodeMap[0x37] = 0x7100; this.aCharCodeMap[0x27] = 0x7100 + this.CHARCODE_LSHIFT;  // 7 (0x37) ' (0xDE)\r\n        this.aCharCodeMap[0x38] = 0x6700; this.aCharCodeMap[0x28] = 0x6700 + this.CHARCODE_LSHIFT;  // 8 (0x38) ( (0x39)\r\n        this.aCharCodeMap[0x39] = 0x6600; this.aCharCodeMap[0x29] = 0x6600 + this.CHARCODE_LSHIFT;  // 9 (0x39) ) (0x30)\r\n        this.aCharCodeMap[0x30] = 0x6500;   // 0\r\n        this.aCharCodeMap[0x3A] = 0x6400; this.aCharCodeMap[0x2A] = 0x6400 + this.CHARCODE_LSHIFT;  // : (0xBA) * (0x38)\r\n        this.aCharCodeMap[0x2D] = 0x6300; this.aCharCodeMap[0x3D] = 0x6300 + this.CHARCODE_LSHIFT;  // - (0xBD) = (0xBB)\r\n      //this.aCharCodeMap[0x00] = 0x6200;   // RUB-OUT (no mapping chosen for this key yet)\r\n        this.aCharCodeMap[0x2E] = 0x5700; this.aCharCodeMap[0x3E] = 0x5700 + this.CHARCODE_LSHIFT;  // . (0xBE) > (0xBE)\r\n        this.aCharCodeMap[0x6C] = 0x5600; this.aCharCodeMap[0x4C] = 0x5600 + this.CHARCODE_LSHIFT; this.aCharCodeMap[0x5C] = 0x5600 + this.CHARCODE_LSHIFT; // l L \\\r\n        this.aCharCodeMap[0x6F] = 0x5500; this.aCharCodeMap[0x4F] = 0x5500 + this.CHARCODE_LSHIFT; this.aCharCodeMap[this.CHARCODE_DELETE] = 0x5500 + this.CHARCODE_LSHIFT; // o O DELETE\r\n        this.aCharCodeMap[this.CHARCODE_LF] = 0x5400;   // LINE-FEED\r\n        this.aCharCodeMap[this.CHARCODE_CR] = 0x5300;   // RETURN\r\n        this.aCharCodeMap[0x77] = 0x4700; this.aCharCodeMap[0x57] = 0x4700 + this.CHARCODE_LSHIFT;  // w W\r\n        this.aCharCodeMap[0x65] = 0x4600; this.aCharCodeMap[0x45] = 0x4600 + this.CHARCODE_LSHIFT;  // e E\r\n        this.aCharCodeMap[0x72] = 0x4500; this.aCharCodeMap[0x52] = 0x4500 + this.CHARCODE_LSHIFT;  // r R\r\n        this.aCharCodeMap[0x74] = 0x4400; this.aCharCodeMap[0x54] = 0x4400 + this.CHARCODE_LSHIFT;  // t T\r\n        this.aCharCodeMap[0x79] = 0x4300; this.aCharCodeMap[0x59] = 0x4300 + this.CHARCODE_LSHIFT;  // y Y\r\n        this.aCharCodeMap[0x75] = 0x4200; this.aCharCodeMap[0x55] = 0x4200 + this.CHARCODE_LSHIFT;  // u U\r\n        this.aCharCodeMap[0x69] = 0x4100; this.aCharCodeMap[0x49] = 0x4100 + this.CHARCODE_LSHIFT;  // i I\r\n        this.aCharCodeMap[0x73] = 0x3700; this.aCharCodeMap[0x53] = 0x3700 + this.CHARCODE_LSHIFT;  // s S\r\n        this.aCharCodeMap[0x64] = 0x3600; this.aCharCodeMap[0x44] = 0x3600 + this.CHARCODE_LSHIFT;  // d D\r\n        this.aCharCodeMap[0x66] = 0x3500; this.aCharCodeMap[0x46] = 0x3500 + this.CHARCODE_LSHIFT;  // f F\r\n        this.aCharCodeMap[0x67] = 0x3400; this.aCharCodeMap[0x47] = 0x3400 + this.CHARCODE_LSHIFT;  // g G\r\n        this.aCharCodeMap[0x68] = 0x3300; this.aCharCodeMap[0x48] = 0x3300 + this.CHARCODE_LSHIFT;  // h H\r\n        this.aCharCodeMap[0x6A] = 0x3200; this.aCharCodeMap[0x4A] = 0x3200 + this.CHARCODE_LSHIFT;  // j J\r\n        this.aCharCodeMap[0x6B] = 0x3100; this.aCharCodeMap[0x4B] = 0x3100 + this.CHARCODE_LSHIFT; this.aCharCodeMap[0x5B] = 0x3100 + this.CHARCODE_LSHIFT; // k K [\r\n        this.aCharCodeMap[0x78] = 0x2700; this.aCharCodeMap[0x58] = 0x2700 + this.CHARCODE_LSHIFT;  // x X\r\n        this.aCharCodeMap[0x63] = 0x2600; this.aCharCodeMap[0x43] = 0x2600 + this.CHARCODE_LSHIFT;  // c C\r\n        this.aCharCodeMap[0x76] = 0x2500; this.aCharCodeMap[0x56] = 0x2500 + this.CHARCODE_LSHIFT;  // v V\r\n        this.aCharCodeMap[0x62] = 0x2400; this.aCharCodeMap[0x42] = 0x2400 + this.CHARCODE_LSHIFT;  // b B\r\n        this.aCharCodeMap[0x6E] = 0x2300; this.aCharCodeMap[0x4E] = 0x2300 + this.CHARCODE_LSHIFT; this.aCharCodeMap[0x5E] = 0x2300 + this.CHARCODE_LSHIFT; // n N ^\r\n        this.aCharCodeMap[0x6D] = 0x2200; this.aCharCodeMap[0x4D] = 0x2200 + this.CHARCODE_LSHIFT; this.aCharCodeMap[0x5D] = 0x2200 + this.CHARCODE_LSHIFT; // m M ]\r\n        this.aCharCodeMap[0x2C] = 0x2100; this.aCharCodeMap[0x3C] = 0x2100 + this.CHARCODE_LSHIFT;  // , (0xBC) < (0xBC)\r\n        this.aCharCodeMap[0x71] = 0x1700; this.aCharCodeMap[0x51] = 0x1700 + this.CHARCODE_LSHIFT;  // q Q\r\n        this.aCharCodeMap[0x61] = 0x1600; this.aCharCodeMap[0x41] = 0x1600 + this.CHARCODE_LSHIFT;  // a A\r\n        this.aCharCodeMap[0x7A] = 0x1500; this.aCharCodeMap[0x5A] = 0x1500 + this.CHARCODE_LSHIFT;  // z Z\r\n        this.aCharCodeMap[0x20] = 0x1400;   // SPACE\r\n        this.aCharCodeMap[0x2F] = 0x1300; this.aCharCodeMap[0x3F] = 0x1300 + this.CHARCODE_LSHIFT;  // / (0xBF) ? (0xBF)\r\n        this.aCharCodeMap[0x3B] = 0x1200; this.aCharCodeMap[0x2B] = 0x1200 + this.CHARCODE_LSHIFT;  // ; (0xBA) + (0xBB)\r\n        this.aCharCodeMap[0x70] = 0x1100; this.aCharCodeMap[0x50] = 0x1100 + this.CHARCODE_LSHIFT; this.aCharCodeMap[0x40] = 0x1100 + this.CHARCODE_LSHIFT; // p P @\r\n      //this.aCharCodeMap[0x00]                     = 0x0700;   // REPEAT (no mapping chosen for this key yet)\r\n        this.aCharCodeMap[this.CHARCODE_CTRL]       = 0x0600;   // CTRL\r\n        this.aCharCodeMap[this.CHARCODE_ESC]        = 0x0500;   // ESC\r\n        this.aCharCodeMap[this.CHARCODE_LSHIFT]     = 0x0200;   // LEFT-SHIFT\r\n        this.aCharCodeMap[this.CHARCODE_RSHIFT]     = 0x0100;   // RIGHT-SHIFT\r\n        this.aCharCodeMap[this.CHARCODE_SHIFTLOCK]  = 0x0000;   // SHIFT-LOCK\r\n\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     */\r\n    reset()\r\n    {\r\n        this.setModel(this.nDefaultModel);\r\n\r\n        /*\r\n         * The physical (not virtual) state of various shift keys,\r\n         * with the exception of SHIFT-LOCK, which needs to start in the\r\n         * \"locked\" position, regardless of the physical CAPS-LOCK state.\r\n         *\r\n         * QUESTION: In JavaScript, how do you query initial key states?\r\n         */\r\n        this.bitsShift = this.BIT_SHIFTLOCK;\r\n\r\n        /*\r\n         * Every SET bit of bKbdRows represents an enabled row (this convention\r\n         * is the REVERSE of the C1P hardware, but I prefer it).\r\n         */\r\n        this.bKbdRows = 0x00;\r\n\r\n        /*\r\n         * Every SET bit of abKbdCols represents an enabled column; again, this is\r\n         * the REVERSE of the C1P hardware, but I compensate for that difference with\r\n         * a quick XOR in updateMemory().\r\n         *\r\n         * Like bitsShift, this 8x8 array (8 byte values, each with 8 bits) represents\r\n         * the physical state of the keyboard, encoded in C1P format; the C1P won't\r\n         * actually see data this until updateMemory() decides it's time to propagate it.\r\n         */\r\n        this.abKbdCols = [this.BIT_SHIFTLOCK,0x00,0x00,0x00,0x00,0x00,0x00,0x00];\r\n\r\n        /*\r\n         * After a new key event has updated abKbdCols, we \"push\" a copy of that\r\n         * updated keyboard state onto this array. updateMemory() will then \"shift\"\r\n         * the next copy off, update its own copy (abKbdColsLast), and then propagate\r\n         * that to the C1P's keyboard memory, once the CPU has had enough time to\r\n         * process the previous event (see nCyclesThreshold).\r\n         */\r\n        this.aKbdStates = [];\r\n\r\n        /*\r\n         * When a key \"down\" is simulated on behalf of some charCode, I save\r\n         * the timer object responsible for simulating the key \"up\" here, so that\r\n         * if I detect the actual key going up sooner, I can cancel the timer and\r\n         * simulate the \"up\" immediately.  Similarly, if another press for the same\r\n         * key arrives before last one expired (eg, auto-repeat), I need to cancel\r\n         * the previous timer for that key before setting another.\r\n         *\r\n         * NOTE: If this is anything other than an initial reset, then we need to\r\n         * make sure there are no outstanding timers before we blow the array away.\r\n         */\r\n        if (this.aKeyTimers) {\r\n            for (var i in this.aKeyTimers) {\r\n                if (isNaN(+i)) continue; // ignore any non-numeric properties, if any\r\n                if (this.aKeyTimers[i]) clearTimeout(this.aKeyTimers[i]);\r\n            }\r\n        }\r\n        this.aKeyTimers = [];\r\n        this.prevCharDown = 0;\r\n        this.prevKeyDown = 0;\r\n\r\n        /*\r\n         * These save the last values written to keyboard memory, so that I can\r\n         * avoid rewriting the memory if the values haven't changed since the last update.\r\n         */\r\n        this.bWriteLast = -1;\r\n        this.abKbdColsLast = this.abKbdCols;\r\n\r\n        /*\r\n         * Due to the way the C1P scans its keyboard rows (from R0 up to R7 *or* to the\r\n         * highest row for which a \"down\" key has just been detected), if we get back-to-back\r\n         * key events for, say, \"I\" and then \"S\", the C1P will see only the \"S\", never the \"I\",\r\n         * because \"I\" is on a higher row.\r\n         *\r\n         * That's why we have aKbdStates, which relies on the following CPU activity variables.\r\n         */\r\n        this.nReadsSinceLastEvent = 0;\r\n        this.nWritesSinceLastEvent = 0;\r\n        this.nCyclesSinceLastEvent = 0;\r\n\r\n        /*\r\n         * Make sure the auto-injection buffer is empty, too (an injection could have been\r\n         * in progress on any reset after the first).\r\n         */\r\n        this.sInjectBuffer = \"\";\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"esc\", \"ctrl-c\")\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        /*\r\n         * I want to bind to the first caller (ie, the Screen), not subsequent ones (eg, the Panel)\r\n         */\r\n        if (this.bindings[sBinding] === undefined) {\r\n            switch(sBinding) {\r\n            case \"keyDown\":\r\n                this.bindings[sBinding] = control;\r\n                control.onkeydown = function(kbd) {\r\n                    return function(event) {\r\n                        return kbd.keyEvent(event, true);\r\n                    };\r\n                }(this);\r\n                return true;\r\n            case \"keyPress\":\r\n                this.bindings[sBinding] = control;\r\n                control.onkeypress = function(kbd) {\r\n                    return function(event) {\r\n                        return kbd.keyPress(event);\r\n                    };\r\n                }(this);\r\n                return true;\r\n            case \"keyUp\":\r\n                this.bindings[sBinding] = control;\r\n                control.onkeyup = function(kbd) {\r\n                    return function(event) {\r\n                        return kbd.keyEvent(event, false);\r\n                    };\r\n                }(this);\r\n                return true;\r\n            case \"break\":\r\n                /*\r\n                 * The BREAK key is unusual: it requires us forcing the equivalent of someone pressing\r\n                 * our \"Reset\" and \"Run\" buttons.  As things stand, the Computer component is responsible\r\n                 * for end-user \"reset\" requests, so we can simply arrange to call this.cmp.reset(true).\r\n                 *\r\n                 * NOTE: At the risk of making keyPressSimulate() a bit uglier, I also permit BREAK\r\n                 * there, in case someone wants to \"inject\" the BREAK key; however, if it's followed by\r\n                 * other injected keys, I'll need to avoid clearing the injection buffer on a reset;\r\n                 * currently, reset() resets everything.\r\n                 */\r\n                this.bindings[sBinding] = control;\r\n                control.onclick = function(kbd) {\r\n                    return function(event) {\r\n                        if (DEBUG) kbd.printf(\"keyPressSimulate(break)\\n\");\r\n                        if (kbd.cmp) kbd.cmp.reset(true);\r\n                    };\r\n                }(this);\r\n                return true;\r\n            default:\r\n                if (this.aButtonCodeMap[sBinding] !== undefined) {\r\n                    this.bindings[sBinding] = control;\r\n                    control.onclick = function(kbd, sButton, charCode) {\r\n                        return function(event) {\r\n                            if (DEBUG) kbd.printf(\"keyPressSimulate(%s)\\n\", sButton);\r\n                            if (kbd.cpu) kbd.cpu.setFocus();\r\n                            return !kbd.keyPressSimulate(charCode);\r\n                        };\r\n                    }(this, sBinding, this.aButtonCodeMap[sBinding]);\r\n                    return true;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {Array} abMemory\r\n     * @param {number} start\r\n     * @param {number} end\r\n     * @param {C1PCPU} cpu\r\n     */\r\n    setBuffer(abMemory, start, end, cpu)\r\n    {\r\n        this.abMem = abMemory;\r\n        this.offKbd = start;\r\n        this.cbKbd = end - start + 1;\r\n        this.offKbdLimit = this.offKbd + this.cbKbd;\r\n        if (cpu) {\r\n            this.cpu = cpu;\r\n            if (DEBUG) cpu.addReadNotify(start, end, this, this.getByte);\r\n            cpu.addWriteNotify(start, end, this, this.setByte);\r\n        }\r\n        this.setReady();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {number} nModel\r\n     */\r\n    setModel(nModel)\r\n    {\r\n        this.nModel = nModel;\r\n        /*\r\n         * Default to Model 600 behavior, where the keyboard status lines are inverted\r\n         * (ie, a zero bit indicates a key press).\r\n         */\r\n        this.bInvert = 0xff;\r\n        if (this.nModel != 600) {\r\n            /*\r\n             * No inversion for model 542\r\n             */\r\n            this.bInvert = 0x00;\r\n            this.printf(\"updated keyboard model: %d\\n\", this.nModel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {boolean} fOn\r\n     * @param {C1PComputer} cmp\r\n     *\r\n     * We make a note of the Computer component, so that we can invoke its reset() method when our simulated\r\n     * BREAK key is pressed, and we query the Debugger component so that we can use its info() and halt() functions,\r\n     * which we use to buffer information without adversely affecting timing and then dump later using the Debugger's\r\n     * \"info\" command.\r\n     */\r\n    setPower(fOn, cmp)\r\n    {\r\n        if (fOn && !this.flags.powered) {\r\n            this.flags.powered = true;\r\n            this.cmp = cmp;\r\n            if (DEBUGGER) this.dbg = cmp.getComponentByType(\"debugger\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {boolean} [fReady] is assumed to indicate \"ready\" unless EXPLICITLY set to false\r\n     */\r\n    setReady(fReady)\r\n    {\r\n        this.iOS = WebLib.isUserAgent(\"iOS\");\r\n        this.fMobile = (this.iOS || WebLib.isUserAgent(\"Android\"));\r\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_KBD)) {\r\n            this.dbg.printf(\"mobile keyboard support: %b (%s)\\n\", this.fMobile, window.navigator.userAgent);\r\n        }\r\n        super.setReady();\r\n    }\r\n\r\n    /**\r\n     * calcReleaseDelay(fRepeat)\r\n     *\r\n     * This attempts to scale our default \"release\" delay appropriately for the current CPU speed.\r\n     *\r\n     * Note that if the effective CPU speed exceeds 16Mhz, it becomes very difficult to rely on timer-driven key events\r\n     * (even the shortest available timer delay still gives the CPU too much time, so it thinks that even the briefest key\r\n     * press represents a held key, resulting in multiple keystrokes).  We deal with this by artificially limiting the top\r\n     * speed in the CPU component (the current limit for \"fast\" mode is 8Mhz; see CPU.mhzFast)\r\n     *\r\n     * @this {C1PKeyboard}\r\n     * @param {boolean} fRepeat is true if a timeout had already been active for the current key\r\n     * @returns {number}\r\n     */\r\n    calcReleaseDelay(fRepeat)\r\n    {\r\n        /*\r\n         * NOTE: This delay affects only the \"up\" delay, not repeat delay, but it's useful to have an initial\r\n         * \"up\" delay that's sufficiently large to ensure the native machine's auto-repeat behavior cooperates\r\n         * with the virtual machine's auto-repeat behavior. msReleaseDelay is the initial delay, msReleaseRepeat\r\n         * is the subsequent delay.\r\n         *\r\n         * Unfortunately, with a large initial delay, we need to enable the auto-clear code in the keyEvent()\r\n         * handler, otherwise doing things like pressing ENTER repeatedly will result in sluggish behavior\r\n         * (because you can generally press/release/repress keys faster than they will auto-repeat).\r\n         */\r\n        var msDelay = (fRepeat? this.msReleaseRepeat: this.msReleaseDelay);\r\n        if (this.cpu && this.cpu.mhz) {\r\n            msDelay /= this.cpu.mhz;\r\n        }\r\n        return msDelay;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {number} [notCharCode]\r\n     */\r\n    autoClear(notCharCode)\r\n    {\r\n        if (this.prevCharDown && (notCharCode === undefined || notCharCode != this.prevCharDown)) {\r\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_KBD)) {\r\n                this.dbg.printf(\"autoClear(%#04x)\\n\", this.prevCharDown);\r\n            }\r\n\r\n            clearTimeout(this.aKeyTimers[this.prevCharDown]);\r\n            this.keyEventSimulate(this.prevCharDown, false, this.SIMCODE_AUTOCLEAR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {string} sKeyCodes\r\n     * @param {number} [msDelay] is an optional injection delay (default is msInjectDelay)\r\n     */\r\n    injectKeys(sKeyCodes, msDelay)\r\n    {\r\n        this.sInjectBuffer = sKeyCodes;\r\n        if (DEBUG) this.printf(MESSAGE.LOG, \"injectKeys(%s)\\n\", this.sInjectBuffer.split(\"\\n\").join(\"\\\\n\"));\r\n        this.injectKeysFromBuffer(msDelay || this.msInjectDelay);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {number} msDelay is the delay between injected keys\r\n     */\r\n    injectKeysFromBuffer(msDelay)\r\n    {\r\n        if (this.sInjectBuffer.length > 0) {\r\n            var ch = this.sInjectBuffer.charCodeAt(0);\r\n            /*\r\n             * I could require all callers to supply CRs instead of LFs, but this is friendlier.\r\n             */\r\n            if (ch == 0x0a) {\r\n                ch = 0x0d;\r\n            }\r\n            /*\r\n             * Also, if upper-case characters are being injected, convert them to lower-case, and rely\r\n             * on the virtual SHIFT-LOCK remaining locked for the duration; otherwise, we'd have to simulate\r\n             * SHIFT key presses around every character (or around the entire set of characters) as well.\r\n             *\r\n             * UPDATE: Even though keyPressSimulate() currently has some code to do this automatically now,\r\n             * it's really intended as a work-around for a SHIFT-related problem on iOS devices only, so\r\n             * we can't rely on that in the general case.\r\n             */\r\n            if (ch >= 0x41 && ch <= 0x5A) {\r\n                ch += 0x20;\r\n            }\r\n            this.sInjectBuffer = this.sInjectBuffer.substr(1);\r\n            this.keyPressSimulate(ch);\r\n        }\r\n        if (this.sInjectBuffer.length > 0) {\r\n            setTimeout(function(kbd) { return function() {kbd.injectKeysFromBuffer(msDelay);}; }(this), msDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {Object} event\r\n     * @param {boolean} fDown is true if called for a keyDown event, false if called for a keyUp event\r\n     * @returns {boolean} true to pass the event along, false to consume it\r\n     */\r\n    keyEvent(event, fDown)\r\n    {\r\n        var fPass;\r\n        var fAutoClear = !fDown;\r\n        var keyCode = event.keyCode;\r\n\r\n        if (fDown) this.prevKeyDown = keyCode;\r\n\r\n        if (keyCode == this.CHARCODE_LSHIFT - this.PSEUDO_CHARCODE) {\r\n            this.bitsShift &= ~this.BIT_LSHIFT;\r\n            if (fDown) this.bitsShift |= this.BIT_LSHIFT;\r\n            keyCode += this.PSEUDO_CHARCODE;\r\n            fAutoClear = false;\r\n        }\r\n        else\r\n        if (keyCode == this.CHARCODE_RSHIFT - this.PSEUDO_CHARCODE) {\r\n            this.bitsShift &= ~this.BIT_RSHIFT;\r\n            if (fDown) this.bitsShift |= this.BIT_RSHIFT;\r\n            keyCode += this.PSEUDO_CHARCODE;\r\n            fAutoClear = false;\r\n        }\r\n        else\r\n        if (keyCode == this.CHARCODE_CTRL - this.PSEUDO_CHARCODE) {\r\n            this.bitsShift &= ~this.BIT_CTRL;\r\n            if (fDown) this.bitsShift |= this.BIT_CTRL;\r\n            keyCode += this.PSEUDO_CHARCODE;\r\n            fAutoClear = false;\r\n        }\r\n        else\r\n        if (keyCode == this.CHARCODE_SHIFTLOCK - this.PSEUDO_CHARCODE) {\r\n            /*\r\n             * FYI, this generates a \"down\" event ONLY when getting locked, and an \"up\" event ONLY\r\n             * when getting unlocked--which is exactly what I want, even though that may seem a little\r\n             * counter-intuitive (since the key itself actually went down AND up for each event).\r\n             *\r\n             * Moreover, since most people do NOT have CAPS-LOCK enabled, whereas the C1P needs it\r\n             * enabled by default, we invert fDown, so that if the user enables CAPS-LOCK for some\r\n             * reason, we treat is as *disabling* SHIFT-LOCK, and vice versa.\r\n             */\r\n            fDown = !fDown;\r\n            this.bitsShift &= ~this.BIT_SHIFTLOCK;\r\n            if (fDown) this.bitsShift |= this.BIT_SHIFTLOCK;\r\n            keyCode += this.PSEUDO_CHARCODE;\r\n            fAutoClear = false;\r\n        }\r\n        else\r\n        if (keyCode == this.KEYCODE_COMMAND) {\r\n            /*\r\n             * Avoid interfering with useful Browser key commands, like COMMAND-Q, COMMAND-T, etc.\r\n             */\r\n            this.bitsShift &= ~this.BIT_COMMAND;\r\n            if (fDown) this.bitsShift |= this.BIT_COMMAND;\r\n            fAutoClear = false;\r\n            fPass = true;\r\n        }\r\n        else\r\n        if (keyCode == this.KEYCODE_TAB) {\r\n            /*\r\n             * If I don't consume TAB on the \"down\" event, then that's all I'll see, because the\r\n             * browser will see it and give focus to the next control. But the \"down\" side is that\r\n             * that no \"press\" event will be generated.  This puts it in the same category as ESC,\r\n             * which also generates \"down\" and \"up\" events (LOTS of \"down\" events for that matter),\r\n             * but no \"press\" event.  However, the C1P has no TAB key, so it's safe to completely ignore.\r\n             */\r\n            fPass = fAutoClear = false;\r\n        }\r\n        else\r\n        if (keyCode == this.KEYCODE_ESC || keyCode == this.KEYCODE_DELETE) {\r\n            /*\r\n             * I don't get keyPress events for ESC (why?) and I never want the browser to act on DELETE\r\n             * (which does double-duty as the \"Back\" button and leaves the current page), so I have to\r\n             * simulate them now.\r\n             *\r\n             * Note that I call the \"press\" simulate method and NOT the \"event\" simulate method, because\r\n             * the former takes care of simulating both individual \"down\" and \"up\" events.\r\n             */\r\n            if (DEBUG && DEBUGGER && keyCode == this.KEYCODE_ESC && this.dbg) this.dbg.halt();\r\n            fPass = (fDown? !this.keyPressSimulate(keyCode) : false);\r\n        }\r\n        else {\r\n            /*\r\n             * Pass on everything else; I'll take care of this key at the keyPress stage, not the\r\n             * the keyDown or keyUp stage.\r\n             */\r\n            fPass = true;\r\n            /*\r\n             * At this point, I have a difficult choice to make: leave fAutoClear true for any remaining\r\n             * \"up\" events, so that keys will repeat immediately when released/pressed repeatedly (most\r\n             * noticeable with the Enter key), or set fAutoClear to false to ensure that polling apps have\r\n             * enough time to see every key press.\r\n             *\r\n             * I've decided that the former is more important than the latter, so if polling apps are still\r\n             * missing keystrokes, then perhaps nCyclesThreshold needs to be supplemented in some way.\r\n             *\r\n             *      fAutoClear = false;\r\n             */\r\n        }\r\n\r\n        if (fAutoClear) {\r\n            /*\r\n             * When you use a command like COMMAND-T, I see the COMMAND key going down, but not going up,\r\n             * so I think the COMMAND key is still down and ignore all input; to easily get out of that state,\r\n             * I clear our internal BIT_COMMAND whenever I see ANY key go up (well, ALMOST any key; cases\r\n             * above that explicitly clear fAutoClear -- such as the COMMAND key itself -- are exceptions\r\n             * to the rule).\r\n             */\r\n            this.bitsShift &= ~this.BIT_COMMAND;\r\n            /*\r\n             * I don't reliably get keyDown/keyUp events for all keys on all devices, but for those devices that\r\n             * I DO, it seems like a good idea to cancel any pending key \"up\" simulation on receipt of the actual\r\n             * keyUp event.\r\n             *\r\n             * However, the following code is problematic for Safari on iOS devices, which as noted above, doesn't\r\n             * generate keyDown/keyUp events until after the press operation is complete, and then they are generated\r\n             * in rapid succession, which doesn't give the C1P enough time to detect the key.  So I simply don't do\r\n             * this on iOS devices.\r\n             */\r\n            if (!this.fMobile && keyCode == this.prevKeyDown) this.autoClear();\r\n        }\r\n\r\n        if (fPass === undefined) {\r\n            fPass = !this.keyEventSimulate(keyCode, fDown, this.SIMCODE_KEYEVENT);\r\n        }\r\n\r\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_KBD)) {\r\n            this.dbg.printf(\"key%s(%#04x): %s\\n\", fDown? \"Down\" : \"Up\", keyCode, fPass? \"pass\" : \"consume\");\r\n        }\r\n        return fPass;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {Object} event\r\n     * @returns {boolean} true to pass the event along, false to consume it\r\n     *\r\n     * We've stopped relying on keyPress for keyboard emulation purposes, but it's still handy to hook and monitor\r\n     * when debugging.\r\n     */\r\n    keyPress(event)\r\n    {\r\n        var fPass = true;\r\n        /*\r\n         * Browser-independent charCode extraction...\r\n         */\r\n        event = event || window.event;\r\n        var charCode = event.which || event.keyCode;\r\n\r\n        /*\r\n         * Let's stop any injection currently in progress, too\r\n         */\r\n        this.sInjectBuffer = \"\";\r\n\r\n        if (this.bitsShift & this.BIT_COMMAND) {\r\n            this.bitsShift &= ~this.BIT_COMMAND;\r\n        } else {\r\n            fPass = !this.keyPressSimulate(charCode);\r\n        }\r\n\r\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_KBD)) {\r\n            this.dbg.printf(\"keyPress(%#04x): %s\\n\", charCode, fPass? \"pass\" : \"consume\");\r\n        }\r\n        return fPass;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {number} charCode\r\n     * @returns {boolean} true if successfully simulated, false if unrecognized/unsupported key\r\n     */\r\n    keyPressSimulate(charCode)\r\n    {\r\n        var fSimulated = false;\r\n        if (charCode == this.CHARCODE_BREAK) {\r\n            /*\r\n             * The BREAK key is not wired up to the keyboard like the other keys are, but we simulate\r\n             * it here, so that it can be injected like any other key.\r\n             */\r\n            if (this.cmp) {\r\n                this.cmp.reset(true);\r\n                fSimulated = true;\r\n            }\r\n        }\r\n        else {\r\n            /*\r\n             * WARNING: The next line is why you cannot use SHIFT-N, SHIFT-O, SHIFT-P, etc. But without it,\r\n             * iOS devices with the annoying \"autocapitalization\" feature enabled make the keyboard unusable\r\n             * by default.  The trade-off is: either require all iOS users to first tap the shift key to turn\r\n             * \"autocapitalization\" off, or lose the ability to type any of the special shifted alphabetic keys.\r\n             * I choose the latter, because I have friendlier aliases already defined for those keys (eg,\r\n             * ^, DELETE, and @).\r\n             *\r\n             * Furthermore, by doing this for iOS (and Android) devices ONLY, other platforms retain the ability\r\n             * to use those special key combos.\r\n             */\r\n            if (this.fMobile) {\r\n                if (charCode >= 0x41 && charCode <= 0x5A) {\r\n                    charCode += 0x20;\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Auto-clear any previous down key EXCEPT for charCode (because it may be held and repeating).\r\n             */\r\n            this.autoClear(charCode);\r\n\r\n            if (this.keyEventSimulate(charCode, true, this.SIMCODE_KEYPRESS)) {\r\n                /*\r\n                 * If CPU speed is unlimited, then we switch to an alternate approach, which is to immediately\r\n                 * queue a \"release\" event as well.  The problem with the original timer-based approach at high\r\n                 * speeds is that the the CPU may get lucky and execute a LOT of instructions between delivery\r\n                 * of the keyPress event and the \"keyTimeout\" event. In that case, even enabling keyboard polling\r\n                 * detection in updateMemory() won't entirely help -- although we do that, too -- because JavaScript\r\n                 * events are delivered synchronously, so it may simply take too long for the \"keyTimeout\" event\r\n                 * to arrive.\r\n                 *\r\n                 * Why don't we ALWAYS do this? Because in the normal case (SPEED_SLOW, and even SPEED_FAST) we want\r\n                 * to faithfully simulate how long a key is held, so that features like auto-repeat work properly.\r\n                 * You'll notice in the SPEED_MAX case, holding a key no longer has any effect; even though multiple\r\n                 * keyPress events WILL arrive, if we simulate a release immediately after each one, then repeat\r\n                 * is defeated.  Also, the keyboard polling detection code in updateMemory() doesn't work well for\r\n                 * all apps.\r\n                 */\r\n                if (this.cpu.speed == this.cpu.SPEED_MAX) {\r\n                    this.keyEventSimulate(charCode, false, this.SIMCODE_KEYRELEASE);\r\n                }\r\n                else {\r\n                    var fRepeat = false;\r\n                    if (this.aKeyTimers[charCode]) {\r\n                        clearTimeout(this.aKeyTimers[charCode]);\r\n                        fRepeat = true;\r\n                    }\r\n                    var msDelay = this.calcReleaseDelay(fRepeat);\r\n                    this.aKeyTimers[this.prevCharDown = charCode] = setTimeout(function(kbd) { return function() {kbd.keyEventSimulate(charCode, false, kbd.SIMCODE_KEYTIMEOUT);}; }(this), msDelay);\r\n                    if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_KBD)) {\r\n                        this.dbg.printf(\"keyPressSimulate(%#04x): setTimeout()\\n\", charCode);\r\n                    }\r\n                }\r\n                fSimulated = true;\r\n            }\r\n        }\r\n        if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_KBD)) {\r\n            this.dbg.printf(\"keyPressSimulate(%#04x): %b\\n\", charCode, fSimulated);\r\n        }\r\n        return fSimulated;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {number} charCode\r\n     * @param {boolean} fDown\r\n     * @param {number} simCode indicates the origin of the event\r\n     * @returns {boolean} true if successfully simulated, false if unrecognized/unsupported key\r\n     */\r\n    keyEventSimulate(charCode, fDown, simCode)\r\n    {\r\n        var fSimulated = false;\r\n        if (!fDown) {\r\n            this.aKeyTimers[charCode] = null;\r\n            if (this.prevCharDown == charCode) this.prevCharDown = 0;\r\n        }\r\n        var bShift = 0;\r\n        var bCode = this.aCharCodeMap[charCode];\r\n        if (bCode === undefined) {\r\n            /*\r\n             * Perhaps we're dealing with a CTRL variation of an alphabetic key; this won't\r\n             * affect non-CTRL-key combos like CR or LF, because they're defined in aCharCodeMap,\r\n             * and this bit of code relieves us from having to explicitly define every CTRL-letter\r\n             * possibility in aCharCodeMap. However, CTRL-anything-else is a different matter.\r\n             */\r\n            if (charCode >= 0x01 && charCode <= 0x1A) {\r\n                charCode += 0x40;\r\n                bShift = this.CHARCODE_CTRL;\r\n            }\r\n            bCode = this.aCharCodeMap[charCode];\r\n        }\r\n        if (bCode !== undefined) {\r\n            var iRow = bCode >> 12;\r\n            var iCol = (bCode >> 8) & 0xf;\r\n            if (!bShift) bShift = bCode & 0xff;\r\n            if (fDown) {\r\n                this.abKbdCols[iRow] |= 1 << iCol;\r\n                if (bShift == this.CHARCODE_CTRL) {\r\n                    this.abKbdCols[0] |= this.BIT_CTRL;\r\n                }\r\n                else if (bShift == this.CHARCODE_LSHIFT) {\r\n                    this.abKbdCols[0] |= this.BIT_LSHIFT;\r\n                }\r\n                else if (bShift == this.CHARCODE_RSHIFT) {\r\n                    this.abKbdCols[0] |= this.BIT_RSHIFT;\r\n                }\r\n                else {\r\n                    this.abKbdCols[0] &= ~this.BITS_SIMULATE;\r\n                }\r\n            }\r\n            else {\r\n                this.abKbdCols[iRow] &= ~(1 << iCol);\r\n                this.abKbdCols[0] &= ~this.BITS_SIMULATE;\r\n                this.abKbdCols[0] |= (this.bitsShift & this.BITS_SIMULATE);\r\n            }\r\n            var fPropagate = (simCode == this.SIMCODE_KEYPRESS && !this.aKbdStates.length);\r\n            this.aKbdStates.push(this.abKbdCols.slice());\r\n            this.updateMemory(fPropagate);\r\n            fSimulated = true;\r\n        }\r\n        if (DEBUG && this.dbg) this.dbg.info(\"keyEventSimulate(\" + StrLib.toHexByte(charCode) + \",\" + (fDown?\"down\":\"up\") + \",\" + this.aSimCodeDescs[simCode] + \"): \" + (fSimulated? \"true\" : \"false\"));\r\n        return fSimulated;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {number} addr\r\n     * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to read the specified addr)\r\n     *\r\n     * NOTE: As long as we rely on the CPU processing a certain number of cycles (nCyclesThreshold) before\r\n     * propagating the next kbd state, and not how many reads and/or writes the CPU has performed, we could\r\n     * eliminate the overhead of this read-notification handler.\r\n     *\r\n     * It's useful for diagnostic purposes, which is why it's still here.\r\n     */\r\n    getByte(addr, addrFrom)\r\n    {\r\n        /*\r\n         * Don't trigger any further hardware emulation (beyond what we've already stored in memory) if\r\n         * the Debugger performed this read (need a special Debugger I/O command if/when you really want to do that).\r\n         */\r\n        if (DEBUG) {\r\n            if (addrFrom !== undefined) {\r\n                this.nReadsSinceLastEvent++;\r\n                if (DEBUG && this.dbg) this.dbg.info(\"reading kbd \" + StrLib.toHexWord(addr) + \" @\" + this.cpu.getCycles() + \" cycles\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {number} addr\r\n     * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to write the specified addr)\r\n     *\r\n     * NOTE: Ordinarily, I wouldn't allow Debugger writes (addrFrom === undefined) to interfere with the simulated\r\n     * hardware state, but for now, I find it useful to be able to prod the simulation code directly from the Debugger.\r\n     */\r\n    setByte(addr, addrFrom)\r\n    {\r\n        var b = this.cpu.getByte(addr);\r\n        this.bKbdRows = b ^ this.bInvert;\r\n        this.nWritesSinceLastEvent++;\r\n        this.updateMemory(false, addr, b);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PKeyboard}\r\n     * @param {boolean} fPropagate is true to propagate immediately, false to use normal propagation\r\n     * @param {number} [addr] is the memory address to update; default is the entire memory range\r\n     * @param {number} [bWrite] is the value of any immediately preceding write, or undefined if none\r\n     *\r\n     * Update emulated keyboard memory.  By updating the keyboard memory whenever it's written to,\r\n     * as well as whenever a key is pressed or released, I avoid the hit of a read-notification handler.\r\n     * Besides, read-notification handlers are called only AFTER the read has been performed, so it\r\n     * would be too late to update the memory at that point.\r\n     *\r\n     * WARNING: There is a slight risk of an application reading from a different keyboard memory address\r\n     * than it just wrote to.  That would be legal, but very odd, and we save valuable time by not updating\r\n     * every other byte in the entire memory range every time a different keyboard \"row\" is selected.\r\n     */\r\n    updateMemory(fPropagate, addr, bWrite)\r\n    {\r\n        /*\r\n         * First, we determine if it's time for event propagation...\r\n         */\r\n        var nCycles = this.cpu.getCycles();\r\n\r\n        /*\r\n         * Monitoring the C1P's keyboard polling activity is problematic, because not all apps monitor\r\n         * the keyboard in the same way.  It's better to simply wait for a certain amount of CPU activity to\r\n         * occur (nCyclesThreshold); it's more reliable and it scales well, because it's not affected by\r\n         * how many cycles we're executing in real time.  The trick is finding a value for nCyclesThreshold\r\n         * that works well across the board.\r\n         */\r\n        if (!fPropagate) {\r\n            if (this.cpu.speed == this.cpu.SPEED_MAX) {\r\n                fPropagate = (addr !== undefined && this.nWritesSinceLastEvent >= 32);\r\n            }\r\n            else {\r\n                /*\r\n                 * We have to handle the delta being less than zero, in case the user changed the speed, thereby\r\n                 * resetting the cycle count returned by getCycles().\r\n                 */\r\n                var nCycleDelta = nCycles - this.nCyclesSinceLastEvent;\r\n                fPropagate = (nCycleDelta < 0 || nCycleDelta >= this.nCyclesThreshold);\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Next, we propagate any buffered state (in abKbdStates) as appropriate\r\n         */\r\n        if (fPropagate) {\r\n            var abKbdCols = this.aKbdStates.shift();\r\n            if (abKbdCols !== undefined) {\r\n                if (DEBUG && this.dbg) this.dbg.info(\"kbd update @\" + nCycles + \" cycles, \" + this.nWritesSinceLastEvent + \" writes\");\r\n                this.abKbdColsLast = abKbdCols;\r\n            }\r\n            this.nReadsSinceLastEvent = this.nWritesSinceLastEvent = 0;\r\n            this.nCyclesSinceLastEvent = nCycles;\r\n        }\r\n        /*\r\n         * Then we calculate the value (which may or may not have just been propagated),\r\n         * based on the currently selected keyboard row(s) (bKbdRows).\r\n         */\r\n        var b = 0;\r\n        for (var iRow=0; iRow < 8; iRow++) {\r\n            if (!(this.bKbdRows & (1 << iRow))) {\r\n                continue;\r\n            }\r\n            b |= this.abKbdColsLast[iRow];\r\n        }\r\n        /*\r\n         * Now invert all the bits, since I SET the column bit of an \"active\" key,\r\n         * whereas the C1P Model 600 keyboard expects \"active\" column bits to be CLEAR.\r\n         */\r\n        b ^= this.bInvert;\r\n\r\n        if (addr !== undefined) {\r\n            this.abMem[addr] = b;\r\n        }\r\n        else {\r\n            addr = this.offKbd;\r\n            if (b != this.bWriteLast) {\r\n                for (var offset=addr; offset < this.offKbdLimit; offset++) {\r\n                    this.abMem[offset] = b;\r\n                }\r\n            }\r\n        }\r\n        this.bWriteLast = b;\r\n        if (DEBUG && this.dbg) this.dbg.info(\"updating kbd \" + StrLib.toHexWord(addr) + \" with \" + StrLib.toHexByte(b) + (bWrite !== undefined? (\" following write \" + StrLib.toHexByte(bWrite)) : \"\") + \" @\" + nCycles + \" cycles\");\r\n    }\r\n\r\n    /**\r\n     * isShift()\r\n     *\r\n     * @this {C1PKeyboard}\r\n     * @param {number} charCode\r\n     * @returns {boolean}\r\n     *\r\n     isShift(charCode)\r\n     {\r\n         return charCode == this.CHARCODE_LSHIFT || charCode == this.CHARCODE_RSHIFT || charCode == this.CHARCODE_CTRL || charCode == this.CHARCODE_SHIFTLOCK;\r\n     }\r\n     */\r\n\r\n    /**\r\n     * C1PKeyboard.init()\r\n     *\r\n     * This function operates on every HTML element of class \"keyboard\", extracting the\r\n     * JSON-encoded parameters for the C1PKeyboard constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PKeyboard component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeKbd = Component.getElementsByClass(APPCLASS, \"keyboard\");\r\n        for (var iKbd=0; iKbd < aeKbd.length; iKbd++) {\r\n            var eKbd = aeKbd[iKbd];\r\n            var parmsKbd = Component.getComponentParms(eKbd);\r\n            var kbd = new C1PKeyboard(parmsKbd);\r\n            Component.bindComponentControls(kbd, eKbd, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialize every Keyboard module on the page.\r\n */\r\nWebLib.onInit(C1PKeyboard.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/video.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PVideo\r\n * @unrestricted\r\n */\r\nclass C1PVideo extends Component {\r\n    /**\r\n     * C1PVideo(parmsVideo, canvas, context, imgChars)\r\n     *\r\n     * The Video component can be configured with the following (parmsVideo) properties:\r\n     *\r\n     *      model: model number (one of: 540 or 600; 600 is the default)\r\n     *      screenWidth: width of the screen window, in pixels\r\n     *      screenHeight: height of the screen window, in pixels\r\n     *      charCols: number of character columns\r\n     *      charRows: number of character rows\r\n     *      charWidth: width of charSet characters, in pixels (default is 0)\r\n     *      charHeight: height of charSet characters, in pixels (default is 0)\r\n     *      charSet: path to image (eg, PNG) file that defines the character set\r\n     *      screenColor: background color of the screen window (default is black)\r\n     *\r\n     * The Video object assumes that the video buffer is organized such that offset 0 is mapped\r\n     * to the left-most column and top-most row (col=0,row=0), offset 1 is (1,0), offset 2\r\n     * is (2,0), and so on.\r\n     *\r\n     * The Video object initially contains no underlying video buffer; memory for the buffer\r\n     * must be given to it by the Computer object.  We allocate a separate buffer, called\r\n     * the screen buffer, into which we periodically copy the contents of the video buffer\r\n     * via updateScreen(); any differences between the two buffers are then rendered in the\r\n     * associated window, via updateWindow().\r\n     *\r\n     * When updateScreen() finds a byte in the screen buffer must be redisplayed, it converts\r\n     * the offset of that byte into a (col,row) character position for the updateWindow() function,\r\n     * which then converts (col,row) into (x,y) pixel offsets within the underlying canvas.\r\n     *\r\n     * Regarding the C1P (aka Model 600): The C1P has a 1K video buffer located at 0xD000-0xD3FF.\r\n     * The ROM draws the initial \"D/C/W/M ?\" prompt at the \"bottom\" of the video buffer at location\r\n     * 0xD365. That row really begins at 0xD360, but the C1P \"indents\" everything by 5 columns due\r\n     * to the lack of a \"guard band feature.\"  Similarly, BASIC defaults to a width of 24 columns\r\n     * avoid display problems near the right edge.  BASIC will let you choose a width SMALLER than\r\n     * 24 but not larger. So, while the video buffer supports a theoretical maximum of 32 rows x 32\r\n     * columns, the practical maximum is 25 rows x 24 columns; the last 4 rows of the video buffer\r\n     * are never used, and while content DOES scroll through the top 3 lines of the buffer, it should\r\n     * never be assumed that you can see the top 3 lines.\r\n     *\r\n     * This is partially confirmed by the \"C1P Character Graphics Reference Manual\", p3, which says\r\n     * that the \"the visible character field consists of 25 lines of 25 columns\" and that the \"first\r\n     * visible character in the upper left of the screen is accessed via address 53379,\" or 0xD083.\r\n     * However, they were wrong about both the number of columns and the first visible character.\r\n     *\r\n     * They probably meant 0xD085, because as mentioned earlier, the C1P indents every row by 5\r\n     * characters, not 3.  But that's not correct either, because the difference between 0xD365\r\n     * (where the bottom line starts) and 0xD085 is 0x2E0, or 736.  736 divided by 32 equals 23;\r\n     * add the bottom row, and that would give you 24 visible rows, not 25.  Since we now have\r\n     * screenshots of a C1P monitor displaying 25 rows (courtesy of Stephan Mühlstrasser), C1Pjs\r\n     * now assumes that only the first 3 lines are not visible, and that the address of the first\r\n     * visible character is actually 0xD065 (53349), yielding 25 visible rows.\r\n     *\r\n     * All of this explains why we now use setDimensions(iRowTop=3, nRowsVisible=25) instead of\r\n     * setDimensions(iRowTop=4, nRowsVisible=24) for the Model 600.\r\n     *\r\n     * Model 540 Video Board vs. Model 600 \"Superboard II\"\r\n     * ---------------------------------------------------\r\n     * This emulation was originally written for the Model 600 \"Superboard II\" (eg, Challenger 1P).\r\n     * Support for the Model 540 video board (as used in the Challenger II-4P and II-8P) was added\r\n     * later.\r\n     *\r\n     * NOTE: When Model 540 video emulation is enabled, Model 542 keyboard emulation must also be\r\n     * enabled, because the former always came with the latter keyboard interface; this is why when\r\n     * we call this.setModel(540), we must also notify the Keyboard via kbd.setModel(542).\r\n     *\r\n     * Key features/differences of the Model 540 video board include:\r\n     *\r\n     *      2K (8 pages) of video memory located at 0xD000-0xD7FF\r\n     *      Two display modes: 32 rows x 64 cols (default on power up), and 32 rows x 32 cols\r\n     *      64 bytes per screen row, regardless which display mode is selected\r\n     *      The following options can be selected via WRITE to port address 0xDE00:\r\n     *          Bit 0: clear to enable 32/64 mode (default on power up), set to enable 32/32\r\n     *          Bit 1: 1=tone on (542 keyboard)\r\n     *          Bit 2: 1=color on (Rev. B only?)\r\n     *          bit 3: 1=enable 38-40Khz AC Home control output (Rev. B only?)\r\n     *      Video timing counter status via READ from port address 0xDE00:\r\n     *          Bit 7: 0 for 1/120 second, then 1 for 1/120 second, based on video clock (60Hz)\r\n     *\r\n     * @this {C1PVideo}\r\n     * @param {Object} parmsVideo\r\n     * @param {HTMLCanvasElement} canvas\r\n     * @param {CanvasRenderingContext2D} context\r\n     * @param {HTMLImageElement} imgChars\r\n     */\r\n    constructor(parmsVideo, canvas, context, imgChars)\r\n    {\r\n        super(\"C1PVideo\", parmsVideo);\r\n\r\n        this.nDefaultModel = parmsVideo['model'];\r\n        this.nDefaultCols = parmsVideo['charCols'];\r\n        this.nDefaultRows = parmsVideo['charRows'];\r\n\r\n        this.cxScreen = parmsVideo['screenWidth'];\r\n        this.cyScreen = parmsVideo['screenHeight'];\r\n\r\n        /*\r\n         * These (source) character dimensions are tentative, and may not even be provided,\r\n         * but they will become definitive once imgChars has finished loading and setReady() is called.\r\n         */\r\n        this.cxChar = parmsVideo['charWidth'];\r\n        this.cyChar = parmsVideo['charHeight'];\r\n\r\n        /*\r\n         * This is a preliminary call to setDimensions(), to initialize default screen buffer and\r\n         * window dimensions.  A more extensive call to setDimensions() will take place when setModel()\r\n         * is called later, from reset() and possibly via the tripGuard() handler.\r\n         *\r\n         * This preliminary call merely establishes a default screen buffer size, so that when\r\n         * setBuffer() is called, it's able to verify the assigned address space is at least as big\r\n         * as the screen buffer.\r\n         */\r\n        this.setDimensions();\r\n\r\n        this.canvasScreen = canvas;\r\n        this.contextScreen = context;\r\n        this.imgChars = imgChars;\r\n\r\n        /*\r\n         * Support for disabling (or, less commonly, enabling) image smoothing, which all browsers\r\n         * seem to support now (well, OK, I still have to test the latest MS Edge browser), despite\r\n         * it still being labelled \"experimental technology\".  Let's hope the browsers standardize\r\n         * on this.  I see other options emerging, like the CSS property \"image-rendering: pixelated\"\r\n         * that's apparently been added to Chrome.  Sigh.\r\n         */\r\n        var i, sEvent, asWebPrefixes = ['', 'moz', 'ms', 'webkit'];\r\n        var fSmoothing = parmsVideo['smoothing'];\r\n        var sSmoothing = WebLib.getURLParm('smoothing');\r\n        if (sSmoothing) fSmoothing = (sSmoothing == \"true\");\r\n        if (fSmoothing != null) {\r\n            for (i = 0; i < asWebPrefixes.length; i++) {\r\n                sEvent = asWebPrefixes[i];\r\n                if (!sEvent) {\r\n                    sEvent = 'imageSmoothingEnabled';\r\n                } else {\r\n                    sEvent += 'ImageSmoothingEnabled';\r\n                }\r\n                if (this.contextScreen[sEvent] !== undefined) {\r\n                    this.contextScreen[sEvent] = fSmoothing;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * QUESTION: Does this video port exist only on the Model 540?\r\n         */\r\n        this.addrVideoPort = 0xDE00;        // WARNING: Hard-coded port address -JP\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {boolean} [fPowerOn] is true for the initial reset, so that we have\r\n     * the option of rendering \"random\" graphic characters, just like the real machine would do.\r\n     */\r\n    reset(fPowerOn)\r\n    {\r\n        this.setModel(this.nDefaultModel);\r\n\r\n        if (this.abMem) {\r\n            /*\r\n             * Let's treat every reset like a power-cycle, just for fun.\r\n             * If you don't think that's fun, then simply remove the next line.\r\n             *\r\n                fPowerOn = true;\r\n             */\r\n            for (var offset = this.offVideo; offset < this.offVideoLimit; offset++) {\r\n                var b = (fPowerOn? Math.floor(Math.random() * 256) : 0x20);\r\n\r\n                this.abMem[offset] = b;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"refresh\")\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        switch(sBinding) {\r\n        case \"refresh\":\r\n            this.bindings[sBinding] = control;\r\n            control.onclick = function(video) {\r\n                return function() {\r\n                    if (DEBUG) video.printf(\"refreshScreen()\\n\");\r\n                    video.initScreen();\r\n                    video.updateScreen();\r\n                };\r\n            }(this);\r\n            return true;\r\n        default:\r\n            break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {Array} abMemory\r\n     * @param {number} start\r\n     * @param {number} end\r\n     * @param {C1PCPU} cpu\r\n     */\r\n    setBuffer(abMemory, start, end, cpu)\r\n    {\r\n        this.abMem = abMemory;\r\n        this.offVideo = start;\r\n        this.cbVideo = end - start + 1;\r\n        this.offVideoLimit = this.offVideo + this.cbVideo;\r\n\r\n        if (cpu) {\r\n            this.cpu = cpu;\r\n            if (this.addrVideoPort !== undefined) {\r\n                cpu.addReadNotify(this.addrVideoPort, this.addrVideoPort, this, this.getByte);\r\n                cpu.addWriteNotify(this.addrVideoPort, this.addrVideoPort, this, this.setByte);\r\n            }\r\n        }\r\n        this.reset(true);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {number|undefined} [nCols] (default is nDefaultCols)\r\n     * @param {number|undefined} [nRows] (default is nDefaultRows)\r\n     * @param {number|undefined} [iRowTop] (eg, 4; default is 0)\r\n     * @param {number|undefined} [nRowsVisible] (eg, 24; default is nRows)\r\n     */\r\n    setDimensions(nCols, nRows, iRowTop, nRowsVisible)\r\n    {\r\n        this.nCols = (nCols !== undefined? nCols : this.nDefaultCols);\r\n        this.nRows = (nRows !== undefined? nRows : this.nDefaultRows);\r\n        this.cbScreen = this.nCols * this.nRows;\r\n        this.offVideoLimit = this.offVideo + this.cbScreen;\r\n        /*\r\n         * Set the first visible row and total visible rows next\r\n         */\r\n        this.iRowTop = (iRowTop !== undefined? iRowTop : 0);\r\n        this.nRowsVisible = (nRowsVisible !== undefined? nRowsVisible : nRows);\r\n        this.setDrawingDimensions();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     *\r\n     * cxScreen and cyScreen give us the overall dimensions of the destination surface.  Dividing that by the number of\r\n     * columns and rows yields a target cell size (cxCharDst,cyCharDst), which may or may not map 1-1 to the source cell size\r\n     * (cxChar,cyChar).\r\n     */\r\n    setDrawingDimensions()\r\n    {\r\n        this.cxCharDst = Math.floor(this.cxScreen / this.nCols);\r\n        this.cyCharDst = Math.floor(this.cyScreen / this.nRowsVisible);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     */\r\n    setFocus()\r\n    {\r\n        this.canvasScreen.focus();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {number} nModel\r\n     */\r\n    setModel(nModel)\r\n    {\r\n        this.nModel = nModel;\r\n        /*\r\n         * Default to model 600 behavior (1K video buffer);\r\n         * the only other supported model is 540 (2K video buffer).\r\n         */\r\n        if (this.nModel == 600) {\r\n            this.setDimensions(this.nDefaultCols, this.nDefaultRows, 3, 25);\r\n            if (this.cbScreen == 1024 && this.cpu) {\r\n                /*\r\n                 * NOTE: We deliberately set the guard address to the LAST byte of the 2K\r\n                 * buffer range, not the FIRST byte, which has the same effect but with the\r\n                 * added benefit of deferring any screen update until after the \"Model 540\"\r\n                 * screen initialization code has completely blanked the entire 2K buffer,\r\n                 * avoiding a brief flicker of unsightly characters.\r\n                 */\r\n                this.addrGuard = this.offVideoLimit + this.cbScreen - 1;\r\n                this.cpu.addWriteNotify(this.addrGuard, this.addrGuard, this, this.tripGuard);\r\n            }\r\n        }\r\n        else {\r\n            this.printf(\"updated video model: %d\\n\", this.nModel);\r\n            this.setDimensions(64, 32);\r\n        }\r\n        this.initScreen();\r\n        this.updateScreen();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {boolean} fOn\r\n     * @param {C1PComputer} cmp\r\n     */\r\n    setPower(fOn, cmp)\r\n    {\r\n        /*\r\n         * NOTE: No one should be calling power(true) before first checking isReady(), but we check\r\n         * it ourselves, too.  This also means that updateScreen() need check only fPower and not isReady(),\r\n         * since we guarantee that the former implies the latter.\r\n         */\r\n        if (fOn && !this.flags.powered && this.isReady()) {\r\n            this.flags.powered = true;\r\n            if (DEBUGGER) this.dbg = cmp.getComponentByType(\"debugger\");\r\n            /*\r\n             * If we have an associated keyboard, then ensure that the keyboard will be notified whenever\r\n             * the canvas gets focus and receives input.\r\n             *\r\n             * Also, when simulating a Model 540 video board, we need to access to the Keyboard component due\r\n             * to some shared I/O responsibilities; ie, bit 1 of the video control port at 0xDE00 enables whatever\r\n             * tone has been selected via the keyboard frequency port at 0xDF01 (frequency == 49152/n, where n\r\n             * is the value stored at 0xDF01).\r\n             */\r\n            this.kbd = cmp.getComponentByType(\"keyboard\");\r\n            if (this.kbd) {\r\n                this.kbd.setBinding(\"canvas\", \"keyDown\", this.canvasScreen);\r\n                this.kbd.setBinding(\"canvas\", \"keyPress\", this.canvasScreen);\r\n                this.kbd.setBinding(\"canvas\", \"keyUp\", this.canvasScreen);\r\n            }\r\n        }\r\n        else\r\n        if (!fOn && this.flags.powered) {\r\n            this.flags.powered = false;\r\n            /*\r\n             * This is where we would add some method of blanking the display, without the disturbing the video\r\n             * buffer contents, and blocking all further updates to the display.\r\n             */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * cxChar and cyChar are the source cell size.  Originally, those values came strictly from the parmsVideo\r\n     * 'charWidth' and 'charHeight' properties.  Now, if those aren't defined (which is normally the case now),\r\n     * then we infer the source cell size from the dimensions of imgChars, which is expected to be a 16x16 array of\r\n     * character bitmaps.  We could be even more flexible, by allowing imgChars to be any rectangular dimension\r\n     * (eg, 1x256) as long as we can assume it contains exactly 256 characters, but there's no need to get carried away.\r\n     *\r\n     * @this {C1PVideo}\r\n     * @param {boolean} [fReady] is assumed to indicate \"ready\" unless EXPLICITLY set to false\r\n     */\r\n    setReady(fReady)\r\n    {\r\n        if (!this.cxChar) this.cxChar = Math.floor(this.imgChars.width / 16);\r\n        if (!this.cyChar) this.cyChar = Math.floor(this.imgChars.height / 16);\r\n        super.setReady();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {number} addr (ie, addrVideoPort)\r\n     * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to read the specified addr)\r\n     *\r\n     * NOTE: Ordinarily, I wouldn't allow Debugger writes (addrFrom === undefined) to interfere with the simulated\r\n     * hardware state, but for now, I find it useful to be able to prod the simulation code directly from the Debugger.\r\n     */\r\n    getByte(addr, addrFrom)\r\n    {\r\n        var b = this.cpu.getByte(addr);\r\n        if (addrFrom !== undefined) {\r\n            if (DEBUGGER && this.dbg) this.dbg.messageIO(this, addr, addrFrom, this.dbg.MESSAGE_VIDEO);\r\n        }\r\n        /*\r\n         * The only documented READ bit in addrVideoPort is bit 7, which is supposed to alternate between\r\n         * 0 and 1 every 1/120 of a second.  There's no way we're going to add special code to the emulator to update\r\n         * this stupid byte every 8,333 cycles (assuming 1Mhz operation), so clearly we're going to fake it.\r\n         *\r\n         * Faking it means that any polling code will unavoidably get a stale value the FIRST time it reads bit 7.\r\n         * However, we can still do a pretty good job of faking any EXTENSIVE polling: get the number of cycles\r\n         * executed so far, divide that by 8333, floor the quotient, and then set/clear bit 7 according to whether the\r\n         * result is odd/even.\r\n         */\r\n        var nCyclesHigh = Math.floor(this.cpu.getCycles() / 8333);\r\n        this.cpu.setByte(addr, (b & 0x7F) | ((nCyclesHigh & 0x1)? 0x80 : 0));\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {number} addr (ie, addrVideoPort)\r\n     * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to write the specified addr)\r\n     */\r\n    setByte(addr, addrFrom)\r\n    {\r\n        if (addrFrom !== undefined) {\r\n            if (DEBUGGER && this.dbg) this.dbg.messageIO(this, addr, addrFrom, this.dbg.MESSAGE_VIDEO);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {number} addr (ie, addrGuard)\r\n     * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to read the specified addr)\r\n     */\r\n    tripGuard(addr, addrFrom)\r\n    {\r\n        /*\r\n         * Don't trigger any further hardware emulation (beyond what we've already stored in memory) if\r\n         * the Debugger performed this read (need a special Debugger I/O command if/when you really want to do that).\r\n         */\r\n        if (addrFrom !== undefined) {\r\n            if (DEBUGGER && this.dbg) this.dbg.messageIO(this, addr, addrFrom, this.dbg.MESSAGE_VIDEO, true);\r\n            /*\r\n             * The CPU has just written to the guard address we established just beyond the video buffer's 1K boundary,\r\n             * implying that the system thinks we have a 2K buffer instead.  So we bump our model to 540, bump the\r\n             * associated keyboard model to 542, and remove this guard handler.\r\n             */\r\n            this.setModel(540);\r\n            if (this.kbd) this.kbd.setModel(542);\r\n            this.cpu.removeWriteNotify(this.addrGuard, this.addrGuard, this, this.tripGuard);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     */\r\n    initScreen()\r\n    {\r\n        this.abScreen = new Array(this.cbScreen);\r\n        for (var offset=0; offset <= this.cbScreen; offset++) {\r\n            this.abScreen[offset] = -1; // initialize every cell of the screen to an invalid value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * updateScreen() updates the screen buffer from the video buffer and updates the window with any changes.\r\n     *\r\n     * @this {C1PVideo}\r\n     * @returns {boolean}\r\n     *\r\n     * For every byte in the video buffer, this renders it if it differs from the byte stored in the screen buffer,\r\n     * and then updates the screen buffer to match.  Since initScreen() sets every byte in the screen buffer\r\n     * to an illegal byte value (ie, a value which is outside the byte range 0x00-0xff), that assures the first call\r\n     * to updateScreen() will redraw every byte in the video buffer.\r\n     */\r\n    updateScreen()\r\n    {\r\n        var offset = 0;\r\n        if (this.flags.powered) {\r\n            while (offset < this.cbScreen) {\r\n                var b = this.abMem[this.offVideo + offset];\r\n                if (this.abScreen[offset] != b) {\r\n                    if (!this.writeByte(offset, b)) {\r\n                        break;\r\n                    }\r\n                    this.abScreen[offset] = b;\r\n                }\r\n                offset++;\r\n            }\r\n        }\r\n        return (offset == this.cbScreen);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PVideo}\r\n     * @param {number} offset\r\n     * @param {number} b\r\n     * @returns {boolean}\r\n     */\r\n    writeByte(offset, b)\r\n    {\r\n        var col = offset % this.nCols;\r\n        var row = Math.floor(offset / this.nCols);\r\n        return this.updateWindow(col, row, b);\r\n    }\r\n\r\n    /**\r\n     * updateWindow(col, row, b)\r\n     *\r\n     * Updates a particular position (row,col) in the associated window with the given byte (b)\r\n     *\r\n     * @this {C1PVideo}\r\n     * @param {number} col\r\n     * @param {number} row\r\n     * @param {number} b\r\n     * @returns {boolean} true if successful, false if not\r\n     *\r\n     * I originally used (screenWidth,screenHeight) == (512,448) and (cols,rows) == (32,32) and (cxChar,cyChar) == (16,16),\r\n     * and I simply copied the source cells 1-to-1 to the destination (16,16), knowing that we would never try to display\r\n     * more than 28 rows (the last 4 rows of the 32 possible rows were never used to display any content).  However, I should\r\n     * still have ignored any attempt to draw past row 28 (aka screenHeight 448).  I now perform row clipping and biasing,\r\n     * according to the first visible row (iRowTop) and total visible rows (nRowsVisible).\r\n     *\r\n     * Moreover, I no longer copy the source cell images to the destination 1-to-1.  I calculate (cxCharDst,cyCharDst)\r\n     * separately (see setDrawingDimensions).  And I no longer assume that (cxChar,cyChar) are (16,16); once the source\r\n     * image file has finished loading, I calculate (cxChar,cyChar) based on the size of image file (see setReady).  I made\r\n     * this change when I created chargen1x.png.  In fact, at first I thought I might be able to eliminate chargen2x.png\r\n     * and just let drawImage() scale up the individual character images from (8,8) to (16,16) or whatever (cxCharDst,cyCharDst)\r\n     * size was needed, but the results were fuzzy, so it's still best to use chargen2x.png when using larger window sizes.\r\n     */\r\n    updateWindow(col, row, b)\r\n    {\r\n        if (row >= this.iRowTop) {\r\n            row -= this.iRowTop;\r\n            if (row < this.nRowsVisible) {\r\n                var xChar = (b * this.cxChar);\r\n                var ySrc = Math.floor(xChar / this.imgChars.width) * this.cyChar;\r\n                var xSrc = xChar % this.imgChars.width;\r\n                var xDst = col * this.cxCharDst;\r\n                var yDst = row * this.cyCharDst;\r\n                // if (DEBUG) this.printf(MESSAGE.LOG, \"updateWindow(%d,%d,%#04x): drawing from %d,%d to %d,%d\\n\", col, row, b, xSrc, ySrc, xDst, yDst);\r\n                this.contextScreen.drawImage(this.imgChars, xSrc, ySrc, this.cxChar, this.cyChar, xDst, yDst, this.cxCharDst, this.cyCharDst);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * C1PVideo.init()\r\n     *\r\n     * This function operates on every HTML element of class \"video\", extracting the\r\n     * JSON-encoded parameters for the C1PVideo constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PVideo component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeVideo = Component.getElementsByClass(APPCLASS, \"video\");\r\n        for (var iVideo=0; iVideo < aeVideo.length; iVideo++) {\r\n            var eVideo = aeVideo[iVideo];\r\n            var parmsVideo = Component.getComponentParms(eVideo);\r\n\r\n            /*\r\n             * As noted in keyboard.js, the keyboard on an iOS device pops up with the SHIFT key depressed,\r\n             * which is not the initial keyboard state that the C1P expects. I originally tried to fix that by\r\n             * adding an 'autocapitalize=\"off\"' attribute alongside the 'contenteditable=\"true\"' attribute\r\n             * on the <canvas> element, but apparently Safari honors that only inside certain elements (eg, <input>).\r\n             *\r\n             * I've since settled on a better work-around in keyboard.js, so I've stopped worrying about how to make\r\n             * \"autocapitalize\" work here.\r\n             */\r\n            var eCanvas;\r\n            var aCanvas = Component.getElementsByClass(\"pcjs-canvas\", \"\", eVideo);\r\n            if (aCanvas && aCanvas.length) {\r\n                eCanvas = /** @type {HTMLCanvasElement} */ (aCanvas[0]);\r\n            } else {\r\n                eCanvas = /** @type {HTMLCanvasElement} */ (document.createElement(\"canvas\"));\r\n                if (eCanvas) {\r\n                    eCanvas.setAttribute(\"class\", \"pcjs-canvas\");\r\n                    eCanvas.setAttribute(\"width\", parmsVideo['screenWidth']);\r\n                    eCanvas.setAttribute(\"height\", parmsVideo['screenHeight']);\r\n                    eCanvas.style.backgroundColor = parmsVideo['screenColor'];\r\n                    /*\r\n                     * HACK: A canvas style of \"auto\" provides for excellent responsive canvas scaling in EVERY browser\r\n                     * except IE9/IE10, so I recalculate the appropriate CSS height every time the parent DIV is resized;\r\n                     * IE11 works without this hack, so we take advantage of the fact that IE11 doesn't report itself as \"MSIE\".\r\n                     */\r\n                    eCanvas.style.height = \"auto\";\r\n                    eVideo.appendChild(eCanvas);\r\n                }\r\n            }\r\n            if (!eCanvas || !eCanvas.getContext) {\r\n                eVideo.innerHTML = \"<br>Missing &lt;canvas&gt; support. Please try a newer web browser.\";\r\n                return;\r\n            }\r\n            eCanvas.setAttribute(\"contenteditable\", \"true\");\r\n            eCanvas.setAttribute(\"autocapitalize\", \"off\");\r\n            eCanvas.setAttribute(\"autocorrect\", \"off\");\r\n            eCanvas.setAttribute(\"spellcheck\", \"false\");\r\n\r\n            if (WebLib.getUserAgent().indexOf(\"MSIE\") >= 0) {\r\n                eCanvas.style.height = (((eVideo.clientWidth * parmsVideo['screenHeight']) / parmsVideo['screenWidth']) | 0) + \"px\";\r\n                eVideo['onresize'] = function(eParent, eChild, cx, cy) {\r\n                    return function() {\r\n                        eChild.style.height = (((eParent.clientWidth * cy) / cx) | 0) + \"px\";\r\n                    };\r\n                }(eVideo, eCanvas, parmsVideo['screenWidth'], parmsVideo['screenHeight']);\r\n            }\r\n\r\n            /*\r\n             * Now we can create the Video object, record it, and wire it up to the associated document elements.\r\n             *\r\n             * Regarding \"new Image()\", see https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement.Image:\r\n             *\r\n             *      This constructor exists for historical reasons only and returns an HTMLImageElement instance just as\r\n             *      document.createElement('img') would.\r\n             */\r\n            var imgCharSet = new Image();\r\n            var eContext = /** @type {CanvasRenderingContext2D} */ (eCanvas.getContext(\"2d\"));\r\n            var video = new C1PVideo(parmsVideo, eCanvas, eContext, imgCharSet);\r\n            var sCharSet = parmsVideo['fontROM'] || parmsVideo['charSet'];\r\n            imgCharSet.onload = function(video, sCharSet) {\r\n                return function() {\r\n                    if (DEBUG) video.printf(MESSAGE.LOG, \"onload(): finished loading %s\\n\", sCharSet);\r\n                    video.setReady();\r\n                };\r\n            }(video, sCharSet);\r\n            imgCharSet.src = sCharSet;\r\n\r\n            /*\r\n             * Bind any video-specific controls (eg, the Refresh button). There are no essential controls, however;\r\n             * even the \"Refresh\" button is just a diagnostic tool, to verify that the screen contents are up-to-date.\r\n             */\r\n            Component.bindComponentControls(video, eVideo, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialize every Video module on the page.\r\n */\r\nWebLib.onInit(C1PVideo.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/serial.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PSerialPort\r\n * @unrestricted\r\n */\r\nclass C1PSerialPort extends Component {\r\n    /**\r\n     * C1PSerialPort(parmsSerial)\r\n     *\r\n     * The SerialPort component supports the following component-specific parameters:\r\n     *\r\n     *      demo: true to inject a hard-coded BASIC demo program into the machine\r\n     *      autoMount: an object containing 'name' and 'path' properties of a resource to auto-load\r\n     *\r\n     * The autoMount parameter can be overridden with a URL parameter of the same name.\r\n     *\r\n     * @this {C1PSerialPort}\r\n     * @param {Object} parmsSerial\r\n     */\r\n    constructor(parmsSerial)\r\n    {\r\n        super(\"C1PSerialPort\", parmsSerial);\r\n\r\n        this.flags.powered = false;\r\n\r\n        this.fDemo = parmsSerial['demo'];\r\n        this.sDemo = \"10 PRINT \\\"HELLO OSI #\" + this.getMachineNum() + \"\\\"\\n\";\r\n\r\n        this.autoLoad = C1PSerialPort.AUTOLOAD_NONE;\r\n        this.autoMount = WebLib.getURLParm('autoMount') || parmsSerial['autoMount'];\r\n\r\n        if (typeof this.autoMount == \"string\") {\r\n            try {\r\n                this.autoMount = /** @type {Object} */ (eval(\"(\" + this.autoMount + \")\"));\r\n            } catch (err) {\r\n                Component.error(this.type + \" auto-mount error: \" + err.message + \" (\" + this.autoMount + \")\");\r\n                this.autoMount = null;\r\n            }\r\n        }\r\n\r\n        var path = this.autoMount && this.autoMount['path'];\r\n        if (path) {\r\n            var serial = this;\r\n            this.fDemo = true;\r\n            WebLib.getResource(path, null, true, function(sURL, sResponse, nErrorCode) {\r\n                serial.loadFile(sURL, sResponse, nErrorCode);\r\n                serial.sDemo = sResponse;\r\n                serial.autoMount = null;\r\n                /*\r\n                 * setBuffer() calls setReady() only if autoMount has been cleared; similarly, we must call setReady()\r\n                 * only if setBuffer() has already been called.\r\n                 */\r\n                if (serial.abMem) serial.setReady();\r\n            });\r\n        }\r\n        this.reset(true);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {string} sFileName\r\n     * @param {string} sFileData (null if getResource() encountered an error)\r\n     * @param {number} nResponse from server\r\n     */\r\n    loadFile(sFileName, sFileData, nResponse)\r\n    {\r\n        if (!sFileData) {\r\n            this.printf(\"Error loading file \\\"%s\\\" (%d)\\n\", sFileName, nResponse);\r\n            return;\r\n        }\r\n\r\n        this.iInput = 0;\r\n        this.sInput = sFileData;\r\n        this.fConvertLF = true;\r\n\r\n        /*\r\n         * The following code adds support for loading \"65V\" files encoded as JSON, which is a cleaner\r\n         * way to store and deliver those files when they contain binary (non-ASCII) data.\r\n         *\r\n         * For example, my 6502 ASSEMBLER/DISASSEMBLER program starts with a conventional \"65V\" loading\r\n         * sequence, which loads and launches a small program loader that loads the rest of the program\r\n         * using a raw (1-to-1) binary format instead of the usual (3-to-1) HEX format used by \"65V\" files.\r\n         *\r\n         * The \"rawness\" of the binary format also necessitates disabling fConvertLF.\r\n         */\r\n        if (sFileName.indexOf(\".json\") > 0) {\r\n            try {\r\n                /*\r\n                 * The most likely source of any exception will be here: parsing the JSON-encoded data.\r\n                 */\r\n                var s = \"\";\r\n                var data = eval(\"(\" + sFileData + \")\");\r\n                var ab = data['bytes'];\r\n                for (var i = 0; i < ab.length; i++) {\r\n                    s += String.fromCharCode(ab[i]);\r\n                }\r\n                this.sInput = s;\r\n                this.fConvertLF = false;\r\n            } catch (e) {\r\n                this.printf(\"Error processing file \\\"%s\\\": %s\\n\", sFileName, e.message);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.cmp && this.kbd && this.cpu.isRunning()) {\r\n            this.printf(\"auto-loading %s\\n\", sFileName);\r\n            if (!this.fDemo) this.startLoad(true);\r\n        }\r\n        else {\r\n            this.printf(\"%s ready to load\\n\", sFileName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {boolean} [fHard]\r\n     */\r\n    reset(fHard)\r\n    {\r\n        /*\r\n         * Because we reset the machine at the start of a 6502 HEX command file auto-load,\r\n         * we must avoid tossing the serial port's input buffer in that particular case (2).\r\n         */\r\n        if (fHard || this.autoLoad != C1PSerialPort.AUTOLOAD_6502) {\r\n\r\n            this.bInput = -1;\r\n            this.iInput = 0;\r\n            this.sInput = \"\";\r\n            if (this.fDemo) this.sInput = this.sDemo;\r\n\r\n            this.fConvertLF = true;\r\n            this.autoLoad = C1PSerialPort.AUTOLOAD_NONE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     */\r\n    start()\r\n    {\r\n        if (this.kbd && this.fDemo) {\r\n            if (this.sInput[0] == '.') {\r\n                this.fDemo = false;\r\n                this.startLoad();\r\n            } else {\r\n                this.kbd.injectKeys(\" C\\n\\n\", 1000);     // override the default injection delay (currently 300ms)\r\n                setTimeout(function(serial) {\r\n                    return function() {\r\n                        serial.fDemo = false;\r\n                        serial.startLoad();\r\n                    };\r\n                }(this), 5000);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"listSerial\")\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        var serial = this;\r\n\r\n        switch(sBinding) {\r\n\r\n        case \"listSerial\":\r\n            this.bindings[sBinding] = control;\r\n            return true;\r\n\r\n        case \"loadSerial\":\r\n            this.bindings[sBinding] = control;\r\n            control.onclick = function onClickLoadSerial(event) {\r\n                if (serial.bindings[\"listSerial\"]) {\r\n                    var sFile = serial.bindings[\"listSerial\"].value;\r\n                    // serial.printf(\"loading %s...\\n\", sFile);\r\n                    WebLib.getResource(sFile, null, true, function(sURL, sResponse, nErrorCode) {\r\n                        serial.loadFile(sURL, sResponse, nErrorCode);\r\n                    });\r\n                }\r\n            };\r\n            return true;\r\n\r\n        case \"mountSerial\":\r\n            /*\r\n             * Check for non-mobile (desktop) browser and the availability of FileReader\r\n             */\r\n            var controlInput = /** @type {Object} */ (control);\r\n            if (!WebLib.isMobile() && window && 'FileReader' in window) {\r\n                this.bindings[sBinding] = controlInput;\r\n                /*\r\n                 * Enable \"Mount\" button only if a file is actually selected\r\n                 */\r\n                controlInput.onchange = function onChangeMountSerial() {\r\n                    var fieldset = controlInput.children[0];\r\n                    var files = fieldset.children[0].files;\r\n                    var submit = fieldset.children[1];\r\n                    submit.disabled = !files.length;\r\n                };\r\n                controlInput.onsubmit = function onSubmitMountSerial(event) {\r\n                    var file = event.currentTarget[1].files[0];\r\n\r\n                    var reader = new FileReader();\r\n                    reader.onload = function() {\r\n                        // serial.printf(\"mounting %s...\\n\", file.name);\r\n                        serial.loadFile(file.name, reader.result.toString(), 0);\r\n                    };\r\n                    reader.readAsText(file);\r\n\r\n                    /*\r\n                     * Prevent reloading of web page after form submission\r\n                     */\r\n                    return false;\r\n                };\r\n            }\r\n            else {\r\n                if (DEBUG) this.printf(MESSAGE.LOG, \"Local file support not available\\n\");\r\n                controlInput.parentNode.removeChild(/** @type {Node} */ (controlInput));\r\n            }\r\n            return true;\r\n\r\n        default:\r\n            break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {Array} abMemory\r\n     * @param {number} start\r\n     * @param {number} end\r\n     * @param {C1PCPU} cpu\r\n     */\r\n    setBuffer(abMemory, start, end, cpu)\r\n    {\r\n        this.abMem = abMemory;\r\n        this.offPort = start;\r\n        this.cbPort = end - start + 1;\r\n        this.offPortLimit = this.offPort + this.cbPort;\r\n        if ((this.cpu = cpu)) {\r\n            cpu.addReadNotify(start, end, this, this.getByte);\r\n            cpu.addWriteNotify(start, end, this, this.setByte);\r\n        }\r\n        if (!this.autoMount) this.setReady();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {boolean} fOn\r\n     * @param {C1PComputer} cmp\r\n     *\r\n     * We make a note of the Computer component, so that we can invoke its reset() method whenever we need to\r\n     * simulate a warm start, and we query the Keyboard component so that we can use its injectKeys() function.\r\n     */\r\n    setPower(fOn, cmp)\r\n    {\r\n        if (fOn && !this.flags.powered) {\r\n            this.flags.powered = true;\r\n            this.cmp = cmp;\r\n            this.kbd = cmp.getComponentByType(\"keyboard\");\r\n            if (DEBUGGER) this.dbg = cmp.getComponentByType(\"debugger\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {boolean} [fReset]\r\n     */\r\n    startLoad(fReset)\r\n    {\r\n        if (this.sInput) {\r\n            /*\r\n             * QUESTION: Is this setFocus() call strictly necessary?  We're being called in the\r\n             * context of getResource(), not some user action.  If there was an original user action,\r\n             * then the handler for THAT action should take care to switch focus back, not us.\r\n             */\r\n            this.cpu.setFocus();\r\n            /*\r\n             * We interpret the presence of a \".\" at the beginning of the file as a \"65V Monitor\"\r\n             * address-mode command, and consequently treat the file as 6502 HEX command file.\r\n             *\r\n             * Anything else is treated as commands for the BASIC interpreter, which we re-initialize\r\n             * with \"NEW\" and \"LOAD\" commands.  To prevent that behavior, halt the CPU, perform the load,\r\n             * and then start it running again.  BASIC will start reading the data as soon as you type\r\n             * LOAD.\r\n             */\r\n            if (this.sInput.charAt(0) != '.') {\r\n                this.autoLoad = C1PSerialPort.AUTOLOAD_BASIC;\r\n                this.kbd.injectKeys(\"NEW\\nLOAD\\n\");\r\n            }\r\n            else {\r\n                /*\r\n                 * Set autoLoad to AUTOLOAD_6502 before the reset, so that when our reset() method is called,\r\n                 * we'll take care to preserve all the data we just loaded.\r\n                 */\r\n                this.autoLoad = C1PSerialPort.AUTOLOAD_6502;\r\n                /*\r\n                 * Although the Keyboard allows us to inject any key, even the BREAK key, like so:\r\n                 *\r\n                 *      this.kbd.injectKeys(String.fromCharCode(this.kbd.CHARCODE_BREAK))\r\n                 *\r\n                 * it's easier to initiate a reset() ourselves and then start the machine-language load process\r\n                 */\r\n                if (fReset) this.cmp.reset(true);\r\n                this.kbd.injectKeys(\"ML\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {number} addr\r\n     * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to read the specified addr)\r\n     */\r\n    getByte(addr, addrFrom)\r\n    {\r\n        /*\r\n         * Don't trigger any further hardware emulation (beyond what we've already stored in memory) if\r\n         * the Debugger performed this read (need a special Debugger I/O command if/when you really want to do that).\r\n         */\r\n        if (addrFrom !== undefined) {\r\n            /*\r\n             *  WARNING: All I need to do for now is load the COM interface's \"data byte\"\r\n             *  with the next byte from the virtual cassette data stream -JP\r\n             */\r\n            if (!(addr & 0x01)) {\r\n                /*\r\n                 * An EVEN address implies they're looking, so if we have a fresh buffer,\r\n                 * then prime the pump.\r\n                 */\r\n                if (this.sInput && !this.iInput) {\r\n                    this.advanceInput();\r\n                }\r\n            } else {\r\n                /*\r\n                 * An ODD address implies they just grabbed a data byte, so prep the next data byte.\r\n                 */\r\n                this.advanceInput();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     * @param {number} addr\r\n     * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to write the specified addr)\r\n     */\r\n    setByte(addr, addrFrom)\r\n    {\r\n        /*\r\n         * Don't trigger any further hardware emulation (beyond what we've already stored in memory) if\r\n         * the Debugger performed this write (need a special Debugger I/O command if/when you really want to do that).\r\n         */\r\n        if (addrFrom !== undefined) {\r\n            if (DEBUGGER && this.dbg) this.dbg.messageIO(this, addr, addrFrom, this.dbg.MESSAGE_SERIAL, true);\r\n            /*\r\n             * WARNING: I don't yet care what state the CPU puts the port into.  When it's time to support serial output,\r\n             * obviously that will become an issue.\r\n             */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     */\r\n    advanceInput()\r\n    {\r\n        if (this.sInput !== undefined) {\r\n            this.bInput = -1;\r\n            if (this.iInput < this.sInput.length) {\r\n                var b = this.sInput.charCodeAt(this.iInput++) & 0xff;\r\n                if (this.fConvertLF) {\r\n                    if (b == 0x0a) b = 0x0d;\r\n                }\r\n                this.bInput = b;\r\n                // if (DEBUG) this.printf(MESSAGE.LOG, \"advanceInput(%#04x)\\n\", b);\r\n            }\r\n            else {\r\n                this.sInput = \"\";\r\n                this.iInput = 0;\r\n                if (DEBUG) this.printf(MESSAGE.LOG, \"advanceInput(): out of data\\n\");\r\n                if (this.autoLoad == C1PSerialPort.AUTOLOAD_BASIC && this.kbd) {\r\n                    this.kbd.injectKeys(\" \\nRUN\\n\");\r\n                }\r\n                this.autoLoad = C1PSerialPort.AUTOLOAD_NONE;\r\n            }\r\n            this.updateMemory();\r\n        }\r\n        // else if (DEBUG) this.printf(MESSAGE.LOG, \"advanceInput(): no input\\n\");\r\n    }\r\n\r\n    /**\r\n     * @this {C1PSerialPort}\r\n     */\r\n    updateMemory()\r\n    {\r\n        var offset;\r\n        /*\r\n         * Update all the status (even) bytes\r\n         */\r\n        for (offset = this.offPort+0; offset < this.offPortLimit; offset+=2) {\r\n            this.abMem[offset] = (this.bInput >= 0? C1PSerialPort.STATUS_DATA : C1PSerialPort.STATUS_NONE);\r\n        }\r\n        /*\r\n         * Update all the data (odd) bytes\r\n         */\r\n        for (offset = this.offPort+1; offset < this.offPortLimit; offset+=2) {\r\n            this.abMem[offset] = (this.bInput >= 0? this.bInput : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * C1PSerialPort.init()\r\n     *\r\n     * This function operates on every HTML element of class \"serial\", extracting the\r\n     * JSON-encoded parameters for the C1PSerialPort constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PSerialPort component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeSerial = Component.getElementsByClass(APPCLASS, \"serial\");\r\n        for (var iSerial=0; iSerial < aeSerial.length; iSerial++) {\r\n            var eSerial = aeSerial[iSerial];\r\n            var parmsSerial = Component.getComponentParms(eSerial);\r\n            var serial = new C1PSerialPort(parmsSerial);\r\n            Component.bindComponentControls(serial, eSerial, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\nC1PSerialPort.STATUS_NONE   = 0x00;\r\nC1PSerialPort.STATUS_DATA   = 0x01;     // indicates data available\r\n\r\n/*\r\n * Values for autoLoad:\r\n *\r\n *      0: no auto-load active\r\n *      1: BASIC command file auto-load in progress\r\n *      2: 6502 HEX command file auto-load in progress\r\n */\r\nC1PSerialPort.AUTOLOAD_NONE  = 0;\r\nC1PSerialPort.AUTOLOAD_BASIC = 1;\r\nC1PSerialPort.AUTOLOAD_6502  = 2;\r\n\r\n/*\r\n * Initialize every SerialPort module on the page.\r\n */\r\nWebLib.onInit(C1PSerialPort.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/disk.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * @class Drive\r\n * @property {number} iType\r\n * @property {number} nTracks\r\n * @property {boolean} fProtected\r\n * @property {number} nIndexPulse\r\n * @property {number} iTrackSelect\r\n * @property {number} iTrackOffset\r\n * @property {Array} aTracks\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PDiskController\r\n * @unrestricted\r\n */\r\nclass C1PDiskController extends Component {\r\n    /**\r\n     * C1PDiskController(parmsDC)\r\n     *\r\n     * The C1PDiskController component has no component-specific parameters.\r\n     *\r\n     * This component is being built to supplement a C1P (aka SuperBoard II) Model 600\r\n     * single-board computer with the addition of a 610 Accessory Board, which included:\r\n     *\r\n     *      MC6820 PIA (Peripheral Interface Adapter at $C000-$C003, decoded at $C000-$C00F)\r\n     *      MC6850 ACIA (Asynchronous Communications Interface Adapter at $C010-$C011, decoded at $C010-$C01F)\r\n     *\r\n     * From \"OSI C1P Technical Report\" p.4 regarding the 610 Accessory Board:\r\n     *\r\n     *      \"This board holds up to 24K of additional RAM memory, a dual mini-floppy disk controller,\r\n     *      a BUS expansion facility to Model 620 BUS adapter, and switching circuitry to route the\r\n     *      600 board's serial interface to both the modem and printer as well as an audio cassette.\r\n     *      Thus, a fully expanded Challenger lP system can have BASIC-in-ROM, 32K of RAM memory,\r\n     *      dual mini-floppies, cassette, printer, modem, and full BUS expansion capability to the OSI\r\n     *      48 line BUS through which over 40 accessories can be added (A/D, D/A, voice, I/O, more memory,\r\n     *      etc.).\"\r\n     *\r\n     * On p.20, the Report says that the 610 Accessory Board contains:\r\n     *\r\n     *      - Up to 24K of RAM\r\n     *      - Dual mini-floppy controller\r\n     *      - Real Time Clock (although elsewhere the Report says this is disabled by default)\r\n     *      - Expansion interface to a model 620 BUS adapter\r\n     *\r\n     * On p.21, the Report also says:\r\n     *\r\n     *      \"The dual mini-floppy interface is designed after Ohio Scientific's extremely popular\r\n     *      and successful 470 floppy disk controller. This floppy disk controller and encoding\r\n     *      technique has been field proven for several years in thousands of floppy disks and is\r\n     *      believed to be one of the most reliable floppy disk configurations in existence. Although\r\n     *      the Challenger lP product line is new, it has the advantage of the experience of a company\r\n     *      which has been building high performance microcomputers for several years.\"\r\n     *\r\n     * From \"PEEK 65\" Vol.2 No.3 March 1981, p.9:\r\n     *\r\n     *      \"The 470 board wired as a floppy disk controller contains two different interfaces:\r\n     *      a PIA and an ACIA. The PIA A and B ports are used in control circuits: raise and lower\r\n     *      the head, detect drive ready, detect sector hole, clear error faults, etc. The ACIA is\r\n     *      the interface over which the data actually travels. Typical operation is to drop the head,\r\n     *      reset the ACIA, wait for the index hole to come around, activate the read or write circuit,\r\n     *      then read or write characters through the ACIA.\"\r\n     *\r\n     *      470 Board Addressing\r\n     *      --------------------\r\n     *\r\n     *      Address     Read                    Write\r\n     *      -------     ----                    -----\r\n     *      C000        PIA: PA0 thru PA7       PIA: PA0 thru PA7 or DDA0 thru DDA7\r\n     *      C001        PIA: Port A Ctrl        PIA: Port A Control\r\n     *      C002        PIA: PB0 thru PB7       PIA: PB0 thru PB7 or DDB0 thru DDB7\r\n     *      C003        PIA: Port B Ctrl        PIA: Port B Control\r\n     *      C010        ACIA: Status Reg.       ACIA: Control Register\r\n     *      C011        ACIA: Data Path         ACIA: Data Path\r\n     *      C020        Clear Real Time Clock   Clear Real Time Clock\r\n     *                  (Reset) ($FF returned)  (Reset) (Data Ignored)\r\n     *\r\n     *      PIA Data Register A Layout:\r\n     *\r\n     *      PA7     PA6     PA5     PA4     PA3     PA2     PA1     PA0\r\n     *      ---     ---     ---     ----    ---     ---     ---     ----\r\n     *      IHD  |  SD2  |  WP   |  RDY2 |  SHD  |  FD   |  TZD  |  RDY1\r\n     *      (In)    (Out)   (In)    (In)    (In)    (In)    (In)    (In)\r\n     *\r\n     *      PIA Data Register B Layout:\r\n     *\r\n     *      PB7     PB6     PB5     PB4     PB3     PB2     PB1     PB0\r\n     *      ---     ---     ---     ---     ---     ---     ---     ---\r\n     *      HLD  |  LCS  |  SD1  |  FR   |  ST   |  STI  |  EE   |  WE\r\n     *      (Out)   (Out)   (Out)   (Out)   (Out)   (Out)   (Out)   (Out)\r\n     *\r\n     *      PIA Data Register A Lines       PIA Data Register B Lines\r\n     *      -------------------------       -------------------------\r\n     *      IHD - Index Hole Detect         HLD - Head Load\r\n     *      SD2 - Select Drive 2 (Drive B)  LCS - Low Current Select\r\n     *      WP  - Write Protected           SD1 - Select Drive 1\r\n     *      RDY2- Drive 2 Ready             FR  - Fault Reset\r\n     *      SHD - Sector Hole Detect        ST  - Step\r\n     *      FD  - Fault Detected            STI - Step In\r\n     *      TZD - Track Zero Detected       EE  - Enable Erase\r\n     *      RDY1- Drive 1 Ready             WE  - Write Enable\r\n     *\r\n     * NOTE: The PIA bit assignments above agree with those described, albeit somewhat less clearly,\r\n     * in https://osiweb.org/misc/osi-hardware.txt, under \"Model 475 Floppy disk system with\r\n     * 470 Controller board\".\r\n     *\r\n     * There is apparently significant overlap with another OSI board: the Model 505 CPU Board\r\n     * used in C4P/MF systems.  According to https://osiweb.org/misc/osi-hardware.txt, it\r\n     * contained:\r\n     *\r\n     *      CPU board w/ ROM, ACIA, Floppy Disk I/O, Real Time Clock\r\n     *      ROM $FDxx, $FExx, $FFxx\r\n     *      Floppy disk interface: 6820 PIA at $C000, 6850 ACIA at $C010 [Original says \"6850 PIA\"]\r\n     *      ACIA 6850 at $FC00 for RS-232 serial I/O. Baud jumpers for 75,150,300,600,1200,2400,4800,9600\r\n     *      Disk PIA $C0xx CB1 connected to 400mSEC (2.5/sec) clock divided from system clock (RTC)\r\n     *      Home security - PIA $F700-F703\r\n     *\r\n     * Disk Formats (from http://osi.marks-lab.com/files/winOSI/old-source-V1.2/Disk_io.cpp):\r\n     *\r\n     *      5.25\" disk, 40 tracks, 8 sectors/track, 256 bytes/sector, 11 bits/byte (8E1) = 80K/disk.\r\n     *\r\n     *      NOTE: 8E1 refers to \"8 data bits, even parity, 1 stop bit,\" plus an implied start bit.\r\n     *\r\n     *      OSI uses 8E1 to give a max unformatted capacity of 2272 bytes per track (see below).\r\n     *      However other bit encodings (8N1) could give up to 2500 bytes/track.\r\n     *\r\n     *      NOTE: 8N1 refers to \"8 data bits, no parity, 1 stop bit,\" plus an implied start bit.\r\n     *\r\n     *      The standard speed for 5.25\" drives is 300rpm. Thus one rotation of the disk is 200ms.\r\n     *      Stated baud-rate is 125k or 125000 bits/sec and one serial byte is 11 bits (1 start,\r\n     *      8 data, 1 parity, 1 stop). So the theoretical absolute maximum storage per track is\r\n     *      (125000 x 0.2) / 11 = 2272 bytes or 8.8 pages.\r\n     *\r\n     *      OS-65D loses a bit more because it doesn't write until 10ms after the index pulse, so\r\n     *      (125000 x 0.19) / 11 = 2159 bytes or 8.4 pages and this doesn't even allow for the length\r\n     *      of the index pulse (a few milliseconds?) and the speed variation between drives.\r\n     *\r\n     *      8\" disk, 77 tracks, 12 sectors/track, 256 bytes/sector, 11 bits/byte (8E1) = 231K/disk.\r\n     *      OSI uses 8E1 to give a max unformatted capacity of 3772 bytes/track (see below).\r\n     *      However other bit encodings (8N1) could give up to 3900 bytes/track.\r\n     *\r\n     *      The standard speed for 8\" drives is 360rpm. Thus one rotation of the disk is 166.6ms.\r\n     *      Stated baud rate is 250K or 250000 bits/sec and one serial byte is 11 bits (1 start,\r\n     *      8 data, 1 parity, 1 stop). So the theoretical absolute maximum storage per track is\r\n     *      (250000 x 0.166 ) / 11 = 3772 or 14.7 pages.\r\n     *\r\n     *      OS-65D loses a bit more because it doesn't write until 10 mS after the index pulse, so\r\n     *      (250000 x 0.156) / 11 = 3545 bytes  or 13.8 pages and this doesn't even allow for the length\r\n     *      of the index pulse (a few milliseconds?) and the speed variation between drives.\r\n     *\r\n     *      Track 0 Format\r\n     *      --------------\r\n     *              (10ms delay after index hole)\r\n     *      0,1     load address of the track in hi,lo form\r\n     *      2       page count of how much data is written on track 0.\r\n     *      3+      sector data\r\n     *\r\n     *      Track N Format (N > 0)\r\n     *      ----------------------\r\n     *              (10ms delay after index hole)\r\n     *      0,1     2-byte start code $43, $57\r\n     *      2       BCD track number\r\n     *      3       track type code (always $58)\r\n     *      4+      sector data\r\n     *\r\n     *      Sector Format (5.25\" disks)\r\n     *      ---------------------------\r\n     *      There can be any mixture of various length sectors. The total page count can not\r\n     *      exceed 8 pages (8*256) if more than one sector is on a track. Each sector is written\r\n     *      in the following format:\r\n     *\r\n     *          previous sector length (4 if none before) times 800 microseconds of delay\r\n     *          sector start code $76\r\n     *          sector number in binary\r\n     *          sector length (#pages) in binary\r\n     *          sector data\r\n     *          (end of sector mark? $47, $53? MDS)\r\n     *\r\n     *      Directory Format\r\n     *      ----------------\r\n     *      2 sectors (1 & 2) on track 12 hold the directory information.\r\n     *      Each entry requires 8 bytes. There are a total of 64 entries. The entries are\r\n     *      formatted as follows:\r\n     *\r\n     *          0-5 ASCII 6 character filename\r\n     *          6 BCD first track of file\r\n     *          7 BCD Last track of file\r\n     *\r\n     * So far, all the 5.25\" disk images I've seen are 92160 bytes, regardless whether they have an\r\n     * .IMG or .65D extension.  If we divide that total by 40 (tracks/disk), we get 2304 (bytes/track).\r\n     * Divide 2304 by 256 (bytes/page) and we get 9 pages/track.  Presumably a fixed 9 pages was chosen\r\n     * to yield a consistent track size across the entire image, while also allowing room for all the\r\n     * metadata that's typically present on a track as well.  As explained above, the upper limit\r\n     * on data per track (both sector data and metadata) is 8.8 pages in theory, or 8.4 pages in practice.\r\n     *\r\n     * @this {C1PDiskController}\r\n     * @param {Object} parmsDC\r\n     */\r\n    constructor(parmsDC)\r\n    {\r\n        super(\"C1PDiskController\", parmsDC);\r\n\r\n        this.flags.powered = false;\r\n\r\n        /*\r\n         * Our DiskController simulates the combination of an MC6820 PIA and an MC6850 ACIA.\r\n         * This image of an OSI 470 Controller Board (http://osi.marks-lab.com/boards/images/OSI470.jpg)\r\n         * shows that the chips actually used were MC68B21P and MC68B50P.\r\n         *\r\n         * We start with definitions for the MC6820 PIA.\r\n         */\r\n        this.PORT_PDA   = 0;        // PIA Peripheral Data Register A\r\n        this.PORT_DDA   = 0;        // PIA Data Direction Register A (DDA shares the same register offset as PDA)\r\n        this.PORT_CRA   = 1;        // PIA Control Register A\r\n\r\n        this.PORT_PDB   = 2;        // PIA Peripheral Data Register B\r\n        this.PORT_DDB   = 2;        // PIA Data Direction Register B (DDB shares the same register offset as PDB)\r\n        this.PORT_CRB   = 3;        // PIA Control Register B\r\n\r\n        this.CR_IRQ1    = 0x80;     // IRQ1\r\n        this.CR_IRQ2    = 0x40;     // IRQ2\r\n     // this.CR_C2_OUT  = 0x20;     // C2 is designated an output\r\n     // this.CR_C2_CTRL = 0x18;     // C2 Control (00 and 10 mask IRQ2, 01 and 11 pass IRQ2 through to the CPU)\r\n        this.CR_PD_SEL  = 0x04;     // set to select PD (PDA or PDB), clear to select DD (DDA or DDB)\r\n     // this.CR_C1_CTRL = 0x03;     // C1 Control (00 and 10 mask IRQ1, 01 and 11 pass IRQ1 through to the CPU)\r\n\r\n        /*\r\n         * The PDA bits have the following hard-wired connections in the OSI Floppy Disk Controller.\r\n         * Each line marked INPUT should have its corresponding Data Direction bit clear (0), and each line\r\n         * marked OUTPUT should have its Data Direction bit set (1); however, we do not currently verify that\r\n         * the Data Direction bits are actually initialized to match these specs (and in fact, in the case\r\n         * of PDA_SD2, they may not be).\r\n         */\r\n        this.PDA_RDY1   = 0x01;     // INPUT:   0 = Drive 1 Ready\r\n        this.PDA_TZD    = 0x02;     // INPUT:   0 = Track Zero Detected\r\n        this.PDA_FD     = 0x04;     // INPUT:   0 = Fault Detected\r\n        this.PDA_SHD    = 0x08;     // INPUT:   0 = Sector Hole Detect\r\n        this.PDA_RDY2   = 0x10;     // INPUT:   0 = Drive 2 Ready\r\n        this.PDA_WP     = 0x20;     // INPUT:   0 = Write Protected\r\n        this.PDA_SD2    = 0x40;     // OUTPUT:  0 = Select Drive 2 (Drive B)\r\n        this.PDA_IHD    = 0x80;     // INPUT:   0 = Index Hole Detect\r\n\r\n     // this.PDB_WE     = 0x01;     // OUTPUT:  0 = Write Enable\r\n     // this.PDB_EE     = 0x02;     // OUTPUT:  0 = Erase Enable (set to 1)\r\n        this.PDB_STI    = 0x04;     // OUTPUT:  0 = Step In (away from track 0)\r\n        this.PDB_ST     = 0x08;     // OUTPUT:  0 = Step (on 1-to-0 transition)\r\n     // this.PDB_FR     = 0x10;     // OUTPUT:  0 = Fault Reset (set to 1)\r\n        this.PDB_SD1    = 0x20;     // OUTPUT:  0 = Select Drive 1\r\n     // this.PDB_LCS    = 0x40;     // OUTPUT:  0 = Low Current Select (set to 1)\r\n     // this.PDB_HLD    = 0x80;     // OUTPUT:  0 = Head Load (head on disk)\r\n\r\n        /*\r\n         * Next, definitions for the MC6850 ACIA.\r\n         *\r\n         * For reference, here are all the possible CTRL_WSEL (Word Select) values:\r\n         *\r\n         *      000     0x00        7 bits, even parity, 2 stop bits\r\n         *      001     0x04        7 bits, odd parity, 2 stop bits\r\n         *      010     0x08        7 bits, even parity, 1 stop bit\r\n         *      011     0x0C        7 bits, odd parity, 1 stop bit\r\n         *      100     0x10        8 bits, 2 stop bits\r\n         *      101     0x14        8 bits, 1 stop bit\r\n         *      110     0x18        8 bits, even parity, 1 stop bit\r\n         *      111     0x1C        8 bits, odd parity, 1 stop bit\r\n         *\r\n         * And here are all the possible CTRL_TCTL (Transmit Control) values:\r\n         *\r\n         *      00      0x00        RTS=Low, Transmitting Interrupt Disabled\r\n         *      01      0x20        RTS=Low, Transmitting Interrupt Enabled\r\n         *      10      0x40        RTS=High, Transmitting Interrupt Disabled\r\n         *      11      0x60        RTS=Low, Transmits a Break level on the Transmit Data Output; Transmitting Interrupt Disabled\r\n         */\r\n        this.PORT_CTRL = 0x10;  // ACIA Control Register (WRITE-only)\r\n        this.PORT_STAT = 0x10;  // ACIA Status Register (READ-only)\r\n        this.PORT_DATA = 0x11;  // ACIA Data Register (Transmit Data Register on WRITE, Receive Data Register on READ)\r\n\r\n        this.CTRL_CDIV  = 0x03; // Counter Divide (CR1,CR0) [OSI sets both, performing a \"Master Reset\", then immediately clears both, for a divide ratio of 1]\r\n     // this.CTRL_WSEL  = 0x1C; // Word Select (CR4,CR3,CR2), determining word length, parity and stop bits [OSI selects 0x18 for \"8 bits, even parity, 1 stop bit\"]\r\n     // this.CTRL_TCTL  = 0x60; // Transmit Control (CR6,CR5) [OSI selects 0x40 for \"RTS=High, Transmitting Interrupt Disabled\"]\r\n     // this.CTRL_RINT  = 0x80; // Receive Interrupt Enable (CR7) [OSI selects 0x00 for interrupts disabled]\r\n\r\n        this.STAT_RDRF  = 0x01; // Receive Data Register Full\r\n        this.STAT_TDRE  = 0x02; // Transmit Data Register Empty\r\n        this.STAT_DCD   = 0x04; // Data Carrier Detect\r\n        this.STAT_CTS   = 0x08; // Clear To Send\r\n     // this.STAT_FE    = 0x10; // Framing Error (ie, the received character is improperly framed by a start and a stop bit and is detected by the absence of the first stop bit)\r\n     // this.STAT_OVRN  = 0x20; // Receiver Overrun (ie, one or more characters in the data stream were lost due to not being read from the Receive Data Register in time)\r\n     // this.STAT_PE    = 0x40; // Parity Error (ie, the number of highs (ones) in the character does not agree with the preselected odd or even parity)\r\n     // this.STAT_IRQ   = 0x80; // Interrupt Request (ie, state of the IRQ output; cleared by a read operation to the Receive Data Register or a write operation to the Transmit Data Register)\r\n\r\n        /*\r\n         * Last but not least, some internal state definitions and hard-coded assumptions\r\n         */\r\n        this.DRIVETYPE_5INCH = 0;\r\n     // this.DRIVETYPE_8INCH = 1;\r\n\r\n        this.MAXTRACKS_5INCH = 40;\r\n     // this.MAXTRACKS_8INCH = 77;\r\n\r\n        /*\r\n         * Some random OS-65D notes\r\n         *\r\n         * Version 3.3 Initialization Code\r\n         * -------------------------------\r\n         *\r\n         * The following code (where X is 0x00):\r\n         *\r\n         *      2217 8E 01 F4  STX $F401\r\n         *      221A 8E 00 F4  STX $F400\r\n         *      221D 8E 03 F4  STX $F403\r\n         *\r\n         * is intended to reset a Printer PIA located at 0xF400.\r\n         *\r\n         * It then takes a detour to \"SET KEYBOARD SOUND GENERATOR TO LOWEST FREQUENCY (192.753 HZ)\"\r\n         * with X set to 0xFF; the sound generator is supposed to be turned off a bit later, presumably\r\n         * at the same time it sets \"64 char/line\" mode -- well, that's what v3.2 did anyway.\r\n         *\r\n         *      2220 CA        DEX\r\n         *      2221 8E 01 DF  STX $DF01\r\n         *\r\n         * While X is still 0xFF, it continues initializing the Printer PIA:\r\n         *\r\n         *      2224 8E 02 F4  STX $F402\r\n         *\r\n         * Then the code fiddles a bit with a mystery serial port (perhaps the \"Model 430B Cassette & Analog I/O\"\r\n         * interface?)\r\n         *\r\n         *      2227 AD 06 FB  LDA $FB06\r\n         *      222A 8E 05 FB  STX $FB05\r\n         *\r\n         * And then it's back to more Printer PIA initialization:\r\n         *\r\n         *      222D A9 04     LDA #$04\r\n         *      222F 8D 01 F4  STA $F401\r\n         *      2232 8D 03 F4  STA $F403\r\n         *\r\n         * Then it does some disk resetting (with A still 0x04 and Y set to 0x00):\r\n         *\r\n         *      2235 8C 01 C0  STY $C001\r\n         *      2238 A0 40     LDY #$40 ;'@'\r\n         *      223A 8C 00 C0  STY $C000\r\n         *      223D 8D 01 C0  STA $C001\r\n         *\r\n         * This code supposedly selects DRIVE 1:\r\n         *\r\n         *      2240 A9 01     LDA #$01\r\n         *      2242 20 C6 29  JSR $29C6\r\n         *\r\n         * Then it \"resets\" and \"sets\" the TERMINAL ACIA.  Note that the C1P serial port is addressed\r\n         * at 0xF000-0xF0FF, and the C1P has ROM mapped to 0xF800-0xFFFF, so we know nothing of the serial\r\n         * port mentioned above at 0xFBxx, nor this terminal ACIA port at 0xFCxx.\r\n         *\r\n         *      2245 A9 03     LDA #$03\r\n         *      2247 8D 00 FC  STA $FC00\r\n         *      224A A0 11     LDY #$11\r\n         *      224C 8C 00 FC  STY $FC00\r\n         *\r\n         * Next, there's some code to \"SET CA-10X 16 WAY SERIAL BOARD\" at 0xCF00-0xCF1F; again, something\r\n         * we know nothing about:\r\n         *\r\n         *      224F A2 1E     LDX #$1E\r\n         *      2251 9D 00 CF  STA $CF00,X\r\n         *      2254 98        TYA\r\n         *      2255 9D 00 CF  STA $CF00,X\r\n         *      2258 A9 03     LDA #$03\r\n         *      225A CA        DEX\r\n         *      225B CA        DEX\r\n         *      225C 10 F3     BPL $2251\r\n         *\r\n         * Then it clears 8 pages of video memory (ie, it simply ASSUMES that this is a Model 540 video board\r\n         * with 2K of video memory):\r\n         *\r\n         *      225E A2 08     LDX #$08\r\n         *      2260 A9 D0     LDA #$D0\r\n         *      2262 85 FF     STA $FF\r\n         *      2264 A0 00     LDY #$00\r\n         *      2266 84 FE     STY $FE\r\n         *      2268 A9 20     LDA #$20 ;' '\r\n         *      226A 91 FE     STA ($FE),Y\r\n         *      226C C8        INY\r\n         *      226D D0 FB     BNE $226A\r\n         *      226F E6 FF     INC $FF\r\n         *      2271 CA        DEX\r\n         *      2272 D0 F6     BNE $226A\r\n         *\r\n         * Then it performs a memory test, starting with a high page of 0xBF, and stores the highest page of\r\n         * available RAM at 0x2300:\r\n         *\r\n         *      2276 A0 BF     LDY #$BF\r\n         *      2278 20 EC 22  JSR $22EC\r\n         *      227B F0 03     BEQ $2280\r\n         *      227D 88        DEY\r\n         *      227E D0 F8     BNE $2278\r\n         *      2280 8C 00 23  STY $2300\r\n         *\r\n         * Now it checks for \"SERIAL OR VIDEO (EITHER 65-A OR 65-V PROM)\" (the byte at 0xFE01 on a C1P is 0x28,\r\n         * so X will be 2, implying \"VIDEO\"):\r\n         *\r\n         *      2283 A2 01     LDX #$01\r\n         *      2285 AD 01 FE  LDA $FE01\r\n         *      2288 F0 01     BEQ $228B\r\n         *      228A E8        INX\r\n         *      228B 8E C6 2A  STX $2AC6\r\n         *\r\n         * Finally, there's some code that's a little different from v3.2; in 3.2, it would set X to 0x01\r\n         * and then store X at 0xDE00, effectively forcing the video board into \"64 char/line\" mode -- which was\r\n         * originally EXACTLY what I was looking for in the video emulation component.  But v3.3 doesn't do that.\r\n         * Here's what it does instead:\r\n         *\r\n         *      228F A2 00     LDX #$00\r\n         *      2291 8E 80 DC  STX $DC80\r\n         *\r\n         * So, what's supposed to be at 0xDC80?\r\n         */\r\n\r\n        this.reset(true);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDiskController}\r\n     * @param {boolean|undefined} [fPowerOn] is true for the initial reset only\r\n     */\r\n    reset(fPowerOn)\r\n    {\r\n        this.resetRegs();\r\n        this.iDriveSelect = -1;\r\n        if (fPowerOn) {\r\n            this.aDrives = [];\r\n            this.resetDrive(0, this.DRIVETYPE_5INCH, this.MAXTRACKS_5INCH);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDiskController}\r\n     */\r\n    resetRegs()\r\n    {\r\n        this.regDDA = {\r\n            bits: this.PDA_SD2, // clear all DDA bits, indicating that all PDA bits represent INPUT lines (well, except for PDA_SD2)\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    if (b !== undefined) this.bits = b;\r\n                    if (!(controller.regCRA.bits & controller.CR_PD_SEL)) {\r\n                        controller.writePort(controller.PORT_DDA, this);\r\n                    }\r\n                };\r\n            }(this)\r\n        };\r\n        this.regPDA = {\r\n            bits: 0xff,\r\n            read: function() {\r\n                this.update();\r\n            },\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    this.bits = controller.updatePDA(b);\r\n                    if (controller.regCRA.bits & controller.CR_PD_SEL) {\r\n                        controller.writePort(controller.PORT_PDA, this);\r\n                    }\r\n                };\r\n            }(this)\r\n        };\r\n        this.regCRA = {\r\n            bits: 0,\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    /*\r\n                     * Most bits written to CRA should be left as-is (the CPU should read back what it wrote);\r\n                     * bits 7 and 6 (IRQ1 and IRQ2) are exceptions, since those are tied to peripheral \"Control Lines\"\r\n                     * C1 and C2, which can in theory generate an interrupt depending on how the C1_CTRL and C2_CTRL bits\r\n                     * in CRA are set.  However, assuming there's no need to simulate interrupts for this particular\r\n                     * controller hardware, all we'll do is simply insure those two bits are always off.\r\n                     */\r\n                    if (b !== undefined) this.bits = (b & ~(controller.CR_IRQ1 | controller.CR_IRQ2));\r\n                    controller.writePort(controller.PORT_CRA, this);\r\n                    /*\r\n                     * Since a CRA write may have also changed which register (PDA or DDA) is enabled via the corresponding\r\n                     * PDA port, we simply ask ask both to update (only the one that's enabled will write itself to memory).\r\n                     */\r\n                    controller.regPDA.update();\r\n                    controller.regDDA.update();\r\n                };\r\n            }(this)\r\n        };\r\n        this.regDDB = {\r\n            bits: 0xff,         // set all DDB bits, indicating that all PDB bits represent OUTPUT lines\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    if (b !== undefined) this.bits = b;\r\n                    if (!(controller.regCRB.bits & controller.CR_PD_SEL)) {\r\n                        controller.writePort(controller.PORT_DDB, this);\r\n                    }\r\n                };\r\n            }(this)\r\n        };\r\n        this.regPDB = {\r\n            bits: 0xff,\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    this.bits = controller.updatePDB(b);\r\n                    if (controller.regCRB.bits & controller.CR_PD_SEL) {\r\n                        controller.writePort(controller.PORT_PDB, this);\r\n                    }\r\n                };\r\n            }(this)\r\n        };\r\n        this.regCRB = {\r\n            bits: 0,\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    /*\r\n                     * Most bits written to CRB should be left as-is (the CPU should read back what it wrote);\r\n                     * bits 7 and 6 (IRQ1 and IRQ2) are exceptions, since those are tied to peripheral \"Control Lines\"\r\n                     * C1 and C2, which can in theory generate an interrupt depending on how the C1_CTRL and C2_CTRL bits\r\n                     * in CRB are set.  However, assuming there's no need to simulate interrupts for this particular\r\n                     * controller hardware, all we'll do is simply insure those two bits are always off.\r\n                     */\r\n                    if (b !== undefined) this.bits = (b & ~(controller.CR_IRQ1 | controller.CR_IRQ2));\r\n                    controller.writePort(controller.PORT_CRB, this);\r\n                    /*\r\n                     * Since a CRB write may have also changed which register (PDB or DDB) is enabled via the corresponding\r\n                     * PDB port, we simply ask ask both to update (only the one that's enabled will write itself to memory).\r\n                     */\r\n                    controller.regPDB.update();\r\n                    controller.regDDB.update();\r\n                };\r\n            }(this)\r\n        };\r\n        this.regCTRL = {\r\n            bits: 0,\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    if (b !== undefined) {\r\n                        if ((b & controller.CTRL_CDIV) == controller.CTRL_CDIV) {\r\n                            /*\r\n                             * Setting both CTRL_CDIV bits (CR0 and CR1) constitutes a \"Master Reset\" of the ACIA\r\n                             */\r\n                            controller.regSTAT.bits = (controller.STAT_TDRE | controller.STAT_DCD | controller.STAT_CTS);\r\n                        }\r\n                        this.bits = b;\r\n                    }\r\n                    // regCTRL isn't readable; instead, we ensure regSTAT is rewritten in its place\r\n                    controller.regSTAT.update();\r\n                };\r\n            }(this)\r\n        };\r\n        this.regSTAT = {\r\n            bits: (this.STAT_TDRE | this.STAT_DCD | this.STAT_CTS),\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    this.bits = controller.updateSTAT(b);\r\n                    controller.writePort(controller.PORT_STAT, this);\r\n                };\r\n            }(this)\r\n        };\r\n        this.regDATA = {\r\n            bits: 0,\r\n            read: function(controller) {\r\n                return function() {\r\n                    controller.advanceDriveData();\r\n                };\r\n            }(this),\r\n            update: function(controller) {\r\n                return function(b) {\r\n                    if (b !== undefined) this.bits = b;\r\n                    controller.writePort(controller.PORT_DATA, this);\r\n                };\r\n            }(this)\r\n        };\r\n        this.regUnknown = {\r\n            bits: 0,\r\n            read: function() {},\r\n            update: function(controller) {\r\n                return function(b) {};\r\n            }(this)\r\n        };\r\n        if (DEBUG) {\r\n            this.regDDA.sName = \"DDA\",\r\n            this.regDDA.aBitIDs = {0x80:\"DD7\",0x40:\"DD6\",0x20:\"DD5\",0x10:\"DD4\",0x08:\"DD3\",0x04:\"DD2\",0x02:\"DD1\",0x01:\"DD0\"};\r\n            this.regPDA.sName = \"PDA\";\r\n            this.regPDA.aBitIDs = {0x80:\"IHD\",0x40:\"SD2\",0x20:\"WP\",0x10:\"RDY2\",0x08:\"SHD\",0x04:\"FD\",0x02:\"TZD\",0x01:\"RDY1\"};\r\n            this.regCRA.sName = \"CRA\";\r\n            this.regCRA.aBitIDs = {0x80:\"IRQ1\",0x40:\"IRQ2\",0x20:\"C2OUT\",0x10:\"C2:1\",0x08:\"C2:0\",0x04:\"PDS\",0x02:\"C1:1\",0x01:\"C1:0\"};\r\n            this.regDDB.sName = \"DDB\";\r\n            this.regDDB.aBitIDs = {0x80:\"DD7\",0x40:\"DD6\",0x20:\"DD5\",0x10:\"DD4\",0x08:\"DD3\",0x04:\"DD2\",0x02:\"DD1\",0x01:\"DD0\"};\r\n            this.regPDB.sName = \"PDB\";\r\n            this.regPDB.aBitIDs = {0x80:\"HLD\",0x40:\"LCS\",0x20:\"SD1\",0x10:\"FR\",0x08:\"ST\",0x04:\"STI\",0x02:\"EE\",0x01:\"WE\"};\r\n            this.regCRB.sName = \"CRB\";\r\n            this.regCRB.aBitIDs = {0x80:\"IRQ1\",0x40:\"IRQ2\",0x20:\"C2OUT\",0x10:\"C2:1\",0x08:\"C2:0\",0x04:\"PDS\",0x02:\"C1:1\",0x01:\"C1:0\"};\r\n            this.regCTRL.sName = \"CTRL\";\r\n            this.regCTRL.aBitIDs = {0x80:\"CR7\",0x40:\"CR6\",0x20:\"CR5\",0x10:\"CR4\",0x08:\"CR3\",0x04:\"CR2\",0x02:\"CR1\",0x01:\"CR0\"};\r\n            this.regSTAT.sName = \"STAT\";\r\n            this.regDATA.sName = \"DATA\";\r\n            this.regUnknown.sName = \"unknown\";\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {number} iDrive\r\n    * @param {number} iDriveType\r\n    * @param {number} nMaxTracks\r\n    */\r\n    resetDrive(iDrive, iDriveType, nMaxTracks)\r\n    {\r\n        this.aDrives[iDrive] = {\r\n            iType: iDriveType,\r\n            nTracks: nMaxTracks,\r\n            fProtected: true,               // fake for now\r\n            nIndexPulse: 20,                // nIndex (20 is initial index pulse)\r\n            iTrackSelect: 0,                // nTrack\r\n            iTrackOffset: -1,               // nSector\r\n            /*\r\n             * Our disk data consists of an array of tracks, where each track is an array of sectors;\r\n             * as long as aTracks.length == 0 (empty array), the drive is not considered \"loaded\" with a disk.\r\n             */\r\n            aTracks: []\r\n        };\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\")\r\n    * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"listDisk\")\r\n    * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n    * @param {string} [sValue] optional data value\r\n    * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n    */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        switch(sBinding) {\r\n\r\n        case \"listDisk\":\r\n            this.bindings[sBinding] = control;\r\n            return true;\r\n\r\n        case \"loadDisk\":\r\n            this.bindings[sBinding] = control;\r\n            control.onclick = function(controller) {\r\n                return function() {\r\n                    if (controller.bindings[\"listDisk\"]) {\r\n                        var sFilePath = controller.bindings[\"listDisk\"].value;\r\n                        var sFileURL = sFilePath;\r\n                        /*\r\n                         * If the selected disk image has a \".json\" extension, then we assume it's a pre-converted\r\n                         * JSON-encoded disk image, so we load it as-is; otherwise, we ask our server-side disk image\r\n                         * converter to return the corresponding JSON-encoded data, in compact form (ie, minimal whitespace,\r\n                         * no ASCII data comments, etc).\r\n                         */\r\n                        if (sFilePath.substr(sFilePath.length-5) != \".json\") {\r\n                            /*\r\n                             * TODO: This code was using a deprecated parameter (compact=1); make sure things still work.\r\n                             *\r\n                             * TODO: Convert this code to use the new shared Disk API definitions and weblib functions; eg:\r\n                             *\r\n                             *      sDiskURL = WebLib.getHostOrigin() + DumpAPI.ENDPOINT + \"?\" + DumpAPI.QUERY.DISK + \"=\" + sDiskPath;\r\n                             */\r\n                            sFileURL = \"http://\" + window.location.host + \"/api/v1/dump?disk=\" + sFilePath;\r\n                        }\r\n                        controller.printf(\"loading  %s...\\n\", StrLib.getBaseName(sFilePath));\r\n                        WebLib.getResource(sFileURL, null, true, function(sURL, sResponse, nErrorCode) {\r\n                            controller.loadDisk(sURL, sResponse, nErrorCode);\r\n                        });\r\n                    }\r\n                };\r\n            }(this);\r\n            return true;\r\n\r\n        default:\r\n            break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {Array} abMemory\r\n    * @param {number} start\r\n    * @param {number} end\r\n    * @param {C1PCPU} cpu\r\n    */\r\n    setBuffer(abMemory, start, end, cpu)\r\n    {\r\n        this.abMem = abMemory;\r\n        this.addrController = start;\r\n     // this.addrControllerLimit = end + 1;\r\n        if ((this.cpu = cpu)) {\r\n            cpu.addReadNotify(start, end, this, this.getByte);\r\n            cpu.addWriteNotify(start, end, this, this.setByte);\r\n        }\r\n        this.setReady();\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {boolean} fOn\r\n    * @param {C1PComputer} cmp\r\n    *\r\n    * We need We make a note of the Computer component, so that we can invoke its reset() method whenever we need to\r\n    * simulate a warm start, and we query the Keyboard component so that we can use its injectKeys() function.\r\n    */\r\n    setPower(fOn, cmp)\r\n    {\r\n        if (fOn && !this.flags.powered) {\r\n            this.flags.powered = true;\r\n            if (DEBUGGER) this.dbg = cmp.getComponentByType(\"debugger\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {string} sDiskName\r\n    * @param {string} sDiskData\r\n    * @param {number} nErrorCode (response from server if anything other than 200)\r\n    *\r\n    * NOTE: Although I've expanded the JSON disk-image format to support multiple heads (ie, platters or disk surfaces),\r\n    * this controller implementation currently supports only single-head drives, and therefore only single-sided images.\r\n    * So, if the image contains more than one entry in head data array, all we use is the first entry; data for any remaining\r\n    * heads is discarded.\r\n    *\r\n    * WARNING: The disk-image format should match that used by PCjs, where the image is an array of cylinders, each of which\r\n    * is an array of heads.  That's also more typical, because it maintains the original data's physical locality.\r\n    */\r\n    loadDisk(sDiskName, sDiskData, nErrorCode)\r\n    {\r\n        if (nErrorCode) {\r\n            this.printf(\"disk load error (%d)\\n\", nErrorCode);\r\n            return;\r\n        }\r\n        var aHeads = [];\r\n        this.printf(\"mounting %s...\\n\", sDiskName);\r\n        try {\r\n            /*\r\n             * The most likely source of any exception will be right here, where we're parsing\r\n             * the JSON-encoded disk data.\r\n             */\r\n            aHeads = eval(\"(\" + sDiskData + \")\");\r\n            if (!aHeads.length) {\r\n                this.printf(\"no data: %s\\n\", sDiskName);\r\n                return;\r\n            }\r\n            if (!aHeads[0].length) {\r\n                this.printf(\"no tracks: %s\\n\", sDiskName);\r\n                return;\r\n            }\r\n            var aTracks = aHeads[0];\r\n            if (aTracks[0]['trackNum'] === undefined) {\r\n                this.printf(\"data error: %d\\n\", aTracks[0]);\r\n                return;\r\n            }\r\n            /*\r\n             * NOTE: This should never happen, otherwise we shouldn't have initiated the load\r\n             * in the first place. Can we guarantee that and eliminate this test?\r\n             */\r\n            if (!this.aDrives[0]) {\r\n                this.printf(\"no available drives\\n\");\r\n                return;\r\n            }\r\n            /*\r\n             * To make disk access more efficient, we need to supplement every track object with a\r\n             * simple byte-array (trackData) containing all the data bytes for the entire track.\r\n             */\r\n            for (var iTrack=0; iTrack < aTracks.length; iTrack++) {\r\n                var iTrackNum;\r\n                var track = aTracks[iTrack];\r\n                var sectors = track['sectors'];\r\n                /*\r\n                 * WARNING: There are MANY other ways the track data could be malformed, but we'll\r\n                 * start with the most egregious, and worry about the rest later.\r\n                 */\r\n                if ((iTrackNum = track['trackNum']) === undefined || sectors === undefined) {\r\n                    throw new Error(\"track \" + iTrack + \" missing data\");\r\n                }\r\n                /*\r\n                 * WARNING: We allow out-of-order tracks, because we store each track's data according\r\n                 * to its trackNum index, but just in case that wasn't intended, we're going to mention it.\r\n                 */\r\n                if (iTrackNum != iTrack) {\r\n                    Component.warning(\"track \" + iTrackNum + \" out of order (expected \" + iTrack + \")\");\r\n                }\r\n                /*\r\n                 * For each track, we start with an empty trackData array and \"push\" (ie, append) all the\r\n                 * sector data onto it. Most of the data is already in byte form and can simply use Array.push(),\r\n                 * but there is also some metadata (signatures, types, lengths, etc), for which we have assorted\r\n                 * helpers below: pushBCD, pushBin, and pushSig.\r\n                 */\r\n                var trackData = [], sector, sectorData, i;\r\n                if (!iTrackNum) {\r\n                    sector = sectors[0];\r\n                    sectorData = sector['sectorData'];\r\n                    this.pushBin(trackData, track, 'trackLoad', 2);\r\n                    this.pushBin(trackData, sector, 'sectorPages');\r\n                    for (i = 0; i < sectorData.length; i++) {\r\n                        trackData.push(sectorData[i]);\r\n                    }\r\n                }\r\n                else {\r\n                    this.pushSig(trackData, track, 'trackSig');\r\n                    this.pushBCD(trackData, track, 'trackNum');\r\n                    this.pushBin(trackData, track, 'trackType');\r\n                    for (var iSector=0; iSector < sectors.length; iSector++) {\r\n                        sector = sectors[iSector];\r\n                        sectorData = sector['sectorData'];\r\n                        this.pushBin(trackData, sector, 'sectorSig');\r\n                        this.pushBin(trackData, sector, 'sectorNum');\r\n                        this.pushBin(trackData, sector, 'sectorPages');\r\n                        for (i = 0; i < sectorData.length; i++) {\r\n                            trackData.push(sectorData[i]);\r\n                        }\r\n                        this.pushSig(trackData, sector, 'sectorEndSig');\r\n                    }\r\n                }\r\n                /*\r\n                 * Finally, here's where we add the newly-created chunk of track data to the current track object\r\n                 */\r\n                aTracks[iTrackNum].trackData = trackData;\r\n                if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_DISK)) {\r\n                    this.dbg.printf(\"track %d: %d bytes\\n\", iTrackNum, trackData.length);\r\n                }\r\n            }\r\n            this.aDrives[0].aTracks = aTracks;\r\n            this.printf(\"mount of %s complete\\n\", sDiskName);\r\n        } catch (e) {\r\n            this.printf(\"disk data error: %s\\n\", e.message);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {Array.<number>} a\r\n    * @param {Object} o is the object containing the key\r\n    * @param {string} k is the key of 8-bit value to convert to BCD (ie, two 4-bit BCD digits) and push\r\n    */\r\n    pushBCD(a, o, k)\r\n    {\r\n        var n = o[k];\r\n        if (n === undefined) {\r\n            throw new Error(\"missing bcd value: \" + k);\r\n        }\r\n        var bcd = (Math.floor(n / 10) << 4) | (n % 10);\r\n        a.push(bcd);\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {Array.<number>} a\r\n    * @param {Object} o is the object containing the key\r\n    * @param {string} k is the key of the value\r\n    * @param {number} [cb] is the number of bytes to push (only 1 or 2 is supported, and the default is 1)\r\n    */\r\n    pushBin(a, o, k, cb)\r\n    {\r\n        var n = o[k];\r\n        if (n === undefined) {\r\n            throw new Error(\"missing binary value: \" + k);\r\n        }\r\n        if (cb == 2) {\r\n            a.push((n >> 8) & 0xff);\r\n        }\r\n        a.push(n & 0xff);\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {Array.<number>} a\r\n    * @param {Object} o is the object containing the key\r\n    * @param {string} k is the key of the signature string to push\r\n    */\r\n    pushSig(a, o, k)\r\n    {\r\n        var s = o[k];\r\n        if (s === undefined) {\r\n            throw new Error(\"missing signature: \" + k);\r\n        }\r\n        for (var i=0; i < s.length; i++) {\r\n            a.push(s.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {number} port address (0x0000-0x00FF) relative to addrController (0xC000)\r\n    * @param {boolean} fWrite is true if port write, false if port read\r\n    * @returns {Object} reg will always be a valid register object, but it may be the \"unknown\" register if we don't recognize the port.\r\n    */\r\n    getReg(port, fWrite)\r\n    {\r\n        var reg;\r\n        port &= 0x3F;\r\n        /*\r\n         * Now that we've masked the full port range of 0x00-0xFF down to 0x00-0x3F, we further mask the\r\n         * PIA port range (0x00-0x0F) to 0x00-0x03, and the ACIA port range (0x10-0x1F) to 0x10-0x11.\r\n         * The rest of the masked range (0x20-0x3F) is unmapped, so we map it to our global unknown register.\r\n         */\r\n        if (port < 0x10) {\r\n            port &= 0x03;\r\n        }\r\n        else if (port < 0x20) {\r\n            port &= 0x11;\r\n        }\r\n        switch(port) {\r\n        case this.PORT_PDA:\r\n            reg = (this.regCRA.bits & this.CR_PD_SEL)? this.regPDA : this.regDDA;\r\n            break;\r\n        case this.PORT_CRA:\r\n            reg = this.regCRA;\r\n            break;\r\n        case this.PORT_PDB:\r\n            reg = (this.regCRB.bits & this.CR_PD_SEL)? this.regPDB : this.regDDB;\r\n            break;\r\n        case this.PORT_CRB:\r\n            reg = this.regCRB;\r\n            break;\r\n        case this.PORT_CTRL:\r\n            reg = (fWrite? this.regCTRL : this.regSTAT);\r\n            break;\r\n        case this.PORT_DATA:\r\n            reg = this.regDATA;\r\n            break;\r\n        default:\r\n            reg = this.regUnknown;\r\n            break;\r\n        }\r\n        return reg;\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {number} addr\r\n    * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to read the specified addr)\r\n    */\r\n    getByte(addr, addrFrom)\r\n    {\r\n        /*\r\n         * Don't trigger any further hardware emulation (beyond what we've already stored in memory) if\r\n         * the Debugger performed this read (need a special Debugger I/O command if/when you really want to do that).\r\n         */\r\n        if (addrFrom !== undefined) {\r\n            var port = addr - this.addrController;\r\n            var reg = this.getReg(port, false);\r\n            if (DEBUGGER && this.dbg) this.dbg.messageIO(this, addr, addrFrom, this.dbg.MESSAGE_DISK, false, reg.sName);\r\n            reg.read();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {number} addr\r\n    * @param {number|undefined} addrFrom (not defined whenever the Debugger tries to write the specified addr)\r\n    */\r\n    setByte(addr, addrFrom)\r\n    {\r\n        /*\r\n         * Don't trigger any further hardware emulation (beyond what we've already stored in memory) if\r\n         * the Debugger performed this write (need a special Debugger I/O command if/when you really want to do that).\r\n         */\r\n        if (addrFrom !== undefined) {\r\n            var b = this.cpu.getByte(addr);\r\n            var port = addr - this.addrController;\r\n            var reg = this.getReg(port, true);\r\n            if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_DISK | this.dbg.MESSAGE_PORT)) {\r\n                this.dbg.messageIO(this, addr, addrFrom, this.dbg.MESSAGE_DISK, true, reg.sName);\r\n                if (reg.aBitIDs) {\r\n                    var bTest = 0x80;\r\n                    var bChanged = reg.bits ^ b;\r\n                    while (bChanged && bTest) {\r\n                        if (bChanged & bTest) {\r\n                            this.dbg.printf(\"  changed %s.%s to %s\\n\", reg.sName, reg.aBitIDs[bTest], (b & bTest)? \"1\" : \"0\");\r\n                        }\r\n                        bTest >>= 1;\r\n                    }\r\n                }\r\n            }\r\n            reg.update(b);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @this {C1PDiskController}\r\n    * @param {number} bPDA\r\n    * @param {number} bPDB\r\n    */\r\n    setSelectedDrive(bPDA, bPDB)\r\n    {\r\n        var iDriveSelect = -1;\r\n        if (bPDA !== undefined && bPDB !== undefined) {\r\n            iDriveSelect = 0;\r\n            if (!(bPDB & this.PDB_SD1)) {\r\n                iDriveSelect |= 0x02;\r\n            }\r\n            if (!(this.regPDA.bits & this.PDA_SD2)) {\r\n                iDriveSelect |= 0x01;\r\n            }\r\n        }\r\n        if (this.iDriveSelect != iDriveSelect) {\r\n            this.iDriveSelect = iDriveSelect;\r\n            this.regSTAT.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDiskController}\r\n     */\r\n    startDriveData()\r\n    {\r\n        if (this.iDriveSelect >= 0) {\r\n            this.aDrives[this.iDriveSelect].iTrackOffset = 0;\r\n            this.advanceDriveData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDiskController}\r\n     */\r\n    stopDriveData()\r\n    {\r\n        if (this.iDriveSelect >= 0) {\r\n            this.aDrives[this.iDriveSelect].iTrackOffset = -1;\r\n            this.regDATA.update(0xFF);          // QUESTION: Is this necessary or helpful in some way?\r\n            this.regSTAT.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDiskController}\r\n     * @returns {number} current byte of data from the currently selected drive, or null if no (more) data available\r\n     */\r\n    advanceDriveData()\r\n    {\r\n        var b = null;\r\n        if (this.iDriveSelect >= 0) {\r\n            var drive = this.aDrives[this.iDriveSelect];\r\n            var track = drive.aTracks[drive.iTrackSelect];\r\n            if (track !== undefined) {\r\n                if (drive.iTrackOffset >= 0 && drive.iTrackOffset < track.trackData.length) {\r\n                    drive.nIndexPulse = 100;    // QUESTION: Necessary?\r\n                    b = track.trackData[drive.iTrackOffset++];\r\n                    this.regDATA.update(b);\r\n                    this.regSTAT.update();\r\n                }\r\n                else {\r\n                    drive.nIndexPulse = 10;     // QUESTION: Valid or necessary to force index pulse on next poll of $C000?\r\n                    this.stopDriveData();\r\n                }\r\n            }\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * updatePDA() calculates an updated value for the PDA register.\r\n     *\r\n     * In the process, this may also update iDriveSelect and assorted drive internal variables.\r\n     *\r\n     * @this {C1PDiskController}\r\n     * @param {number|undefined} bPDA\r\n     * @returns {number} updated bits for PDA\r\n     */\r\n    updatePDA(bPDA)\r\n    {\r\n        if (bPDA === undefined) {\r\n            bPDA = this.regPDA.bits;\r\n        } else {\r\n            this.setSelectedDrive(bPDA, this.regPDB.bits);\r\n        }\r\n\r\n        /*\r\n         * We start by turning ON most bits, except for PDA_RDY1, which we always leave\r\n         * OFF (indicating ready).  We leave PDA_SD2 alone, so that it reflects whatever\r\n         * the CPU had set.\r\n         *\r\n         * Then we dive into the update logic, which will turn OFF any of the bits we\r\n         * originally turned ON if the corresponding condition is true (because an OFF bit\r\n         * signals an active condition).\r\n         */\r\n        bPDA |= (this.PDA_IHD | this.PDA_WP | this.PDA_SHD | this.PDA_FD | this.PDA_TZD | this.PDA_RDY2);\r\n        bPDA &= ~(this.PDA_RDY1);\r\n\r\n        if (this.iDriveSelect >= 0) {\r\n\r\n            if (this.aDrives[this.iDriveSelect].aTracks.length) {\r\n\r\n                var drive = this.aDrives[this.iDriveSelect];\r\n\r\n                if (drive.fProtected) {\r\n                    bPDA &= ~this.PDA_WP;\r\n                }\r\n                if (!drive.iTrackSelect) {\r\n                    bPDA &= ~this.PDA_TZD;\r\n                }\r\n                /*\r\n                 * Simulate PHD_IHD (Index Hole Detect)\r\n                 */\r\n                if (--drive.nIndexPulse <= 10) {\r\n                    if (drive.nIndexPulse > 0) {\r\n                        bPDA &= ~this.PDA_IHD;\r\n                        this.stopDriveData();\r\n                    } else {\r\n                        drive.nIndexPulse = 100;\r\n                        this.startDriveData();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return bPDA;\r\n    }\r\n\r\n    /**\r\n     * updatePDB() calculates an updated value for the PDB register.  However, since the\r\n     * PDB consists entirely of OUTPUT bits, none of the given bits should actually be modified.\r\n     *\r\n     * In the process, this may also update iDriveSelect and assorted drive internal variables,\r\n     * as well as selected PDA INPUT bits (hence the call to regPDA.update()).\r\n     *\r\n     * @this {C1PDiskController}\r\n     * @param {number|undefined} bPDB\r\n     * @returns {number} updated bits for PDB\r\n     */\r\n    updatePDB(bPDB)\r\n    {\r\n        if (bPDB === undefined) {\r\n            bPDB = this.regPDB.bits;\r\n        } else {\r\n            this.setSelectedDrive(this.regPDA.bits, bPDB);\r\n        }\r\n\r\n        if (this.iDriveSelect >= 0 && this.iDriveSelect < this.aDrives.length) {\r\n\r\n            var drive = this.aDrives[this.iDriveSelect];\r\n\r\n            if (drive.aTracks.length) {\r\n                /*\r\n                 * Is PDB_ST transitioning from 1 to 0?\r\n                 */\r\n                if ((this.regPDB.bits & this.PDB_ST) && !(bPDB & this.PDB_ST)) {\r\n                    /*\r\n                     *  PDB_STI == 0? step toward track 39 : step toward track 0\r\n                     */\r\n                    if (bPDB & this.PDB_STI) {\r\n                        drive.iTrackSelect--;\r\n                    } else {\r\n                        drive.iTrackSelect++;\r\n                    }\r\n\r\n                    if (DEBUGGER && this.dbg && this.dbg.messageEnabled(this.dbg.MESSAGE_DISK)) {\r\n                        this.dbg.printf(\"stepping %s to track %d\\n\", (bPDB & this.PDB_STI)? \"down\" : \"up\", drive.iTrackSelect);\r\n                    }\r\n\r\n                    if (drive.iTrackSelect >= drive.nTracks) {\r\n                        drive.iTrackSelect = drive.nTracks;\r\n                    }\r\n\r\n                    if (drive.iTrackSelect < 0) {\r\n                        drive.iTrackSelect = 0;\r\n                    }\r\n\r\n                    drive.nIndexPulse = 20;\r\n\r\n                    this.regPDA.update(this.regPDA.bits | this.PDA_IHD);\r\n                    this.stopDriveData();\r\n                }\r\n            }\r\n        }\r\n        else if (DEBUG && this.iDriveSelect >= 0) {\r\n            this.printf(\"updatePDB(%#04x): invalid drive: %d\\n\", bPDB, this.iDriveSelect);\r\n        }\r\n        return bPDB;\r\n    }\r\n\r\n    /**\r\n     * updateSTAT() calculates an updated value for the ACIA Status register.\r\n     *\r\n     * @this {C1PDiskController}\r\n     * @param {number|undefined} bSTAT\r\n     * @returns {number} updated bits for STAT\r\n     */\r\n    updateSTAT(bSTAT)\r\n    {\r\n        if (bSTAT === undefined) {\r\n            bSTAT = this.regSTAT.bits;\r\n        }\r\n        bSTAT &= ~this.STAT_RDRF;\r\n        if (this.iDriveSelect >= 0 && this.aDrives[this.iDriveSelect].iTrackOffset >= 0) {\r\n            bSTAT |= this.STAT_RDRF;\r\n        }\r\n        return bSTAT;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDiskController}\r\n     * @param {number} port\r\n     * @param {Object} reg\r\n     */\r\n    writePort(port, reg)\r\n    {\r\n        this.cpu.setByte(port + this.addrController, reg.bits);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDiskController}\r\n     * @param {boolean} fLoaded is true if the selected drive must be loaded, false if don't care\r\n     * @returns {Object} drive reference to the selected drive, or null if no drive is selected or it doesn't meet the fLoaded requirement\r\n     *\r\n     getSelectedDrive(fLoaded)\r\n     {\r\n         var drive = null;\r\n         if (this.iDriveSelect >= 0) {\r\n             if (this.aDrives[this.iDriveSelect]) {\r\n                 if (!fLoaded || this.aDrives[this.iDriveSelect].aTracks.length)\r\n                     drive = this.aDrives[this.iDriveSelect];\r\n             }\r\n         }\r\n         return drive;\r\n     }\r\n     */\r\n\r\n    /**\r\n     * C1PDiskController.init()\r\n     *\r\n     * This function operates on every HTML element of class \"disk\", extracting the\r\n     * JSON-encoded parameters for the C1PDiskController constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PDiskController component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeDC = Component.getElementsByClass(APPCLASS, \"disk\");\r\n        for (var iDC=0; iDC < aeDC.length; iDC++) {\r\n            var eDC = aeDC[iDC];\r\n            var parmsDC = Component.getComponentParms(eDC);\r\n            var controller = new C1PDiskController(parmsDC);\r\n            Component.bindComponentControls(controller, eDC, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialize every DiskController module on the page.\r\n */\r\nWebLib.onInit(C1PDiskController.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/debugger.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * @class C1PDebugger\r\n * @unrestricted\r\n */\r\nclass C1PDebugger extends Component {\r\n    /**\r\n     * C1PDebugger(parmsDbg)\r\n     *\r\n     * The C1PDebugger component has no required (parmsDbg) properties.\r\n     *\r\n     * The C1PDebugger component is an optional component that implements a variety of user\r\n     * commands for controlling the CPU, dumping and editing memory, etc.\r\n     *\r\n     * @this {C1PDebugger}\r\n     * @param {Object} parmsDbg\r\n     */\r\n    constructor(parmsDbg)\r\n    {\r\n        super(\"C1PDebugger\", parmsDbg);\r\n\r\n        if (DEBUGGER) {\r\n\r\n            this.dbg = this;\r\n            /*\r\n             * This keeps track of instruction activity, but only when tracing or when\r\n             * Debugger checks have been enabled (eg, one or more breakpoints have been set).\r\n             *\r\n             * This is zeroed by CPU notification handlers reset() and stopped().\r\n             * We set it here to -1 to indicate that the CPU has not yet initialized us.\r\n             */\r\n            this.cIns = -1;\r\n\r\n            /*\r\n             * Some commands, like the dump (d) command, start at nextAddr when no address\r\n             * is given (and they also update nextAddr when they're done).\r\n             */\r\n            this.nextAddr = 0;\r\n\r\n            /*\r\n             * When Enter is pressed on an empty input buffer, we default to the previous\r\n             * command, which is preserved here.\r\n             */\r\n            this.prevCmd = null;\r\n\r\n            /*\r\n             * fAssemble is true when \"assemble mode\" is active, false when not.\r\n             */\r\n            this.fAssemble = false;\r\n            this.addrAssembleNext = 0;\r\n\r\n            /*\r\n             * Initialize the lists of breakpoint addresses.  aExecBreak is a list (Array) of addresses\r\n             * to halt at whenever attempting to execute an instruction at the corresponding address,\r\n             * and aReadBreak and aWriteBreak are lists of addresses to halt at whenever a read or write,\r\n             * respectively, occurs at the corresponding address.\r\n             */\r\n            this.clearBreakpoints();\r\n\r\n            /*\r\n             * Instead of pre-allocating these arrays, we wait until our reset() function is called.\r\n             * These arrays are updated in checkInstruction(), but the CPU will never actually call it\r\n             * unless checksEnabled() returns true, and that won't happen until one or more breakpoints\r\n             * have been set.  This ensures that, by default, the CPU runs as fast as possible.\r\n             */\r\n            this.iStepHistory = 0;\r\n            this.aStepHistory = [];\r\n            this.aaOpcodeFreqs = [];\r\n\r\n            /*\r\n             * This \"info\" buffer is a lightweight logging mechanism that has minimal impact on the\r\n             * browser (unlike printing to either window.console.log or an HTML control, which can make\r\n             * the browser unusable if printing is too frequent).  The Debugger's \"i\" command dumps\r\n             * this buffer.  Note that dumping too much at once can also bog things down, but by that\r\n             * point, you've presumably already captured the info you need and are willing to wait.\r\n             */\r\n            if (DEBUG) {\r\n                this.iInfoBuffer = 0;\r\n                this.aInfoBuffer = new Array(10000);\r\n            }\r\n\r\n            /*\r\n             * Message categories supported by the message() function; they are designed to be combined\r\n             * (ie, OR'ed) as needed.  The Debugger's \"option\" command is used to turn message categories\r\n             * on and off, like so:\r\n             *\r\n             *      o msg port on\r\n             *      o msg port off\r\n             *      ...\r\n             */\r\n            this.MESSAGE_PORT   = 0x01;\r\n            this.MESSAGE_KBD    = 0x10;\r\n            this.MESSAGE_VIDEO  = 0x20;\r\n            this.MESSAGE_DISK   = 0x40;\r\n            this.MESSAGE_SERIAL = 0x80;\r\n            this.MESSAGE_NONE   = 0x00;\r\n         // this.MESSAGE_ALL    = 0xff;\r\n            this.bitsMessage = this.MESSAGE_NONE;\r\n            this.aMessageCategories = {\r\n                'port':     this.MESSAGE_PORT,\r\n                'kbd':      this.MESSAGE_KBD,\r\n                'video':    this.MESSAGE_VIDEO,\r\n                'disk':     this.MESSAGE_DISK,\r\n                'serial':   this.MESSAGE_SERIAL\r\n            };\r\n\r\n            /*\r\n             * The aaOperations array is indexed by opcode, and each element is a sub-array that\r\n             * describes the corresponding opcode. The sub-elements are as follows:\r\n             *\r\n             *      [0]: {number} of the operation code (see OP_*)\r\n             *      [1]: {number} of additional bytes following the opcode byte, if any\r\n             *      [2]: {number} of the operation mode operand, if any (see MODE_*)\r\n             *\r\n             * These sub-elements are all optional. If [0] is not present, the opcode is undefined;\r\n             * if [1] is not present (or contains a zero), the opcode is a single-byte opcode; and if\r\n             * [2] is not present, the opcode uses no (or implied) operands.\r\n             */\r\n            this.OP_ADC = 0;\r\n            this.OP_AND = 1;\r\n            this.OP_ASL = 2;\r\n            this.OP_BCC = 3;\r\n            this.OP_BCS = 4;\r\n            this.OP_BEQ = 5;\r\n            this.OP_BIT = 6;\r\n            this.OP_BMI = 7;\r\n            this.OP_BNE = 8;\r\n            this.OP_BPL = 9;\r\n            this.OP_BRK = 10;\r\n            this.OP_BVC = 11;\r\n            this.OP_BVS = 12;\r\n            this.OP_CLC = 13;\r\n            this.OP_CLD = 14;\r\n            this.OP_CLI = 15;\r\n            this.OP_CLV = 16;\r\n            this.OP_CMP = 17;\r\n            this.OP_CPX = 18;\r\n            this.OP_CPY = 19;\r\n            this.OP_DEC = 20;\r\n            this.OP_DEX = 21;\r\n            this.OP_DEY = 22;\r\n            this.OP_EOR = 23;\r\n            this.OP_INC = 24;\r\n            this.OP_INX = 25;\r\n            this.OP_INY = 26;\r\n            this.OP_JMP = 27;\r\n            this.OP_JSR = 28;\r\n            this.OP_LDA = 29;\r\n            this.OP_LDX = 30;\r\n            this.OP_LDY = 31;\r\n            this.OP_LSR = 32;\r\n            this.OP_NOP = 33;\r\n            this.OP_ORA = 34;\r\n            this.OP_PHA = 35;\r\n            this.OP_PHP = 36;\r\n            this.OP_PLA = 37;\r\n            this.OP_PLP = 38;\r\n            this.OP_ROL = 39;\r\n            this.OP_ROR = 40;\r\n            this.OP_RTI = 41;\r\n            this.OP_RTS = 42;\r\n            this.OP_SBC = 43;\r\n            this.OP_SEC = 44;\r\n            this.OP_SED = 45;\r\n            this.OP_SEI = 46;\r\n            this.OP_STA = 47;\r\n            this.OP_STX = 48;\r\n            this.OP_STY = 49;\r\n            this.OP_TAX = 50;\r\n            this.OP_TAY = 51;\r\n            this.OP_TSX = 52;\r\n            this.OP_TXA = 53;\r\n            this.OP_TXS = 54;\r\n            this.OP_TYA = 55;\r\n            this.OP_SIM = 56;\r\n            this.OP_DB  = 57;\r\n\r\n            this.aOpCodes = [\r\n                \"ADC\",\"AND\",\"ASL\",\"BCC\",\"BCS\",\"BEQ\",\"BIT\",\"BMI\",\r\n                \"BNE\",\"BPL\",\"BRK\",\"BVC\",\"BVS\",\"CLC\",\"CLD\",\"CLI\",\r\n                \"CLV\",\"CMP\",\"CPX\",\"CPY\",\"DEC\",\"DEX\",\"DEY\",\"EOR\",\r\n                \"INC\",\"INX\",\"INY\",\"JMP\",\"JSR\",\"LDA\",\"LDX\",\"LDY\",\r\n                \"LSR\",\"NOP\",\"ORA\",\"PHA\",\"PHP\",\"PLA\",\"PLP\",\"ROL\",\r\n                \"ROR\",\"RTI\",\"RTS\",\"SBC\",\"SEC\",\"SED\",\"SEI\",\"STA\",\r\n                \"STX\",\"STY\",\"TAX\",\"TAY\",\"TSX\",\"TXA\",\"TXS\",\"TYA\",\r\n                \"SIM\",\".DB\"\r\n            ];\r\n\r\n            this.aOpSimCodes = [\r\n                \"HLT\", \"MSG\"\r\n            ];\r\n\r\n            this.setOpModes(true);\r\n\r\n            this.aaOperations = [\r\n                /* 0x00 */ [this.OP_BRK],\r\n                /* 0x01 */ [this.OP_ORA, 1, this.MODE_INDX],\r\n                /* 0x02 */ [this.OP_SIM, 1],\r\n                /* 0x03 */ [],\r\n                /* 0x04 */ [],\r\n                /* 0x05 */ [this.OP_ORA, 1, this.MODE_ZP],\r\n                /* 0x06 */ [this.OP_ASL, 1, this.MODE_ZP],\r\n                /* 0x07 */ [],\r\n                /* 0x08 */ [this.OP_PHP],\r\n                /* 0x09 */ [this.OP_ORA, 1, this.MODE_IMM],\r\n                /* 0x0a */ [this.OP_ASL, 0, this.MODE_ACC],\r\n                /* 0x0b */ [],\r\n                /* 0x0c */ [],\r\n                /* 0x0d */ [this.OP_ORA, 2, this.MODE_ABS],\r\n                /* 0x0e */ [this.OP_ASL, 2, this.MODE_ABS],\r\n                /* 0x0f */ [],\r\n                /* 0x10 */ [this.OP_BPL, 1, this.MODE_DISP],\r\n                /* 0x11 */ [this.OP_ORA, 1, this.MODE_INDY],\r\n                /* 0x12 */ [],\r\n                /* 0x13 */ [],\r\n                /* 0x14 */ [],\r\n                /* 0x15 */ [this.OP_ORA, 1, this.MODE_ZPX],\r\n                /* 0x16 */ [this.OP_ASL, 1, this.MODE_ZPX],\r\n                /* 0x17 */ [],\r\n                /* 0x18 */ [this.OP_CLC],\r\n                /* 0x19 */ [this.OP_ORA, 2, this.MODE_ABSY],\r\n                /* 0x1a */ [],\r\n                /* 0x1b */ [],\r\n                /* 0x1c */ [],\r\n                /* 0x1d */ [this.OP_ORA, 2, this.MODE_ABSX],\r\n                /* 0x1e */ [this.OP_ASL, 2, this.MODE_ABSX],\r\n                /* 0x1f */ [],\r\n                /* 0x20 */ [this.OP_JSR, 2, this.MODE_IMM16],\r\n                /* 0x21 */ [this.OP_AND, 1, this.MODE_INDX],\r\n                /* 0x22 */ [],\r\n                /* 0x23 */ [],\r\n                /* 0x24 */ [this.OP_BIT, 1, this.MODE_ZP],\r\n                /* 0x25 */ [this.OP_AND, 1, this.MODE_ZP],\r\n                /* 0x26 */ [this.OP_ROL, 1, this.MODE_ZP],\r\n                /* 0x27 */ [],\r\n                /* 0x28 */ [this.OP_PLP],\r\n                /* 0x29 */ [this.OP_AND, 1, this.MODE_IMM],\r\n                /* 0x2a */ [this.OP_ROL, 0, this.MODE_ACC],\r\n                /* 0x2b */ [],\r\n                /* 0x2c */ [this.OP_BIT, 2, this.MODE_ABS],\r\n                /* 0x2d */ [this.OP_AND, 2, this.MODE_ABS],\r\n                /* 0x2e */ [this.OP_ROL, 2, this.MODE_ABS],\r\n                /* 0x2f */ [],\r\n                /* 0x30 */ [this.OP_BMI, 1, this.MODE_DISP],\r\n                /* 0x31 */ [this.OP_AND, 1, this.MODE_INDY],\r\n                /* 0x32 */ [],\r\n                /* 0x33 */ [],\r\n                /* 0x34 */ [],\r\n                /* 0x35 */ [this.OP_AND, 1, this.MODE_ZPX],\r\n                /* 0x36 */ [this.OP_ROL, 1, this.MODE_ZPX],\r\n                /* 0x37 */ [],\r\n                /* 0x38 */ [this.OP_SEC],\r\n                /* 0x39 */ [this.OP_AND, 2, this.MODE_ABSY],\r\n                /* 0x3a */ [],\r\n                /* 0x3b */ [],\r\n                /* 0x3c */ [],\r\n                /* 0x3d */ [this.OP_AND, 2, this.MODE_ABSX],\r\n                /* 0x3e */ [this.OP_ROL, 2, this.MODE_ABSX],\r\n                /* 0x3f */ [],\r\n                /* 0x40 */ [this.OP_RTI],\r\n                /* 0x41 */ [this.OP_EOR, 1, this.MODE_INDX],\r\n                /* 0x42 */ [],\r\n                /* 0x43 */ [],\r\n                /* 0x44 */ [],\r\n                /* 0x45 */ [this.OP_EOR, 1, this.MODE_ZP],\r\n                /* 0x46 */ [this.OP_LSR, 1, this.MODE_ZP],\r\n                /* 0x47 */ [],\r\n                /* 0x48 */ [this.OP_PHA],\r\n                /* 0x49 */ [this.OP_EOR, 1, this.MODE_IMM],\r\n                /* 0x4a */ [this.OP_LSR, 0, this.MODE_ACC],\r\n                /* 0x4b */ [],\r\n                /* 0x4c */ [this.OP_JMP, 2, this.MODE_IMM16],\r\n                /* 0x4d */ [this.OP_EOR, 2, this.MODE_ABS],\r\n                /* 0x4e */ [this.OP_LSR, 2, this.MODE_ABS],\r\n                /* 0x4f */ [],\r\n                /* 0x50 */ [this.OP_BVC, 1, this.MODE_DISP],\r\n                /* 0x51 */ [this.OP_EOR, 1, this.MODE_INDY],\r\n                /* 0x52 */ [],\r\n                /* 0x53 */ [],\r\n                /* 0x54 */ [],\r\n                /* 0x55 */ [this.OP_EOR, 1, this.MODE_ZPX],\r\n                /* 0x56 */ [this.OP_LSR, 1, this.MODE_ZPX],\r\n                /* 0x57 */ [],\r\n                /* 0x58 */ [this.OP_CLI],\r\n                /* 0x59 */ [this.OP_EOR, 2, this.MODE_ABSY],\r\n                /* 0x5a */ [],\r\n                /* 0x5b */ [],\r\n                /* 0x5c */ [],\r\n                /* 0x5d */ [this.OP_EOR, 2, this.MODE_ABSX],\r\n                /* 0x5e */ [this.OP_LSR, 2, this.MODE_ABSX],\r\n                /* 0x5f */ [],\r\n                /* 0x60 */ [this.OP_RTS],\r\n                /* 0x61 */ [this.OP_ADC, 1, this.MODE_INDX],\r\n                /* 0x62 */ [],\r\n                /* 0x63 */ [],\r\n                /* 0x64 */ [],\r\n                /* 0x65 */ [this.OP_ADC, 1, this.MODE_ZP],\r\n                /* 0x66 */ [this.OP_ROR, 1, this.MODE_ZP],\r\n                /* 0x67 */ [],\r\n                /* 0x68 */ [this.OP_PLA],\r\n                /* 0x69 */ [this.OP_ADC, 1, this.MODE_IMM],\r\n                /* 0x6a */ [this.OP_ROR, 0, this.MODE_ACC],\r\n                /* 0x6b */ [],\r\n                /* 0x6c */ [this.OP_JMP, 2, this.MODE_ABS16],\r\n                /* 0x6d */ [this.OP_ADC, 2, this.MODE_ABS],\r\n                /* 0x6e */ [this.OP_ROR, 2, this.MODE_ABS],\r\n                /* 0x6f */ [],\r\n                /* 0x70 */ [this.OP_BVS, 1, this.MODE_DISP],\r\n                /* 0x71 */ [this.OP_ADC, 1, this.MODE_INDY],\r\n                /* 0x72 */ [],\r\n                /* 0x73 */ [],\r\n                /* 0x74 */ [],\r\n                /* 0x75 */ [this.OP_ADC, 1, this.MODE_ZPX],\r\n                /* 0x76 */ [this.OP_ROR, 1, this.MODE_ZPX],\r\n                /* 0x77 */ [],\r\n                /* 0x78 */ [this.OP_SEI],\r\n                /* 0x79 */ [this.OP_ADC, 2, this.MODE_ABSY],\r\n                /* 0x7a */ [],\r\n                /* 0x7b */ [],\r\n                /* 0x7c */ [],\r\n                /* 0x7d */ [this.OP_ADC, 2, this.MODE_ABSX],\r\n                /* 0x7e */ [this.OP_ROR, 2, this.MODE_ABSX],\r\n                /* 0x7f */ [],\r\n                /* 0x80 */ [],\r\n                /* 0x81 */ [this.OP_STA, 1, this.MODE_INDX],\r\n                /* 0x82 */ [],\r\n                /* 0x83 */ [],\r\n                /* 0x84 */ [this.OP_STY, 1, this.MODE_ZP],\r\n                /* 0x85 */ [this.OP_STA, 1, this.MODE_ZP],\r\n                /* 0x86 */ [this.OP_STX, 1, this.MODE_ZP],\r\n                /* 0x87 */ [],\r\n                /* 0x88 */ [this.OP_DEY],\r\n                /* 0x89 */ [],\r\n                /* 0x8a */ [this.OP_TXA],\r\n                /* 0x8b */ [],\r\n                /* 0x8c */ [this.OP_STY, 2, this.MODE_ABS],\r\n                /* 0x8d */ [this.OP_STA, 2, this.MODE_ABS],\r\n                /* 0x8e */ [this.OP_STX, 2, this.MODE_ABS],\r\n                /* 0x8f */ [],\r\n                /* 0x90 */ [this.OP_BCC, 1, this.MODE_DISP],\r\n                /* 0x91 */ [this.OP_STA, 1, this.MODE_INDY],\r\n                /* 0x92 */ [],\r\n                /* 0x93 */ [],\r\n                /* 0x94 */ [this.OP_STY, 1, this.MODE_ZPX],\r\n                /* 0x95 */ [this.OP_STA, 1, this.MODE_ZPX],\r\n                /* 0x96 */ [this.OP_STX, 1, this.MODE_ZPY],\r\n                /* 0x97 */ [],\r\n                /* 0x98 */ [this.OP_TYA],\r\n                /* 0x99 */ [this.OP_STA, 2, this.MODE_ABSY],\r\n                /* 0x9a */ [this.OP_TXS],\r\n                /* 0x9b */ [],\r\n                /* 0x9c */ [],\r\n                /* 0x9d */ [this.OP_STA, 2, this.MODE_ABSX],\r\n                /* 0x9e */ [],\r\n                /* 0x9f */ [],\r\n                /* 0xa0 */ [this.OP_LDY, 1, this.MODE_IMM],\r\n                /* 0xa1 */ [this.OP_LDA, 1, this.MODE_INDX],\r\n                /* 0xa2 */ [this.OP_LDX, 1, this.MODE_IMM],\r\n                /* 0xa3 */ [],\r\n                /* 0xa4 */ [this.OP_LDY, 1, this.MODE_ZP],\r\n                /* 0xa5 */ [this.OP_LDA, 1, this.MODE_ZP],\r\n                /* 0xa6 */ [this.OP_LDX, 1, this.MODE_ZP],\r\n                /* 0xa7 */ [],\r\n                /* 0xa8 */ [this.OP_TAY],\r\n                /* 0xa9 */ [this.OP_LDA, 1, this.MODE_IMM],\r\n                /* 0xaa */ [this.OP_TAX],\r\n                /* 0xab */ [],\r\n                /* 0xac */ [this.OP_LDY, 2, this.MODE_ABS],\r\n                /* 0xad */ [this.OP_LDA, 2, this.MODE_ABS],\r\n                /* 0xae */ [this.OP_LDX, 2, this.MODE_ABS],\r\n                /* 0xaf */ [],\r\n                /* 0xb0 */ [this.OP_BCS, 1, this.MODE_DISP],\r\n                /* 0xb1 */ [this.OP_LDA, 1, this.MODE_INDY],\r\n                /* 0xb2 */ [],\r\n                /* 0xb3 */ [],\r\n                /* 0xb4 */ [this.OP_LDY, 1, this.MODE_ZPX],\r\n                /* 0xb5 */ [this.OP_LDA, 1, this.MODE_ZPX],\r\n                /* 0xb6 */ [this.OP_LDX, 1, this.MODE_ZPY],\r\n                /* 0xb7 */ [],\r\n                /* 0xb8 */ [this.OP_CLV],\r\n                /* 0xb9 */ [this.OP_LDA, 2, this.MODE_ABSY],\r\n                /* 0xba */ [this.OP_TSX],\r\n                /* 0xbb */ [],\r\n                /* 0xbc */ [this.OP_LDY, 2, this.MODE_ABSX],\r\n                /* 0xbd */ [this.OP_LDA, 2, this.MODE_ABSX],\r\n                /* 0xbe */ [this.OP_LDX, 2, this.MODE_ABSY],\r\n                /* 0xbf */ [],\r\n                /* 0xc0 */ [this.OP_CPY, 1, this.MODE_IMM],\r\n                /* 0xc1 */ [this.OP_CMP, 1, this.MODE_INDX],\r\n                /* 0xc2 */ [],\r\n                /* 0xc3 */ [],\r\n                /* 0xc4 */ [this.OP_CPY, 1, this.MODE_ZP],\r\n                /* 0xc5 */ [this.OP_CMP, 1, this.MODE_ZP],\r\n                /* 0xc6 */ [this.OP_DEC, 1, this.MODE_ZP],\r\n                /* 0xc7 */ [],\r\n                /* 0xc8 */ [this.OP_INY],\r\n                /* 0xc9 */ [this.OP_CMP, 1, this.MODE_IMM],\r\n                /* 0xca */ [this.OP_DEX],\r\n                /* 0xcb */ [],\r\n                /* 0xcc */ [this.OP_CPY, 2, this.MODE_ABS],\r\n                /* 0xcd */ [this.OP_CMP, 2, this.MODE_ABS],\r\n                /* 0xce */ [this.OP_DEC, 2, this.MODE_ABS],\r\n                /* 0xcf */ [],\r\n                /* 0xd0 */ [this.OP_BNE, 1, this.MODE_DISP],\r\n                /* 0xd1 */ [this.OP_CMP, 1, this.MODE_INDY],\r\n                /* 0xd2 */ [],\r\n                /* 0xd3 */ [],\r\n                /* 0xd4 */ [],\r\n                /* 0xd5 */ [this.OP_CMP, 1, this.MODE_ZPX],\r\n                /* 0xd6 */ [this.OP_DEC, 1, this.MODE_ZPX],\r\n                /* 0xd7 */ [],\r\n                /* 0xd8 */ [this.OP_CLD],\r\n                /* 0xd9 */ [this.OP_CMP, 2, this.MODE_ABSY],\r\n                /* 0xda */ [],\r\n                /* 0xdb */ [],\r\n                /* 0xdc */ [],\r\n                /* 0xdd */ [this.OP_CMP, 2, this.MODE_ABSX],\r\n                /* 0xde */ [this.OP_DEC, 2, this.MODE_ABSX],\r\n                /* 0xdf */ [],\r\n                /* 0xe0 */ [this.OP_CPX, 1, this.MODE_IMM],\r\n                /* 0xe1 */ [this.OP_SBC, 1, this.MODE_INDX],\r\n                /* 0xe2 */ [],\r\n                /* 0xe3 */ [],\r\n                /* 0xe4 */ [this.OP_CPX, 1, this.MODE_ZP],\r\n                /* 0xe5 */ [this.OP_SBC, 1, this.MODE_ZP],\r\n                /* 0xe6 */ [this.OP_INC, 1, this.MODE_ZP],\r\n                /* 0xe7 */ [],\r\n                /* 0xe8 */ [this.OP_INX],\r\n                /* 0xe9 */ [this.OP_SBC, 1, this.MODE_IMM],\r\n                /* 0xea */ [this.OP_NOP],\r\n                /* 0xeb */ [],\r\n                /* 0xec */ [this.OP_CPX, 2, this.MODE_ABS],\r\n                /* 0xed */ [this.OP_SBC, 2, this.MODE_ABS],\r\n                /* 0xee */ [this.OP_INC, 2, this.MODE_ABS],\r\n                /* 0xef */ [],\r\n                /* 0xf0 */ [this.OP_BEQ, 1, this.MODE_DISP],\r\n                /* 0xf1 */ [this.OP_SBC, 1, this.MODE_INDY],\r\n                /* 0xf2 */ [],\r\n                /* 0xf3 */ [],\r\n                /* 0xf4 */ [],\r\n                /* 0xf5 */ [this.OP_SBC, 1, this.MODE_ZPX],\r\n                /* 0xf6 */ [this.OP_INC, 1, this.MODE_ZPX],\r\n                /* 0xf7 */ [],\r\n                /* 0xf8 */ [this.OP_SED],\r\n                /* 0xf9 */ [this.OP_SBC, 2, this.MODE_ABSY],\r\n                /* 0xfa */ [],\r\n                /* 0xfb */ [],\r\n                /* 0xfc */ [],\r\n                /* 0xfd */ [this.OP_SBC, 2, this.MODE_ABSX],\r\n                /* 0xfe */ [this.OP_INC, 2, this.MODE_ABSX],\r\n                /* 0xff */ []\r\n            ];\r\n\r\n        }   // endif DEBUGGER\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\", \"canvas\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"reset\")\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        var dbg = this;\r\n        switch(sBinding) {\r\n        case \"debugInput\":\r\n            this.bindings[sBinding] = control;\r\n            this.eDebug = /** @type {HTMLInputElement} */ (control);\r\n            this.eDebug.focus();\r\n            control.onkeypress = function(dbg, e) {\r\n                return function(event) {\r\n                    if (event.keyCode == 13) {\r\n                        sBinding = e.value;\r\n                        e.value = \"\";\r\n                        C1PDebugger.input(dbg, sBinding);\r\n                    }\r\n                };\r\n            }(this, control);\r\n            return true;\r\n\r\n        case \"debugEnter\":\r\n            this.bindings[sBinding] = control;\r\n            /*\r\n             * I've replaced the standard \"onclick\" code with a call to our onClickRepeat() helper in\r\n             * component.js, so that the \"Enter\" button can be held to repeat, just like the \"Step\" button.\r\n             */\r\n            WebLib.onClickRepeat(\r\n                control, 500, 100,\r\n                function(fRepeat) {\r\n                    if (dbg.eDebug) {\r\n                        sBinding = dbg.eDebug.value;\r\n                        //\r\n                        //  If we want to use the debugEnter button to repeatedly enter the same command,\r\n                        //  then don't clear the command string.\r\n                        //\r\n                        //      dbg.eDebug.value = \"\";\r\n                        //\r\n                        C1PDebugger.input(dbg, sBinding);\r\n                        return true;\r\n                    }\r\n                    if (DEBUG) dbg.printf(MESSAGE.LOG, \"no debugger input buffer\\n\");\r\n                    return false;\r\n                }\r\n            );\r\n            return true;\r\n\r\n        case \"step\":\r\n            this.bindings[sBinding] = control;\r\n            WebLib.onClickRepeat(\r\n                control, 500, 100,\r\n                function(fRepeat) {\r\n                    var fCompleted = false;\r\n                    if (!dbg.isBusy(true)) {\r\n                        dbg.setBusy(true);\r\n                        fCompleted = dbg.step(fRepeat? 1 : 0);\r\n                        dbg.setBusy(false);\r\n                    }\r\n                    return fCompleted;\r\n                }\r\n            );\r\n            return true;\r\n\r\n        default:\r\n            break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {Array} abMemory\r\n     * @param {number} start\r\n     * @param {number} end\r\n     */\r\n    setBuffer(abMemory, start, end)\r\n    {\r\n        this.abMem = abMemory;\r\n        this.offMem = start;\r\n        this.cbMem = end - start + 1;\r\n        this.offLimit = this.offMem + this.cbMem;\r\n        this.setReady();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {boolean} fOn\r\n     * @param {C1PComputer} cmp\r\n     */\r\n    setPower(fOn, cmp)\r\n    {\r\n        if (fOn && !this.flags.powered) {\r\n            this.flags.powered = true;\r\n            this.cpu = cmp.getComponentByType(\"cpu\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     */\r\n    setFocus()\r\n    {\r\n        this.eDebug.focus();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {boolean} fClassic is true for \"classic\" operand syntax, or false for \"modern\" operand syntax\r\n     *\r\n     * The strings describing the operand(s) also describe the addressing mode, as follows:\r\n     *\r\n     *      bbb     mode    classic     modern         description\r\n     *      ---     ----    -------     -------         ----------------\r\n     *      000     INDX    ($nn,X)     [[nn+X]]        Indexed Indirect\r\n     *      001     ZP      $nn         [nn]            Zero-Page\r\n     *      010     IMM     #$nn        nn              Immediate\r\n     *      011     ABS     $nnnn       [nnnn]          Absolute\r\n     *      100     INDY    ($nn),Y     [[nn]+Y]        Indirect Indexed\r\n     *      101     ZPX     $nn,X       [nn+X]          Zero-Page,X\r\n     *      110     ABSY    $nnnn,Y     [nnnn+Y]        Absolute,Y\r\n     *      111     ABSX    $nnnn,X     [nnnn+X]        Absolute,X\r\n     *\r\n     * where bbb generally corresponds to bits 2-4 of the opcode.  I find that using brackets in the\r\n     * descriptors to indicate a memory access (or multiple brackets, in the case of indirect accesses),\r\n     * along with \"+\" and any index register, is more intuitive than the \"classic\" operand formats;\r\n     * the absence of any brackets implies immediate data, eliminating the need for a prepended \"#\".\r\n     * Also, the use of 2-digit instead of 4-digit addresses indicates that a zero-page address is\r\n     * being used.  Finally, all displacements/addresses and immediate values are displayed in hex by\r\n     * default, so there is no need to waste space prepending the traditional \"$\" to such values.\r\n     *\r\n     * Other addressing modes:\r\n     *\r\n     *      101     ZPY     $nn,Y           Zero-Page,Y (used by LDX and STX only)\r\n     *\r\n     *              ACC     A               Accumulator\r\n     *\r\n     *              IMM16   $nnnn           Used by JSR (0x20) and JMP (0x4C); I consider this an \"Immediate\" operation\r\n     *                                      that uses 16 bits, but it is documented as \"Absolute\" addressing (see Zaks)\r\n     *\r\n     *                                      FYI, this is the same operand format used for branch displacements (MODE_DISP),\r\n     *                                      except the displacements are 8-bit values that are signed-extended to 16 bits, so\r\n     *                                      discriminating between MODE_DISP and MODE_IMM16 also requires checking the operand size\r\n     *\r\n     *              ABS16   ($nnnn)         Used by JMP (0x6C); I consider this an \"Absolute\" operation that fetches\r\n     *                                      16 bits of data, but it is documented as \"Indirect\" addressing (see Zaks)\r\n     */\r\n    setOpModes(fClassic)\r\n    {\r\n        /*\r\n         * NOTE: The modes are arranged within aOpModes so that longer matches are checked before\r\n         * any subsets that could also match (eg, check for \"$nn,X\" before \"$nn\", \"$nnnn,X\" before \"$nnnn\", etc).\r\n         */\r\n        this.MODE_ACC   = 0;\r\n        this.MODE_IMM   = 1;\r\n        this.MODE_ABSX  = 2;\r\n        this.MODE_ABSY  = 3;\r\n        this.MODE_IMM16 = 4;\r\n        this.MODE_ABS16 = 5;\r\n        this.MODE_ZPX   = 6;\r\n        this.MODE_ZPY   = 7;\r\n        this.MODE_INDX  = 8;\r\n        this.MODE_INDY  = 9;\r\n        this.MODE_ABS   = 10;\r\n        this.MODE_ZP    = 11;\r\n        this.MODE_DISP  = this.MODE_IMM16;\r\n\r\n        var sRegEx = \"\";\r\n        var iMode, sMode;\r\n\r\n        if (fClassic) {\r\n            this.aOpModes = [\r\n                            \"A\",            // MODE_ACC\r\n                /* 010b */  \"#$nn\",         // MODE_IMM\r\n                /* 111b */  \"$nnnn,X\",      // MODE_ABSX\r\n                /* 110b */  \"$nnnn,Y\",      // MODE_ABSY\r\n                            \"$nnnn\",        // MODE_IMM16\r\n                            \"($nnnn)\",      // MODE_ABS16\r\n                /* 101b */  \"$nn,X\",        // MODE_ZPX\r\n                            \"$nn,Y\",        // MODE_ZPY\r\n                /* 000b */  \"($nn,X)\",      // MODE_INDX\r\n                /* 100b */  \"($nn),Y\",      // MODE_INDY\r\n                /* 011b */  \"$nnnn\",        // MODE_ABS\r\n                /* 001b */  \"$nn\"           // MODE_ZP\r\n            ];\r\n            for (iMode=0; iMode < this.aOpModes.length; iMode++) {\r\n                sMode = this.aOpModes[iMode];\r\n                sRegEx += \"(\" + sMode.replace(/\\(/g, \"\\\\(\").replace(/\\)/g, \"\\\\)\").replace(/nnnn/g, \"[0-9A-F][0-9A-F][0-9A-F][0-9A-F]?\").replace(/nn/g, \"[0-9A-F][0-9A-F]?\").replace(/\\$/g, \"\\\\$\") + \"|)\";\r\n            }\r\n            this.regexOpModes = new RegExp(sRegEx);\r\n        }\r\n        else {\r\n            this.aOpModes = [\r\n                            \"A\",            // MODE_ACC\r\n                /* 010b */  \"nn\",           // MODE_IMM\r\n                /* 111b */  \"[nnnn+X]\",     // MODE_ABSX\r\n                /* 110b */  \"[nnnn+Y]\",     // MODE_ABSY\r\n                            \"nnnn\",         // MODE_IMM16\r\n                            \"[nnnn]\",       // MODE_ABS16\r\n                /* 101b */  \"[nn+X]\",       // MODE_ZPX\r\n                            \"[nn+Y]\",       // MODE_ZPY\r\n                /* 000b */  \"[[nn+X]]\",     // MODE_INDX\r\n                /* 100b */  \"[[nn]+Y]\",     // MODE_INDY\r\n                /* 011b */  \"[nnnn]\",       // MODE_ABS\r\n                /* 001b */  \"[nn]\"          // MODE_ZP\r\n            ];\r\n            for (iMode=0; iMode < this.aOpModes.length; iMode++) {\r\n                sMode = this.aOpModes[iMode];\r\n                sRegEx += \"(\" + sMode.replace(/\\[/g, \"\\\\[\").replace(/]/g, \"\\\\]\").replace(/nnnn/g, \"[0-9A-F][0-9A-F][0-9A-F][0-9A-F]?\").replace(/nn/g, \"[0-9A-F][0-9A-F]?\").replace(/\\+/g, \"\\\\+\") + \"|)\";\r\n            }\r\n            this.regexOpModes = new RegExp(sRegEx);\r\n        }\r\n        /*\r\n         * Regrettably, if \"classic\" operand syntax is in effect, then we will have to look at the context of the\r\n         * operand (ie, the operation code) whenever we have a MODE_IMM16 (or MODE_DISP) match, because it might actually\r\n         * be a MODE_ABS operand.  MODE_IMM16 is used with only 2 operations (OP_JSR and OP_JMP), and MODE_DISP only 8\r\n         * (OP_BPL, OP_BMI, OP_BVC, OP_BVS, OP_BCC, OP_BCS, OP_BNE, and OP_BEQ), so if the operation isn't one of those\r\n         * codes (in the following array), then we should convert MODE_IMM16 (aka MODE_DISP) into MODE_ABS.\r\n         */\r\n        this.aImm16Codes = [this.OP_JMP, this.OP_JSR, this.OP_BPL, this.OP_BMI, this.OP_BVC, this.OP_BVS, this.OP_BCC, this.OP_BCS, this.OP_BNE, this.OP_BEQ];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     */\r\n    halt()\r\n    {\r\n        /*\r\n         * We ask the CPU to halt, but we can't assume it's stopped until it calls stop()\r\n         */\r\n        this.cpu.halt();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} s is any diagnostic string that you can print later using the Debugger's \"i\" command\r\n     */\r\n    info(s)\r\n    {\r\n        if (DEBUG) {\r\n            this.aInfoBuffer[this.iInfoBuffer++] = s;\r\n            if (this.iInfoBuffer >= this.aInfoBuffer.length) {\r\n                this.iInfoBuffer = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} sMessage is any caller-defined message string\r\n     */\r\n    message(sMessage)\r\n    {\r\n        this.print(sMessage);\r\n        this.cpu.yieldCPU();    // these print() calls are at risk of being called with high frequency, so we need to yieldCPU() more\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {Component} component\r\n     * @param {number} addr\r\n     * @param {number|undefined} addrFrom\r\n     * @param {boolean} bitsMessage is a Debugger MESSAGE_* category flag\r\n     * @param {boolean|undefined} [fWrite] is true if this was a write, false (or undefined) if read\r\n     * @param {string|undefined} [name] of the port, if any\r\n     */\r\n    messageIO(component, addr, addrFrom, bitsMessage, fWrite, name)\r\n    {\r\n        if ((this.bitsMessage & bitsMessage) == bitsMessage) {\r\n            var b = this.cpu.getByte(addr);\r\n            this.printf(\"%s.%s(%#06x) @%#06x %s=%#04x\\n\", component.id, fWrite? \"setByte\" : \"getByte\", addr, addrFrom, name || \"unknown\", b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     */\r\n    init()\r\n    {\r\n        // this.doHelp();\r\n        this.printf(\"Type ? for list of debugger commands\\n\\n\");\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @returns {boolean}\r\n     */\r\n    run()\r\n    {\r\n        if (!this.isCPUOK()) return false;\r\n        this.cpu.run();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} n (0 implies a single-step, and therefore breakpoints should be ignored)\r\n     * @returns {boolean}\r\n     */\r\n    step(n)\r\n    {\r\n        if (!this.isCPUOK()) return false;\r\n        var fCompleted;\r\n        try {\r\n            fCompleted = this.cpu.step(n);\r\n        }\r\n        catch(e) {\r\n            fCompleted = undefined;\r\n            this.cpu.setError(e.stack || e.message);\r\n        }\r\n        if (fCompleted !== undefined) this.cIns++;\r\n        /*\r\n         * Because we called cpu.step() and not cpu.run(), we must\r\n         * nudge the CPU's update code, and then update our own state.\r\n         */\r\n        this.cpu.update(true);\r\n        this.update(true);\r\n        return fCompleted;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {boolean} [fStep]\r\n     */\r\n    update(fStep)\r\n    {\r\n        this.nextAddr = this.cpu.regPC;\r\n        if (fStep || this.fStepOver) {\r\n            this.doUnassemble();\r\n        } else {\r\n            this.doRegisters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @returns {boolean}\r\n     *\r\n     * Make sure the CPU is ready (finished initializing), not busy (already running), and not in an error state.\r\n     */\r\n    isCPUOK()\r\n    {\r\n        if (!this.cpu || !this.cpu.isReady() || this.cpu.isBusy()) {\r\n            return false;\r\n        }\r\n        return !this.cpu.isError();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     *\r\n     * This is a notification handler, called by the CPU, to inform us that the CPU has been reset.\r\n     */\r\n    reset()\r\n    {\r\n        var i;\r\n        if (!this.aStepHistory.length) {\r\n            this.aStepHistory = new Array(1000);\r\n        }\r\n        for (i = 0; i < this.aStepHistory.length; i++) {\r\n            this.aStepHistory[i] = -1;\r\n        }\r\n        if (!this.aaOpcodeFreqs.length) {\r\n            this.aaOpcodeFreqs = new Array(256);\r\n        }\r\n        for (i = 0; i < this.aaOpcodeFreqs.length; i++) {\r\n            this.aaOpcodeFreqs[i] = [i, 0];\r\n        }\r\n        if (this.cIns) this.update();\r\n        this.cIns = 0;\r\n        this.cReads = this.cWrites = this.cWritesZP = 0;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     *\r\n     * This is a notification handler, called by the CPU, to inform us that the CPU has started running.\r\n     */\r\n    start()\r\n    {\r\n        if (!this.fStepOver) this.printf(\"running\\n\");\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} msStart\r\n     * @param {number} nCycles\r\n     *\r\n     * This is a notification handler, called by the CPU, to inform us that the CPU has now stopped running.\r\n     */\r\n    stop(msStart, nCycles)\r\n    {\r\n        if (!this.fStepOver) {\r\n            this.printf(\"stopped\\n\");\r\n            if (nCycles) {\r\n                var msTotal = Component.getTime();\r\n                msTotal -= msStart;\r\n                this.printf(\"%dms (%d cycles)\\n\", msTotal, nCycles);\r\n                if (MAXDEBUG && msTotal > 0) {\r\n                    nCycles = nCycles * 1000 / msTotal;\r\n                    this.printf(\"total cycles/second: %d\\n\", Math.round(nCycles));\r\n                    var percent = Math.round((this.cIns? this.cReads / this.cIns : 0) * 1000) / 10;\r\n                    this.printf(\"total reads: %d (%d%)\\n\", this.cReads, percent);\r\n                    percent = Math.round((this.cIns? this.cWrites / this.cIns : 0) * 1000) / 10;\r\n                    this.printf(\"total writes: %d (%d%)\\n\", this.cWrites, percent);\r\n                    percent = Math.round((this.cIns? this.cWritesZP / this.cIns : 0) * 1000) / 10;\r\n                    this.printf(\"total zero-page writes: %d (%d%)\\n\", this.cWritesZP, percent);\r\n                    this.printf(\"total instructions: %d\\n\", this.cIns);\r\n                }\r\n            }\r\n        }\r\n        this.update();\r\n        this.setFocus();\r\n        if (!this.fStepOver) {\r\n            this.cIns = 0;\r\n            this.cReads = this.cWrites = this.cWritesZP = 0;\r\n        }\r\n        this.clearTempBreakpoint(this.cpu.regPC);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     *\r\n     * This is a check function, called by the CPU, indicating whether other instructions need to be checked.\r\n     */\r\n    checksEnabled()\r\n    {\r\n        return (DEBUG? true : (this.aExecBreak.length > 0 || this.aReadBreak.length > 0 || this.aWriteBreak.length > 0));\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {number} bOpCode\r\n     * @returns {boolean} true to proceed, false to halt\r\n     *\r\n     * This is a check function, called by the CPU, to inform us about the next instruction to be executed, giving\r\n     * us an opportunity to look for \"exec\" breakpoints and update opcode frequencies and instruction history.\r\n     */\r\n    checkInstruction(addr, bOpCode)\r\n    {\r\n        var fBreak = false;\r\n        if (this.checkBreakpoint(addr, this.aExecBreak, \"exec\")) {\r\n            fBreak = true;\r\n        }\r\n        else {\r\n            this.cIns++;\r\n            this.aaOpcodeFreqs[bOpCode][1]++;\r\n            this.aStepHistory[this.iStepHistory++] = this.cpu.regPC;\r\n            if (this.iStepHistory >= this.aStepHistory.length) {\r\n                this.iStepHistory = 0;\r\n            }\r\n        }\r\n        return !fBreak;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @returns {boolean} true to proceed, false to halt\r\n     *\r\n     * This is a check function, called by the CPU, to inform us that a memory read occurred, giving us an\r\n     * opportunity to track the read if we want, and look for a matching \"read\" breakpoint, if any.\r\n     */\r\n    checkMemoryRead(addr)\r\n    {\r\n        var fBreak = false;\r\n        this.cReads++;\r\n        if (this.checkBreakpoint(addr, this.aReadBreak, \"read\")) {\r\n            fBreak = true;\r\n        }\r\n        return !fBreak;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {number} value written\r\n     * @returns {boolean} true to proceed, false to halt\r\n     *\r\n     * This is a check function, called by the CPU, to inform us that a memory write occurred, giving us an\r\n     * opportunity to track the write if we want, and look for a matching \"write\" breakpoint, if any.\r\n     */\r\n    checkMemoryWrite(addr, value)\r\n    {\r\n        var fBreak = false;\r\n        this.cWrites++;\r\n        /*\r\n         * NOTE: We keep track of zero-page writes mainly as a reminder to look into whether it makes sense\r\n         * for the CPU to calculate zero-page EAs using a different variable (eg, regEAWriteZP instead of regEAWrite),\r\n         * because write-notification handlers never care about page zero accesses, and while write breakpoints *may*\r\n         * care, it may not be worth the cost of tracking writes to page zero if there's an associated perf penalty.\r\n         */\r\n        if (!(addr & 0xff00)) {\r\n            this.cWritesZP++;\r\n        }\r\n        if ((value & 0xff) != value) {\r\n            this.printf(\"invalid value at %#06x: %s\\n\", addr, value);\r\n            fBreak = true;\r\n        }\r\n        if (this.checkBreakpoint(addr, this.aWriteBreak, \"write\")) {\r\n            fBreak = true;\r\n        }\r\n        return !fBreak;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {number} b\r\n     * @returns {number}\r\n     */\r\n    addSignedByte(addr, b)\r\n    {\r\n        return addr + ((b << 24) >> 24);\r\n    }\r\n\r\n    /**\r\n     * getByte() should be used for all memory reads performed by the Debugger (eg, doDump, doUnassemble),\r\n     * to insure that the CPU is properly notified (and by extension, any device that's registered a\r\n     * notification handler with the CPU).\r\n     *\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @returns {number|undefined}\r\n     */\r\n    getByte(addr)\r\n    {\r\n        var b;\r\n        if (addr >= this.offMem && addr < this.offLimit) {\r\n            this.cpu.checkReadNotify(addr);\r\n            b = this.abMem[this.offMem + addr];\r\n\r\n            b &= 0xff;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n     * setByte() should be used for all memory writes performed by the Debugger (eg, doAssemble, doEdit),\r\n     * to insure that the CPU is properly notified (and by extension, any device that's registered a\r\n     * notification handler with the CPU).\r\n     *\r\n     * NOTE: Even though we call all write-notification handlers, we don't include a \"from\" address,\r\n     * because the write originated from the Debugger, not from a CPU instruction.  As a result, handlers should\r\n     * not refuse the write unless they have good reason; in particular, the ROM handlers will not refuse our writes,\r\n     * allowing the Debugger to modify ROM contents as needed.\r\n     *\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {number} b\r\n     */\r\n    setByte(addr, b)\r\n    {\r\n        if (addr < this.offMem || addr >= this.offLimit) {\r\n            this.printf(\"invalid address: %#06x\\n\", addr);\r\n            return;\r\n        }\r\n        this.abMem[this.offMem + addr] = (b & 0xff);\r\n        this.cpu.checkWriteNotify(addr);\r\n        this.cpu.update();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     */\r\n    clearBreakpoints()\r\n    {\r\n        this.aExecBreak = [];\r\n        this.aReadBreak = [];\r\n        this.aWriteBreak = [];\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @returns {boolean}\r\n     */\r\n    addExecBreakpoint(addr)\r\n    {\r\n        if (!this.findExecBreakpoint(addr)) {\r\n            this.aExecBreak.push(addr);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @returns {boolean}\r\n     */\r\n    addReadBreakpoint(addr)\r\n    {\r\n        if (!this.findReadBreakpoint(addr)) {\r\n            this.aReadBreak.push(addr);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @returns {boolean}\r\n     */\r\n    addWriteBreakpoint(addr)\r\n    {\r\n        if (!this.findWriteBreakpoint(addr)) {\r\n            this.aWriteBreak.push(addr);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @returns {Array}\r\n     */\r\n    getExecBreakpoints()\r\n    {\r\n        return this.aExecBreak;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @returns {Array}\r\n     */\r\n    getReadBreakpoints()\r\n    {\r\n        return this.aReadBreak;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @returns {Array}\r\n     */\r\n    getWriteBreakpoints()\r\n    {\r\n        return this.aWriteBreak;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {Array} aBreak\r\n     * @param {number} addr\r\n     * @param {boolean} [fRemove]\r\n     * @returns {boolean}\r\n     */\r\n    findBreakpoint(aBreak, addr, fRemove)\r\n    {\r\n        var fMatch = false;\r\n        for (var i=0; i < aBreak.length; i++) {\r\n            if (aBreak[i] == addr) {\r\n                if (fRemove) {\r\n                    aBreak.splice(i, 1);\r\n                }\r\n                fMatch = true;\r\n                break;\r\n            }\r\n        }\r\n        return fMatch;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {boolean} [fRemove]\r\n     * @returns {boolean}\r\n     */\r\n    findExecBreakpoint(addr, fRemove)\r\n    {\r\n        return this.findBreakpoint(this.aExecBreak, addr, fRemove);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {boolean} [fRemove]\r\n     * @returns {boolean}\r\n     */\r\n    findReadBreakpoint(addr, fRemove)\r\n    {\r\n        return this.findBreakpoint(this.aReadBreak, addr, fRemove);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {boolean} [fRemove]\r\n     * @returns {boolean}\r\n     */\r\n    findWriteBreakpoint(addr, fRemove)\r\n    {\r\n        return this.findBreakpoint(this.aWriteBreak, addr, fRemove);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number|undefined} addr of new temp breakpoint\r\n     */\r\n    setTempBreakpoint(addr)\r\n    {\r\n        if (addr !== undefined) {\r\n            /*\r\n             * I don't want temporary breakpoints growing out of control, so I forcibly clear any\r\n             * existing temp breakpoint by feeding clearTempBreakpoint() the current temp address, if any;\r\n             * but you can remove the next line if you decide multiple temp breakpoints are a good thing.\r\n             */\r\n            this.clearTempBreakpoint(this.addrTempBP);\r\n            if (this.addExecBreakpoint(addr)) {\r\n                this.addrTempBP = addr;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr to compare to addrTempBP; the latter is cleared if there's a match\r\n     */\r\n    clearTempBreakpoint(addr)\r\n    {\r\n        if (this.addrTempBP !== undefined && addr == this.addrTempBP) {\r\n            if (this.findExecBreakpoint(this.addrTempBP, true)) {\r\n                this.addrTempBP = undefined;\r\n            }\r\n        }\r\n        this.fStepOver = false;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {Array} aBreakpoints\r\n     * @param {string} sType (ie, \"exec\" or \"write\")\r\n     * @returns {boolean} true if breakpoint has been hit, false if not\r\n     */\r\n    checkBreakpoint(addr, aBreakpoints, sType)\r\n    {\r\n        /*\r\n         * Time to check for execution breakpoints; note that this should be done BEFORE updating any of the frequency\r\n         * or history data (see checkInstruction), since we might not actually execute the current instruction.\r\n         */\r\n        var fBreak = false;\r\n        for (var i=0; i < aBreakpoints.length; i++) {\r\n            if (aBreakpoints[i] == addr) {\r\n                if (addr != this.addrTempBP) {\r\n                    this.printf(\"breakpoint hit: %#06x (%s)\\n\", addr, sType);\r\n                }\r\n                fBreak = true;\r\n                break;\r\n            }\r\n        }\r\n        return fBreak;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {number} addr\r\n     * @param {number} [nIns] is an associated instruction number, or 0 (or undefined) if none\r\n     * @returns {string}\r\n     */\r\n    getInstruction(addr, nIns)\r\n    {\r\n        var sLine = StrLib.toHex(addr, 4);\r\n        var bOpCode = this.getByte(addr++);\r\n        var b = (bOpCode === undefined? 0 : bOpCode);\r\n        var aOpDesc = this.aaOperations[b];\r\n        var abOperand = [];\r\n        var cb = (aOpDesc[1] === undefined? 0 : aOpDesc[1]);\r\n        do {\r\n            sLine += \" \" + StrLib.toHex(b, 2);\r\n            if (!(cb--)) break;\r\n            b = this.getByte(addr++);\r\n            if (b === undefined) break;\r\n            abOperand.push(b);\r\n        } while (true);\r\n        if (aOpDesc[0] === undefined) {\r\n            aOpDesc = [this.OP_DB, 1, this.MODE_IMM];\r\n            abOperand.push(bOpCode);\r\n        }\r\n        sLine = (sLine + \"        \").substr(0, 15);\r\n        sLine += this.aOpCodes[aOpDesc[0]];\r\n        var sOperand = null;\r\n        if (aOpDesc[2] !== undefined) {\r\n            var bOpMode = aOpDesc[2];\r\n            sOperand = this.aOpModes[bOpMode];\r\n            if (aOpDesc[1] == 1 && bOpMode == this.MODE_DISP) {\r\n                sOperand = sOperand.replace(/nnnn/, StrLib.toHex(this.addSignedByte(addr, b = abOperand.pop()), 4));\r\n            }\r\n            else {\r\n                while (abOperand.length) {\r\n                    sOperand = sOperand.replace(/nn/, StrLib.toHex(b = abOperand.pop(), 2));\r\n                }\r\n            }\r\n            if (bOpMode == this.MODE_IMM && aOpDesc[1] == 1) {\r\n                if (b >= 0x20 && b < 0x80) {\r\n                    sOperand += \" ;'\" + String.fromCharCode(b) + \"'\";\r\n                }\r\n            }\r\n        }\r\n        if (bOpCode == this.cpu.OP_SIM) {\r\n            if (b < this.aOpSimCodes.length) {\r\n                sOperand = this.aOpSimCodes[b];\r\n            }\r\n            if (b == this.cpu.SIMOP_MSG) {\r\n                cb = 0;\r\n                sOperand = \"\\\"\";\r\n                while ((b = this.getByte(addr++))) {\r\n                    if (cb < 16) {\r\n                        sOperand += String.fromCharCode(b);\r\n                    }\r\n                    else if (cb == 16) {\r\n                        sOperand += \"…\";\r\n                    }\r\n                    cb++;\r\n                }\r\n                sOperand += \"\\\"\";\r\n            }\r\n        }\r\n        if (sOperand) sLine += \" \" + sOperand;\r\n        if (nIns) {\r\n            sLine += \"               \";\r\n            sLine = sLine.substr(0, 30);\r\n            sLine += \";\" + nIns.toString();\r\n        }\r\n        this.nextIns = addr;\r\n        return sLine;\r\n    }\r\n\r\n    /**\r\n     * parseInstruction(sCode, sOperand, addr)\r\n     *\r\n     * This generally requires an exact match of both the operation code (sCode) and mode operand (sOperand)\r\n     * against the aOpCodes[] and aOpModes[] arrays, respectively; however, the regular expression built from\r\n     * aOpModes and stored in regexOpModes does relax the matching criteria slightly; ie, a 4-digit hex value\r\n     * (\"nnnn\") will be satisfied with either 3 or 4 digits, and similarly, a 2-digit hex address (nn) will\r\n     * be satisfied with either 1 or 2 digits.\r\n     *\r\n     * Note that this function does not actually store the instruction into memory, even though it requires\r\n     * a target address (addr); that parameter is currently needed ONLY for \"branch\" instructions, because in\r\n     * order to calculate the branch displacement, it needs to know where the instruction will ultimately be\r\n     * stored, relative to its target address.\r\n     *\r\n     * Another handy feature of this function is its ability to display all available modes for a particular\r\n     * operation. For example, while in \"assemble mode\", if one types:\r\n     *\r\n     *      ldy?\r\n     *\r\n     * the Debugger will display:\r\n     *\r\n     *      supported opcodes:\r\n     *           A0: LDY nn\r\n     *           A4: LDY [nn]\r\n     *           AC: LDY [nnnn]\r\n     *           B4: LDY [nn+X]\r\n     *           BC: LDY [nnnn+X]\r\n     *\r\n     * Use of a trailing \"?\" on any opcode will display all variations of that opcode; no instruction will be\r\n     * assembled, and the operand parameter, if any, will be ignored.\r\n     *\r\n     * Although this function is capable of reporting numerous errors, roughly half of them indicate internal\r\n     * consistency errors, not user errors; the former should really be asserts, but I'm not comfortable bombing\r\n     * out because of my error as opposed to their error.  The only errors a user should expect to see:\r\n     *\r\n     *      \"unknown operation\":    sCode is not a valid operation (per aOpCodes)\r\n     *      \"unknown operand\":      sOperand is not a valid operand (per aOpModes)\r\n     *      \"unknown instruction\":  the combination of sCode + sOperand does not exist (per aaOperations)\r\n     *      \"branch out of range\":  the branch address, relative to addr, is too far away\r\n     *\r\n     * @this {C1PDebugger}\r\n     * @param {string} sCode\r\n     * @param {string|undefined} sOperand\r\n     * @param {number} addr of memory where this instruction is being assembled\r\n     * @returns {Array.<number>} of opcode bytes; if the instruction can't be parsed, the array will be empty\r\n     */\r\n    parseInstruction(sCode, sOperand, addr)\r\n    {\r\n        var aOpBytes = [];\r\n        if (sCode !== undefined) {\r\n            var iCode, iMode;\r\n            /*\r\n             * Find the iCode that corresponds to the given operation code\r\n             */\r\n            sCode = sCode.toUpperCase();\r\n            if (sCode.charAt(sCode.length-1) == \"?\") {\r\n                sOperand = \"?\";\r\n                sCode = sCode.substr(0, sCode.length-1);\r\n            }\r\n            for (iCode=0; iCode < this.aOpCodes.length; iCode++) {\r\n                if (sCode == this.aOpCodes[iCode]) {\r\n                    break;\r\n                }\r\n            }\r\n            if (iCode == this.aOpCodes.length) {\r\n                this.printf(\"unknown operation: %s\\n\", sCode);\r\n                iCode = -1;\r\n            }\r\n            var sMode = \"\", aModeMatch, i;\r\n            if (iCode >= 0 && sOperand !== undefined) {\r\n                sMode = sOperand.toUpperCase();\r\n                if (sMode == \"?\") {\r\n                    var cModes = 0;\r\n                    for (i = 0; i < this.aaOperations.length; i++) {\r\n                        if (this.aaOperations[i][0] === iCode) {\r\n                            if (!cModes) this.printf(\"supported opcodes:\\n\");\r\n                            this.printf(\"     %02x: %s%s\\n\", i, sCode, (this.aaOperations[i][2] !== undefined? (\" \" + this.aOpModes[this.aaOperations[i][2]]) : \"\"));\r\n                            cModes++;\r\n                        }\r\n                    }\r\n                    iCode = -1;\r\n                }\r\n                else {\r\n                    /*\r\n                     * Find the iMode that corresponds to the given operand\r\n                     */\r\n                    aModeMatch = sMode.match(this.regexOpModes);\r\n                    if (aModeMatch !== null && aModeMatch[0] == sMode) {\r\n                        /*\r\n                         * One of the sub-patterns must have matched as well; the index of the matching\r\n                         * sub-pattern will correspond to the proper aOpModes index, albeit off-by-one since\r\n                         * the regex match at [0] is the complete match, not a sub-pattern match.\r\n                         */\r\n                        for (i = 1; i < aModeMatch.length; i++) {\r\n                            if (aModeMatch[i] == sMode) {\r\n                                if (iMode === undefined) {\r\n                                    iMode = i-1;\r\n                                }\r\n                                else {\r\n                                    /*\r\n                                     * This is really an internal consistency error; regardless what the user types, this should not occur.\r\n                                     */\r\n                                    //noinspection JSUnusedAssignment\r\n                                    this.printf(\"too many operand matches (both %s and %s)\\n\", this.aOpModes[iMode], this.aOpModes[i-1]);\r\n                                    iCode = -1;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        /*\r\n                         * Regrettably, if \"classic\" operand syntax is in effect, then we must look at the context of the\r\n                         * operand (ie, the operation code) whenever we have a MODE_IMM16 (or MODE_DISP) match, because it might\r\n                         * actually be a MODE_ABS operand; see setOpModes() for details of the aImm16Codes array.\r\n                         */\r\n                        if (iMode == this.MODE_IMM16) {\r\n                            if (this.aImm16Codes.indexOf(iCode) < 0) {\r\n                                iMode = this.MODE_ABS;\r\n                            }\r\n                        }\r\n                        /*\r\n                         * Even in \"modern\" syntax mode, we have to look at the context of a MODE_ABS16 match, because unless\r\n                         * the operation is OP_JMP, then the mode must actually be MODE_ABS.\r\n                         */\r\n                        if (iMode == this.MODE_ABS16) {\r\n                            if (iCode != this.OP_JMP) {\r\n                                iMode = this.MODE_ABS;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.printf(\"unknown operand: %s\\n\", sMode);\r\n                        iCode = -1;\r\n                    }\r\n                }\r\n            }\r\n            if (iCode >= 0) {\r\n                /*\r\n                 * So we have an iCode and possibly an iMode; find the one (and hopefully only) aaOperations instruction entry that matches\r\n                 */\r\n                var bOpCode = -1;\r\n                for (i = 0; i < this.aaOperations.length; i++) {\r\n                    if (this.aaOperations[i][0] === iCode && this.aaOperations[i][2] === iMode) {\r\n                        if (bOpCode < 0) {\r\n                            bOpCode = i;\r\n                        }\r\n                        else {\r\n                            /*\r\n                             * This is really an internal consistency error; regardless what the user types, this should not occur.\r\n                             */\r\n                            this.printf(\"too many instruction matches (both %#04x and %#04x)\\n\", bOpCode, i);\r\n                            bOpCode = -2;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (bOpCode >= 0) {\r\n                    aOpBytes.push(bOpCode);\r\n                    if (iMode !== undefined) {\r\n                        var cb = this.aaOperations[bOpCode][1];\r\n                        var asHex = sMode.match(/[0-9A-F]+/);\r\n                        if (asHex !== null) {\r\n                            var nHex = parseInt(asHex[0], 16);\r\n                            if (cb == 1 && iMode == this.MODE_DISP) {\r\n                                nHex -= (addr + 2);\r\n                                if (nHex < -128 || nHex > 127) {\r\n                                    this.printf(\"branch out of range (%d)\\n\", nHex);\r\n                                    aOpBytes = [];\r\n                                    cb = 0;\r\n                                }\r\n                            }\r\n                            for (i = 0; i < cb; i++) {\r\n                                aOpBytes.push(nHex & 0xff);\r\n                                nHex >>>= 8;\r\n                            }\r\n                        }\r\n                        else if (cb) {\r\n                            /*\r\n                             * This is really an internal consistency error; regardless what the user types, this should not occur.\r\n                             */\r\n                            this.printf(\"instruction missing %d bytes\\n\", cb);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.printf(\"unknown instruction: %s %s%s\\n\", sCode, sMode, (DEBUG? (\" (\" + iMode + \")\") : \"\"));\r\n                }\r\n            }\r\n        }\r\n        return aOpBytes;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @returns {string}\r\n     */\r\n    getRegs()\r\n    {\r\n        return \"A=\" + StrLib.toHex(this.cpu.regA, 2) +\r\n              \" X=\" + StrLib.toHex(this.cpu.regX, 2) +\r\n              \" Y=\" + StrLib.toHex(this.cpu.regY, 2) +\r\n              \" P=\" + StrLib.toHex(this.cpu.getRegP(), 2) +\r\n              \" S=\" + StrLib.toHex(this.cpu.regS, 4) +\r\n              \" PC=\" + StrLib.toHex(this.cpu.regPC, 4);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string|undefined} [sAddr]\r\n     * @returns {number|undefined}\r\n     */\r\n    getUserAddr(sAddr)\r\n    {\r\n        var addr = this.nextAddr;\r\n        if (sAddr !== undefined) {\r\n            var nBase = 16;\r\n            if (sAddr.charAt(0) == \"$\") {\r\n                sAddr = sAddr.substr(1);\r\n            }\r\n            else if (sAddr.substr(0, 2) == \"0x\") {\r\n                sAddr = sAddr.substr(2);\r\n            }\r\n            else if (sAddr.charAt(sAddr.length-1) == \".\") {\r\n                nBase = 10;\r\n                sAddr = sAddr.substr(0, sAddr.length-1);\r\n            }\r\n            addr = parseInt(sAddr, nBase);\r\n            if (isNaN(addr)) {\r\n                this.printf(\"invalid base-%d address: %s\\n\", nBase, sAddr);\r\n                addr = undefined;\r\n            }\r\n        }\r\n        if (addr !== undefined && (addr < this.offMem || addr >= this.offLimit)) {\r\n            this.printf(\"address out of range: %x\\n\", addr);\r\n            addr = undefined;\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     */\r\n    doHelp()\r\n    {\r\n        this.printf(\"\\ncommands:\\n?\\thelp\\na [#]\\tassemble\\nb [#]\\tbreakpoint\\nd [#]\\tdump memory\\ne [#]\\tedit memory\\nf\\tdump frequencies\\ng [#]\\trun to [#]\\nh\\thalt\\no\\toptions\\np [#]\\tdump history\\nr\\tdump/edit registers\\ns\\tstep over instruction\\nt [#]\\tstep instruction(s)\\nu [#]\\tunassemble\\n\");\r\n        this.printf(\"note: frequency and history commands operate only when breakpoints are set\\n\");\r\n    }\r\n\r\n    /**\r\n     * doAssemble() always receives the complete argument array, where the order of the arguments is:\r\n     *\r\n     *      [0]: the assemble command (assumed to be \"a\")\r\n     *      [1]: the target address (eg, \"200\")\r\n     *      [2]: the operation code, aka mnemonic (eg, \"adc\")\r\n     *      [3]: the operation mode operand, if any (eg, \"14\", \"[1234]\", etc)\r\n     *\r\n     * The Debugger enters \"assemble mode\" whenever only the first (or first and second) arguments are present.\r\n     * As long as \"assemble mode is active, the user can omit the first two arguments on all later assemble commands\r\n     * until \"assemble mode\" is cancelled with an empty command line; the command processor automatically prepends \"a\"\r\n     * and the next available target address to the argument array.\r\n     *\r\n     * Entering \"assemble mode\" is optional; one could enter a series of fully-qualified assemble commands; eg:\r\n     *\r\n     *      a ff00 cld\r\n     *      a ff01 ldx 28\r\n     *      ...\r\n     *\r\n     * without ever entering \"assemble mode\", but of course, that requires more typing and doesn't take advantage\r\n     * of automatic target address advancement (see addrAssembleNext).\r\n     *\r\n     * NOTE: As the previous example implies, you can even assemble new instructions into ROM address space;\r\n     * as our setByte() function explains, the ROM write-notification handlers only refuse writes from the CPU.\r\n     *\r\n     * @this {C1PDebugger}\r\n     * @param {Array.<string>} asArgs is the complete argument array, beginning with the \"a\" command in asArgs[0]\r\n     */\r\n    doAssemble(asArgs)\r\n    {\r\n        var addr = this.getUserAddr(asArgs[1]);\r\n        if (addr === undefined) {\r\n            return;\r\n        }\r\n        this.addrAssembleNext = addr;\r\n        if (asArgs[2] === undefined) {\r\n            this.printf(\"begin assemble @%#06x\\n\", this.addrAssembleNext);\r\n            this.fAssemble = true;\r\n            this.cpu.update();\r\n            return;\r\n        }\r\n        var aOpBytes = this.parseInstruction(asArgs[2], asArgs[3], this.addrAssembleNext);\r\n        if (aOpBytes.length) {\r\n            for (var i=0; i < aOpBytes.length; i++) {\r\n                // this.printf(\"%#06x: %#04x\\n\", this.addrAssembleNext, aOpBytes[i]);\r\n                this.setByte(this.addrAssembleNext+i, aOpBytes[i]);\r\n            }\r\n            this.printf(\"%s\\n\", this.getInstruction(this.addrAssembleNext));\r\n            this.addrAssembleNext += aOpBytes.length;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} [sParm]\r\n     * @param {string} [sAddr]\r\n     */\r\n    doBreak(sParm, sAddr)\r\n    {\r\n        if (sParm === undefined || sParm == \"?\") {\r\n            this.printf(\"\\nbreakpoint commands:\\n\");\r\n            this.printf(\"bp [a]\\tset exec breakpoint at [a]\\n\");\r\n            this.printf(\"br [a]\\tset read breakpoint at [a]\\n\");\r\n            this.printf(\"bw [a]\\tset write breakpoint at [a]\\n\");\r\n            this.printf(\"bc [a]\\tclear breakpoint at [a]\\n\");\r\n            this.printf(\"bl\\tlist all breakpoints\\n\");\r\n            return;\r\n        }\r\n        if (sAddr === undefined && sParm.length > 1) {\r\n            sAddr = sParm.substr(1);\r\n            sParm = sParm.substr(0, 1);\r\n        }\r\n        if (sParm == \"l\") {\r\n            var cBreaks = 0, i;\r\n            var aAddrs = this.getExecBreakpoints();\r\n            for (i = 0; i < aAddrs.length; i++) {\r\n                this.printf(\"breakpoint enabled: %#06x (exec)\\n\", aAddrs[i]);\r\n                cBreaks++;\r\n            }\r\n            aAddrs = this.getReadBreakpoints();\r\n            for (i = 0; i < aAddrs.length; i++) {\r\n                this.printf(\"breakpoint enabled: %#06x (read)\\n\", aAddrs[i]);\r\n                cBreaks++;\r\n            }\r\n            aAddrs = this.getWriteBreakpoints();\r\n            for (i = 0; i < aAddrs.length; i++) {\r\n                this.printf(\"breakpoint enabled: %#06x (write)\\n\", aAddrs[i]);\r\n                cBreaks++;\r\n            }\r\n            if (!cBreaks) {\r\n                this.printf(\"no breakpoints\\n\");\r\n            }\r\n            return;\r\n        }\r\n        if (sAddr === undefined) {\r\n            this.printf(\"missing breakpoint address\\n\");\r\n            return;\r\n        }\r\n        if (sParm == \"c\" && sAddr == \"*\") {\r\n            this.clearBreakpoints();\r\n            this.printf(\"all breakpoints cleared\\n\");\r\n            return;\r\n        }\r\n        var addr = this.getUserAddr(sAddr);\r\n        if (addr === undefined) {\r\n            return;\r\n        }\r\n        if (sParm == \"p\") {\r\n            if (this.addExecBreakpoint(addr)) {\r\n                this.printf(\"breakpoint enabled: %#06x (exec)\\n\", addr);\r\n            }\r\n            else {\r\n                this.printf(\"breakpoint not set: %#06x\\n\", addr);\r\n            }\r\n            return;\r\n        }\r\n        if (sParm == \"c\") {\r\n            if (this.findExecBreakpoint(addr, true)) {\r\n                this.printf(\"breakpoint cleared: %#06x (exec)\\n\", addr);\r\n            }\r\n            else if (this.findReadBreakpoint(addr, true)) {\r\n                this.printf(\"breakpoint cleared: %#06x (read)\\n\", addr);\r\n            }\r\n            else if (this.findWriteBreakpoint(addr, true)) {\r\n                this.printf(\"breakpoint cleared: %#06x (write)\\n\", addr);\r\n            }\r\n            else {\r\n                this.printf(\"breakpoint missing: %#06x\\n\", addr);\r\n            }\r\n            return;\r\n        }\r\n        if (sParm == \"r\") {\r\n            if (this.addReadBreakpoint(addr)) {\r\n                this.printf(\"breakpoint enabled: %#06x (read)\\n\", addr);\r\n            } else {\r\n                this.printf(\"breakpoint not set: %#06x\\n\", addr);\r\n            }\r\n            return;\r\n        }\r\n        if (sParm == \"w\") {\r\n            if (this.addWriteBreakpoint(addr)) {\r\n                this.printf(\"breakpoint enabled: %#06x (write)\\n\", addr);\r\n            } else {\r\n                this.printf(\"breakpoint not set: %#06x\\n\", addr);\r\n            }\r\n            return;\r\n        }\r\n        this.printf(\"unknown breakpoint command: %s\\n\", sParm);\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} sAddr\r\n     * @param {string} sLen\r\n     */\r\n    doDump(sAddr, sLen)\r\n    {\r\n        if (sAddr == \"?\") {\r\n            this.printf(\"\\ndump commands:\\n\");\r\n            this.printf(\"d [a] [#]    dump # lines of memory\\n\");\r\n            return;\r\n        }\r\n        var addr = this.getUserAddr(sAddr);\r\n        if (addr === undefined) {\r\n            return;\r\n        }\r\n        var cLines = 0;\r\n        if (sLen !== undefined) {\r\n            if (sLen.charAt(0) == \"l\") {\r\n                sLen = sLen.substr(1);\r\n            }\r\n            cLines = parseInt(sLen, 10);\r\n        }\r\n        if (!cLines) cLines = 1;\r\n        for (var line=0; line < cLines; line++) {\r\n            var sBytes = \"\";\r\n            var sChars = \"\";\r\n            var addrLine = addr;\r\n            for (var i=0; i < 8 && addr < this.offLimit; i++) {\r\n                var b = this.getByte(addr);\r\n                if (b === undefined) b = 0;\r\n                sBytes += StrLib.toHex(b, 2) + \" \";\r\n                sChars += (b >= 32 && b < 127? String.fromCharCode(b) : \".\");\r\n                addr++;\r\n            }\r\n            this.printf(\"%04x %s%s\\n\", addrLine, sBytes, sChars);\r\n        }\r\n        this.nextAddr = addr;\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {Array.<string>} asArgs\r\n     */\r\n    doEdit(asArgs)\r\n    {\r\n        var sAddr = asArgs[1];\r\n        if (sAddr === undefined) {\r\n            this.printf(\"missing address\\n\");\r\n            return;\r\n        }\r\n        var addr = this.getUserAddr(sAddr);\r\n        if (addr === undefined) {\r\n            return;\r\n        }\r\n        for (var i=2; i < asArgs.length; i++) {\r\n            var b = parseInt(asArgs[i], 16);\r\n            this.setByte(addr++, b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} sParm\r\n     */\r\n    doFreqs(sParm)\r\n    {\r\n        if (sParm == \"?\") {\r\n            this.printf(\"\\nfrequency commands:\\n\");\r\n            this.printf(\"clear\\tclear all frequency counts\\n\");\r\n            return;\r\n        }\r\n        var cData = 0, i;\r\n        if (this.aaOpcodeFreqs) {\r\n            if (sParm == \"clear\") {\r\n                for (i = 0; i < this.aaOpcodeFreqs.length; i++) {\r\n                    this.aaOpcodeFreqs[i] = [i, 0];\r\n                }\r\n                this.printf(\"frequency data cleared\\n\");\r\n                cData++;\r\n            }\r\n            else if (sParm !== undefined) {\r\n                this.printf(\"unknown frequency command: %s\\n\", sParm);\r\n                cData++;\r\n            }\r\n            else {\r\n                var aaSortedOpcodeFreqs = this.aaOpcodeFreqs.slice();\r\n                aaSortedOpcodeFreqs.sort(function(p, q) {return q[1] - p[1];});\r\n                for (i = 0; i < aaSortedOpcodeFreqs.length; i++) {\r\n                    var bOpcode = aaSortedOpcodeFreqs[i][0];\r\n                    var cFreq = aaSortedOpcodeFreqs[i][1];\r\n                    if (cFreq) {\r\n                        this.printf(\"%s (%#04x): %d times\\n\", this.aOpCodes[this.aaOperations[bOpcode][0]], bOpcode, cFreq);\r\n                        cData++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!cData) {\r\n            this.printf(\"no frequency data available\\n\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     */\r\n    doHalt()\r\n    {\r\n        this.halt();\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} sCount\r\n     */\r\n    doHistory(sCount)\r\n    {\r\n        var cLines = 10;\r\n        var iHistory = this.iStepHistory;\r\n        var aHistory = this.aStepHistory;\r\n        if (aHistory !== undefined) {\r\n            var n = (sCount === undefined? this.nextHistory : parseInt(sCount, 10));\r\n            if (n === undefined) {\r\n                n = 10;\r\n            }\r\n            if (n > aHistory.length) {\r\n                this.printf(\"note: only %d available\\n\", aHistory.length);\r\n                n = aHistory.length;\r\n            }\r\n            if (sCount !== undefined) {\r\n                this.nInsHistory = 0;\r\n                this.printf(\"%d instructions earlier:\\n\", n);\r\n            }\r\n            var nIns = (this.nInsHistory? this.nInsHistory : 1);\r\n            iHistory -= n;\r\n            if (iHistory < 0) iHistory = aHistory.length - 1;\r\n            while (cLines && iHistory != this.iStepHistory) {\r\n                var addr = aHistory[iHistory];\r\n                if (addr < 0) break;\r\n                this.printf(\"%s\\n\", this.getInstruction(addr, nIns++));\r\n                if (++iHistory == aHistory.length) iHistory = 0;\r\n                cLines--;\r\n                n--;\r\n            }\r\n            this.nextHistory = n;\r\n            this.nInsHistory = nIns;\r\n        }\r\n        if (cLines == 10) this.printf(\"no history available\\n\");\r\n    }\r\n\r\n    /**\r\n     * Prints the contents of the Debugger's \"info\" buffer (filled by calls like cpu.dbg.info())\r\n     * @this {C1PDebugger}\r\n     * @param {string|undefined} sCount\r\n     * @returns {boolean|undefined} true only if the \"info\" command is supported\r\n     */\r\n    doInfo(sCount)\r\n    {\r\n        if (DEBUG) {\r\n            var cLines = (sCount === undefined? -1 : parseInt(sCount, 10));\r\n            var i = this.iInfoBuffer;\r\n            do {\r\n                var s = this.aInfoBuffer[i++];\r\n                if (s !== undefined) {\r\n                    this.printf(\"%s\\n\", s);\r\n                    cLines--;\r\n                }\r\n                if (i >= this.aInfoBuffer.length) {\r\n                    i = 0;\r\n                }\r\n            } while (cLines && i != this.iInfoBuffer);\r\n            this.printf(\"nYieldsPerSecond: %d\\n\", this.cpu.nYieldsPerSecond);\r\n            this.printf(\"msPerYield: %d\\n\", this.cpu.msPerYield);\r\n            this.printf(\"nCyclesPerBurst: %d\\n\", this.cpu.nCyclesPerBurst);\r\n            this.printf(\"nCyclesPerYield: %d\\n\", this.cpu.nCyclesPerYield);\r\n            this.printf(\"nCyclesPerVideoUpdate: %d\\n\", this.cpu.nCyclesPerVideoUpdate);\r\n            this.printf(\"nCyclesPerStatusUpdate: %d\\n\", this.cpu.nCyclesPerStatusUpdate);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} [sAddr]\r\n     * @param {string} [sAddrEnd]\r\n     * @param {number} [n]\r\n     */\r\n    doUnassemble(sAddr, sAddrEnd, n)\r\n    {\r\n        var addr = this.getUserAddr(sAddr);\r\n        if (addr === undefined) {\r\n            return;\r\n        }\r\n        if (n === undefined) n = 1;\r\n        var addrEnd = this.offLimit;\r\n        if (sAddrEnd !== undefined) {\r\n            addrEnd = this.getUserAddr(sAddrEnd);\r\n            if (addrEnd === undefined || addrEnd < addr) {\r\n                return;\r\n            }\r\n            if (!DEBUG && (addrEnd - addr) > 0x100) {\r\n                /*\r\n                 * Limiting the amount of disassembled code to one \"memory page\" in non-DEBUG builds is partly\r\n                 * to prevent the user from wedging their browser, but also a recognition that, in non-DEBUG builds,\r\n                 * the print buffer is truncated to 8K, which is only enough for about two pages of disassembled\r\n                 * code anyway.\r\n                 */\r\n                this.printf(\"range too large\\n\");\r\n                return;\r\n            }\r\n            addrEnd++;\r\n            n = -1;\r\n        }\r\n\r\n        if (addr != this.nextAddr) {\r\n            this.printf(\"\\n\");\r\n        }\r\n\r\n        while (n-- && addr < addrEnd) {\r\n            var sIns = this.getInstruction(addr, this.isBusy(false) || this.fStepOver? this.cIns : 0);\r\n            this.printf(\"%s\\n\", sIns);\r\n            this.nextAddr = addr = this.nextIns;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {Array.<string>} asArgs\r\n     */\r\n    doOptions(asArgs)\r\n    {\r\n        if (asArgs[1] === undefined || asArgs[1] == \"?\") {\r\n            this.printf(\"\\noption commands:\\n\");\r\n            this.printf(\"max\\trun at maximum speed\\n\");\r\n            this.printf(\"fast\\trun faster (up to %dMhz)\\n\", this.cpu.mhzFast);\r\n            this.printf(\"slow\\trun at normal speed (1Mhz)\\n\");\r\n            this.printf(\"classic\\tuse classic operand syntax\\n\");\r\n            this.printf(\"modern\\tuse modern operand syntax\\n\");\r\n            this.printf(\"msg\\tenable message categories\\n\");\r\n            return;\r\n        }\r\n        var sOption = asArgs[1];\r\n        switch(sOption) {\r\n        case \"slow\":\r\n            this.cpu.setSpeed(this.cpu.SPEED_SLOW);\r\n            break;\r\n        case \"fast\":\r\n            this.cpu.setSpeed(this.cpu.SPEED_FAST);\r\n            break;\r\n        case \"max\":\r\n            this.cpu.setSpeed(this.cpu.SPEED_MAX);\r\n            break;\r\n        case \"classic\":\r\n            this.setOpModes(true);\r\n            this.printf(\"classic syntax enabled\\n\");\r\n            break;\r\n        case \"modern\":\r\n            this.setOpModes(false);\r\n            this.printf(\"modern syntax enabled\\n\");\r\n            break;\r\n        case \"msg\":\r\n            var bitsMessage = 0;\r\n            if (asArgs[2] !== undefined) {\r\n                if (asArgs[2] == \"all\") {\r\n                    bitsMessage = 0xff;\r\n                }\r\n                else if (this.aMessageCategories[asArgs[2]] !== undefined) {\r\n                    bitsMessage = this.aMessageCategories[asArgs[2]];\r\n                }\r\n                if (bitsMessage) {\r\n                    if (asArgs[3] == \"on\") {\r\n                        this.bitsMessage |= bitsMessage;\r\n                    }\r\n                    else if (asArgs[3] == \"off\") {\r\n                        this.bitsMessage &= ~bitsMessage;\r\n                    }\r\n                }\r\n            }\r\n            for (var sCategory in this.aMessageCategories) {\r\n                if (asArgs[2] !== undefined && (asArgs[2] != \"all\" && asArgs[2] != sCategory)) continue;\r\n                bitsMessage = this.aMessageCategories[sCategory];\r\n                this.printf(\"%s messages: %s\\n\", sCategory, ((this.bitsMessage & bitsMessage)? \"on\" : \"off\"));\r\n            }\r\n            break;\r\n        default:\r\n            this.printf(\"unknown option: %s\\n\", sOption);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {Array.<string>} [asArgs]\r\n     */\r\n    doRegisters(asArgs)\r\n    {\r\n        if (asArgs && asArgs[1] == \"?\") {\r\n            this.printf(\"\\nregister commands:\\n\");\r\n            this.printf(\"r to display all\\n\");\r\n            this.printf(\"r [target=value] to modify\\n\");\r\n            this.printf(\"supported targets:\\n\");\r\n            this.printf(\"A,X,Y,S,PC and flags C,Z,D,V,N\\n\");\r\n            return;\r\n        }\r\n        var fIns = true;\r\n        if (asArgs !== undefined && asArgs.length > 1) {\r\n            fIns = false;\r\n            var sReg = asArgs[1];\r\n            var sValue = null;\r\n            var i = sReg.indexOf(\"=\");\r\n            if (i > 0) {\r\n                sValue = sReg.substr(i+1);\r\n                sReg = sReg.substr(0, i);\r\n            }\r\n            else if (asArgs.length > 2) {\r\n                sValue = asArgs[2];\r\n            }\r\n            else {\r\n                this.printf(\"missing value for %s\\n\", asArgs[1]);\r\n                return;\r\n            }\r\n            var b = parseInt(sValue, 16);\r\n            if (!isNaN(b)) {\r\n                switch(sReg.toUpperCase()) {\r\n                case \"A\":\r\n                    this.cpu.regA = b & 0xff;\r\n                    break;\r\n                case \"X\":\r\n                    this.cpu.regX = b & 0xff;\r\n                    break;\r\n                case \"Y\":\r\n                    this.cpu.regY = b & 0xff;\r\n                    break;\r\n                case \"C\":\r\n                    if (b) this.cpu.setC(); else this.cpu.clearC();\r\n                    break;\r\n                case \"Z\":\r\n                    if (b) this.cpu.setZ(); else this.cpu.clearZ();\r\n                    break;\r\n                case \"D\":\r\n                    if (b) this.cpu.setBCD(); else this.cpu.clearBCD();\r\n                    break;\r\n                case \"V\":\r\n                    if (b) this.cpu.setV(); else this.cpu.clearV();\r\n                    break;\r\n                case \"N\":\r\n                    if (b) this.cpu.setN(); else this.cpu.clearN();\r\n                    break;\r\n                case \"S\":\r\n                    if ((b & ~0xff) != 0x100) {\r\n                        this.printf(\"invalid stack pointer: %s\\n\", sValue);\r\n                        return;\r\n                    }\r\n                    this.cpu.regS = b;\r\n                    break;\r\n                case \"PC\":\r\n                    fIns = true;\r\n                    this.cpu.regPC = b & 0xffff;\r\n                    this.nextAddr = this.cpu.regPC;\r\n                    break;\r\n                default:\r\n                    this.printf(\"unknown register: %s\\n\", sReg);\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                this.printf(\"invalid value: %s\\n\", sValue);\r\n                return;\r\n            }\r\n            this.cpu.update();\r\n        }\r\n        this.printf(\"%s\\n\", this.getRegs());\r\n        if (fIns) this.doUnassemble(StrLib.toHex(this.nextAddr = this.cpu.regPC, 4));\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} sAddr\r\n     */\r\n    doRun(sAddr)\r\n    {\r\n        if (sAddr !== undefined) {\r\n            this.setTempBreakpoint(this.getUserAddr(sAddr));\r\n        }\r\n        if (!this.run()) {\r\n            this.cpu.setFocus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     */\r\n    doStep()\r\n    {\r\n        if (this.getByte(this.cpu.regPC) == this.cpu.OP_JSR) {\r\n            this.setTempBreakpoint(this.cpu.regPC+3);\r\n            this.fStepOver = true;\r\n            if (!this.run()) {\r\n                this.cpu.setFocus();\r\n            }\r\n        }\r\n        else {\r\n            this.doTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PDebugger}\r\n     * @param {string} [sCount]\r\n     */\r\n    doTrace(sCount)\r\n    {\r\n        var c = (sCount === undefined? 1 : parseInt(sCount, 10));\r\n        var n = (c == 1? 0 : 1);\r\n        WebLib.onCountRepeat(\r\n            c,\r\n            function(dbg) {\r\n                return function() {\r\n                    return dbg.setBusy(true) && dbg.step(n);\r\n                };\r\n            }(this),\r\n            function(dbg) {\r\n                return function() {\r\n                    dbg.setBusy(false);\r\n                };\r\n            }(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * input(dbg, sCmd)\r\n     *\r\n     * @param {C1PDebugger} dbg\r\n     * @param {string} sCmd\r\n     */\r\n    static input(dbg, sCmd)\r\n    {\r\n        if (!sCmd.length) {\r\n            if (dbg.fAssemble) {\r\n                dbg.printf(\"ended assemble @%04x\\n\", dbg.addrAssembleNext);\r\n                dbg.nextAddr = dbg.addrAssembleNext;\r\n                dbg.fAssemble = false;\r\n            }\r\n            else\r\n            if (dbg.prevCmd) {\r\n                sCmd = dbg.prevCmd;\r\n            }\r\n        }\r\n        if (dbg.isReady() && !dbg.isBusy(true) && sCmd.length > 0) {\r\n\r\n            if (dbg.fAssemble) {\r\n                sCmd = \"a \" + StrLib.toHex(dbg.addrAssembleNext, 4) + \" \" + sCmd;\r\n            }\r\n            else if (sCmd.length > 1 && sCmd.indexOf(\" \") != 1) {\r\n                /*\r\n                 * For certain commands lacking a space after the first character,\r\n                 * insert an automatic space, so that split(\" \") has the desired effect.\r\n                 */\r\n                var ch = sCmd.charAt(0).toLowerCase();\r\n                sCmd = ch + \" \" + sCmd.substr(1);\r\n            }\r\n\r\n            var asArgs = sCmd.split(\" \");\r\n            dbg.prevCmd = asArgs[0];\r\n\r\n            switch(asArgs[0].toLowerCase()) {\r\n            case \"a\":\r\n                dbg.doAssemble(asArgs);\r\n                break;\r\n            case \"b\":\r\n                dbg.doBreak(asArgs[1], asArgs[2]);\r\n                break;\r\n            case \"d\":\r\n                dbg.doDump(asArgs[1], asArgs[2]);\r\n                break;\r\n            case \"e\":\r\n                dbg.doEdit(asArgs);\r\n                break;\r\n            case \"f\":\r\n                dbg.doFreqs(asArgs[1]);\r\n                break;\r\n            case \"g\":\r\n                dbg.doRun(asArgs[1]);\r\n                break;\r\n            case \"h\":\r\n                dbg.doHalt();\r\n                break;\r\n            case \"o\":\r\n                dbg.doOptions(asArgs);\r\n                break;\r\n            case \"p\":\r\n                dbg.doHistory(asArgs[1]);\r\n                break;\r\n            case \"r\":\r\n                dbg.doRegisters(asArgs);\r\n                break;\r\n            case \"s\":\r\n                dbg.doStep();\r\n                break;\r\n            case \"t\":\r\n                dbg.doTrace(asArgs[1]);\r\n                break;\r\n            case \"u\":\r\n                dbg.doUnassemble(asArgs[1], asArgs[2], 8);\r\n                break;\r\n            case \"?\":\r\n            case \"help\":\r\n                dbg.doHelp();\r\n                break;\r\n            case \"i\":\r\n                if (dbg.doInfo(asArgs[1])) break;\r\n                /* falls through */\r\n            default:\r\n                dbg.printf(\"unknown command: %s\\n\", sCmd);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * C1PDebugger.init()\r\n     *\r\n     * This function operates on every HTML element of class \"debugger\", extracting the\r\n     * JSON-encoded parameters for the C1PDebugger constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PDebugger component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeDbg = Component.getElementsByClass(APPCLASS, \"debugger\");\r\n        for (var iDbg=0; iDbg < aeDbg.length; iDbg++) {\r\n            var eDbg = aeDbg[iDbg];\r\n            var parmsDbg = Component.getComponentParms(eDbg);\r\n            var dbg = new C1PDebugger(parmsDbg);\r\n            Component.bindComponentControls(dbg, eDbg, APPCLASS);\r\n        }\r\n    }\r\n}\r\n\r\nif (DEBUGGER) {\r\n\r\n    /*\r\n     * Initialize every Debugger module on the page (as IF there's ever going to be more than one ;-))\r\n     */\r\n    WebLib.onInit(C1PDebugger.init);\r\n\r\n}   // endif DEBUGGER\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/osi/c1p/modules/v2/computer.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/**\r\n * TODO: The Closure Compiler treats ES6 classes as 'struct' rather than 'dict' by default,\r\n * which would force us to declare all class properties in the constructor, as well as prevent\r\n * us from defining any named properties.  So, for now, we mark all our classes as 'unrestricted'.\r\n *\r\n * @class C1PComputer\r\n * @unrestricted\r\n */\r\nclass C1PComputer extends Component {\r\n    /**\r\n     * C1PComputer(parmsComputer, modules)\r\n     *\r\n     * The C1PComputer component expects the following (parmsComputer) properties:\r\n     *\r\n     *      modules[{}] (from the <module> definition(s) for the computer)\r\n     *\r\n     * This component processes all the <module> \"start\" and \"end\" specifications\r\n     * and \"wires\" everything to a common \"address buffer\"; namely, the abMemory array.\r\n     * abMemory encompasses the computer's entire address space, but every component must\r\n     * play nice and use only its assigned section of abMemory -- and pretend it's an array\r\n     * of bytes, when in fact it's an array of floating-point values (the only primitive\r\n     * numeric data type that JavaScript provides).\r\n     *\r\n     * This component also insures that all the other components are ready; in particular,\r\n     * this means that the ROM and Video components have finished loading their resources\r\n     * and are ready for operation.  Other components become ready as soon as we call their\r\n     * setBuffer() method (eg, CPU, RAM, Keyboard, Debugger, SerialPort, DiskController), and\r\n     * others, like Panel, become ready even earlier, at the end of their initialization.\r\n     *\r\n     * Once every component has indicated it's ready, we call its setPower() notification\r\n     * function (if it has one; it's optional).  We call the CPU's setPower() function last,\r\n     * so that the CPU is assured that all other components are ready and \"powered\".\r\n     *\r\n     * @this {C1PComputer}\r\n     * @param {Object} parmsComputer\r\n     * @param {Object} modules\r\n     */\r\n    constructor(parmsComputer, modules)\r\n    {\r\n        super(\"C1PComputer\", parmsComputer);\r\n\r\n        this.modules = modules;\r\n    }\r\n\r\n    /**\r\n     * reset(fPowerOn)\r\n     *\r\n     * @this {C1PComputer}\r\n     * @param {boolean} [fPowerOn] is true to indicate that we should start the CPU running\r\n     */\r\n    reset(fPowerOn)\r\n    {\r\n        var cpu = null;\r\n        for (var sType in this.modules) {\r\n            for (var i=0; i < this.modules[sType].length; i++) {\r\n                var component = this.modules[sType][i];\r\n                if (component && component.reset) {\r\n                    if (DEBUG) this.printf(\"resetting %s\\n\", sType);\r\n                    component.reset();\r\n                    if (sType == \"cpu\") cpu = component;\r\n                }\r\n            }\r\n        }\r\n        if (cpu) {\r\n            cpu.update();\r\n            if (fPowerOn) cpu.run();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * start()\r\n     *\r\n     * Called by the CPU to notify all component start() handlers.\r\n     *\r\n     * @this {C1PComputer}\r\n     */\r\n    start()\r\n    {\r\n        for (var sType in this.modules) {\r\n            if (sType == \"cpu\") continue;\r\n            for (var i=0; i < this.modules[sType].length; i++) {\r\n                var component = this.modules[sType][i];\r\n                if (component && component.start) {\r\n                    component.start();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stop(msStart, nCycles)\r\n     *\r\n     * Called by the CPU to notify all component stop() handlers\r\n     *\r\n     * @this {C1PComputer}\r\n     * @param {number} msStart\r\n     * @param {number} nCycles\r\n     */\r\n    stop(msStart, nCycles)\r\n    {\r\n        for (var sType in this.modules) {\r\n            if (sType == \"cpu\") continue;\r\n            for (var i=0; i < this.modules[sType].length; i++) {\r\n                var component = this.modules[sType][i];\r\n                if (component && component.stop) {\r\n                    component.stop(msStart, nCycles);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @this {C1PComputer}\r\n     * @param {string} sHTMLType is the type of the HTML control (eg, \"button\", \"list\", \"text\", \"submit\", \"textarea\")\r\n     * @param {string} sBinding is the value of the 'binding' parameter stored in the HTML control's \"data-value\" attribute (eg, \"reset\")\r\n     * @param {HTMLElement} control is the HTML control DOM object (eg, HTMLButtonElement)\r\n     * @param {string} [sValue] optional data value\r\n     * @returns {boolean} true if binding was successful, false if unrecognized binding request\r\n     */\r\n    setBinding(sHTMLType, sBinding, control, sValue)\r\n    {\r\n        switch(sBinding) {\r\n        case \"reset\":\r\n            this.bindings[sBinding] = control;\r\n            control.onclick = function(computer) {\r\n                return function() {\r\n                    computer.reset();\r\n                };\r\n            }(this);\r\n            return true;\r\n        default:\r\n            break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * NOTE: If there are multiple components for a given type, we may need to provide a means of discriminating.\r\n     *\r\n     * @this {C1PComputer}\r\n     * @param {string} sType\r\n     * @param {string} [idRelated] of related component\r\n     * @param {Component|null} [componentPrev] of previously returned component, if any\r\n     * @returns {Component|null}\r\n     */\r\n    getComponentByType(sType, idRelated, componentPrev)\r\n    {\r\n        if (this.modules[sType]) {\r\n            return this.modules[sType][0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * power(computer)\r\n     *\r\n     * @param {C1PComputer} computer\r\n     */\r\n    static power(computer)\r\n    {\r\n        /*\r\n         * Insure that the ROMs, Video and CPU are all ready before \"powering\" everything; always \"power\"\r\n         * the CPU last, to make sure it doesn't start asking other components to do things before they're ready.\r\n         */\r\n        var cpu = null;\r\n        for (var sType in computer.modules) {\r\n            for (var i=0; i < computer.modules[sType].length; i++) {\r\n                var component = computer.modules[sType][i];\r\n                if (!component) continue;\r\n                if (!component.isReady()) {\r\n                    component.isReady(function(computer) {\r\n                        return function() {\r\n                            C1PComputer.power(computer);\r\n                        };\r\n                    }(computer));\r\n                    return;\r\n                }\r\n                /*\r\n                 * The CPU component's setPower() notification handler is a special case: we don't want\r\n                 * to call it until the end (below), after all others have been called.\r\n                 */\r\n                if (sType == \"cpu\") {\r\n                    cpu = component;\r\n                }\r\n                else if (component.setPower) {\r\n                    component.setPower(true, computer);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * The entire computer is finally ready; we call our own setReady() for completeness, not because any\r\n         * other component actually cares when we're ready.\r\n         */\r\n        computer.setReady();\r\n\r\n        computer.printf(MESSAGE.NONE, \"%s v%s\\n%s\\n\", APPNAME, APPVERSION, COPYRIGHT);\r\n\r\n        /*\r\n         * Once we get to this point, we're guaranteed that all components are ready, so it's safe to \"power\" the CPU;\r\n         * setPower() includes an automatic reset(fPowerOn), so the CPU should begin executing immediately, unless a debugger\r\n         * is attached.\r\n         */\r\n        if (cpu) cpu.setPower(true, computer);\r\n    }\r\n\r\n    /**\r\n     * init()\r\n     *\r\n     * This function operates on every HTML element of class \"c1pjs-computer\", extracting the\r\n     * JSON-encoded parameters for the C1PComputer constructor from the element's \"data-value\"\r\n     * attribute, invoking the constructor to create a C1PComputer component, and then binding\r\n     * any associated HTML controls to the new component.\r\n     */\r\n    static init()\r\n    {\r\n        var aeComputers = Component.getElementsByClass(APPCLASS, \"computer\");\r\n\r\n        for (var iComputer=0; iComputer < aeComputers.length; iComputer++) {\r\n\r\n            var eComputer = aeComputers[iComputer];\r\n            var parmsComputer = Component.getComponentParms(eComputer);\r\n\r\n            var component;\r\n            var modules = {};\r\n\r\n            var abMemory;\r\n            var addrStart = 0, addrEnd = 0;\r\n\r\n            for (var iAddr=0; iAddr < parmsComputer['modules'].length; iAddr++) {\r\n                var addrInfo = parmsComputer['modules'][iAddr];\r\n                /*\r\n                 * The first address range (ie, the CPU range) must specify the range for the entire\r\n                 * address space (abMemory), which we allocate and zero-initialize.\r\n                 *\r\n                 * NOTE: We might consider doing what the Video component does on first reset: initializing\r\n                 * the entire memory buffer to random values.  However, a constant (eg, 0xA5) might be\r\n                 * more useful, acting as a crude indicator of memory the client code hasn't written yet.\r\n                 */\r\n                if (!iAddr) {\r\n                    if (addrInfo['type'] != \"cpu\") break;\r\n                    addrStart = +addrInfo['start'];\r\n                    addrEnd = +addrInfo['end'];\r\n                    abMemory = new Array(addrEnd+1 - addrStart);\r\n                    for (var addr=addrStart; addr < abMemory.length; addr++) {\r\n                        abMemory[addr] = 0;\r\n                    }\r\n                }\r\n                component = Component.getComponentByID(addrInfo['refID'], parmsComputer['id']);\r\n                if (component) {\r\n                    var sType = addrInfo['type'];\r\n                    if (modules[sType] === undefined) {\r\n                        modules[sType] = [];\r\n                    }\r\n                    modules[sType].push(component);\r\n                    if (component.setBuffer && addrInfo['start'] !== undefined) {\r\n                        component.setBuffer(abMemory, +addrInfo['start'], +addrInfo['end'], modules['cpu'][0]);\r\n                    }\r\n                }\r\n                else {\r\n                    Component.error(\"no component for <module refid=\\\"\" + addrInfo['refID'] + \"\\\">\");\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (abMemory === undefined) {\r\n                Component.error(\"<module type=\\\"cpu\\\"> definition must appear first in the <computer> specification\");\r\n                return;\r\n            }\r\n\r\n            /*\r\n             * Let's see if the Debugger is installed (NOTE: its ID must be \"debugger\", and only one per machine is supported);\r\n             * the Debugger needs our setBuffer(), setPower() and reset() notifications, and this relieves us from having an explicit\r\n             * <module> entry for type=\"debugger\".\r\n             */\r\n            component = Component.getComponentByType('C1PDebugger', parmsComputer['id'], false);\r\n            if (component) {\r\n                modules['debugger'] = [component];\r\n                if (component.setBuffer) {\r\n                    component.setBuffer(abMemory, addrStart, addrEnd, modules['cpu'][0]);\r\n                }\r\n            }\r\n\r\n            var computer = new C1PComputer(parmsComputer, modules);\r\n\r\n            /*\r\n             * Let's see if the Control Panel is installed (NOTE: its ID must be \"panel\", and only one per machine is supported);\r\n             * the Panel needs our setPower() notifications, and this relieves us from having an explicit <module> entry for type=\"panel\".\r\n             */\r\n            var panel = Component.getComponentByType('C1PPanel', parmsComputer['id'], false);\r\n            if (panel) {\r\n                modules['panel'] = [panel];\r\n                /*\r\n                 * Iterate through all the other components and update their print methods if the Control Panel has provided overrides.\r\n                 */\r\n                var controlPrint = panel.bindings['print'];\r\n                if (controlPrint) {\r\n                    var aComponents = Component.getComponents(parmsComputer['id']);\r\n                    for (var iComponent = 0; iComponent < aComponents.length; iComponent++) {\r\n                        component = aComponents[iComponent];\r\n                        if (component == panel) continue;\r\n                        component.print = panel.print;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*\r\n             *  We may eventually add a \"Power\" button, but for now, all we have is a \"Reset\" button\r\n             */\r\n            Component.bindComponentControls(computer, eComputer, APPCLASS);\r\n\r\n            /*\r\n             * \"Power\" the computer automatically\r\n             */\r\n            C1PComputer.power(computer);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Initialize every Computer on the page.\r\n */\r\nWebLib.onInit(C1PComputer.init);\r\n\r\n/**\r\n * @copyright https://www.pcjs.org/machines/modules/v2/embed.js (C) 2012-2023 Jeff Parsons\r\n */\r\n\r\n/*\r\n * We now support asynchronous XML and XSL file loads; simply set fAsync (below) to true.\r\n *\r\n * NOTE: For that support to work, we have to keep track of the number of machines on the page\r\n * (ie, how many embedMachine() calls were issued), reduce the count as each machine XML file\r\n * is fully transformed into HTML, and when the count finally returns to zero, notify all the\r\n * machine component init() handlers.\r\n *\r\n * Also, to prevent those init() handlers from running prematurely, we must disable all page\r\n * notification events at the start of the embedding process (WebLib.enablePageEvents(false)) and\r\n * re-enable them at the end (WebLib.enablePageEvents(true)).\r\n */\r\nvar fAsync = true;\r\nvar cAsyncMachines = 0;\r\n\r\n/**\r\n * loadXML(sFile, idMachine, sAppName, sAppClass, sParms, sClass, fResolve, display, done)\r\n *\r\n * This is the preferred way to load all XML and XSL files. It uses getResource()\r\n * to load them as strings, which parseXML() can massage before parsing/transforming them.\r\n *\r\n * For example, since I've been unable to get the XSLT document() function to work inside any\r\n * XSL document loaded by JavaScript's XSLT processor, that has prevented me from dynamically\r\n * loading any XML machine file that uses the \"ref\" attribute to refer to and incorporate\r\n * another XML document.\r\n *\r\n * To solve that, I've added an fResolve parameter that tells parseXML() to fetch any\r\n * referenced documents ITSELF and insert them into the XML string prior to parsing, instead\r\n * of relying on the XSLT template to pull them in.  That fetching is handled by resolveXML(),\r\n * which iterates over the XML until all \"refs\" have been resolved (including any nested\r\n * references).\r\n *\r\n * Also, XSL files with a <!DOCTYPE [...]> cause MSIE's Microsoft.XMLDOM.loadXML() function\r\n * to choke, so I strip that out prior to parsing as well.\r\n *\r\n * TODO: Figure out why the XSLT document() function works great when the web browser loads an\r\n * XML file (and the associated XSL file) itself, but does not work when loading documents via\r\n * JavaScript XSLT support. Is it broken, is it a security issue, or am I just calling it wrong?\r\n *\r\n * @param {string} sXMLFile\r\n * @param {string} idMachine\r\n * @param {string} sAppName\r\n * @param {string} sAppClass\r\n * @param {string} sParms (machine parameters, if any)\r\n * @param {string} sClass (an optional machine class name used to style the machine)\r\n * @param {boolean} fResolve is true to resolve any \"ref\" attributes\r\n * @param {function(string)} display\r\n * @param {function(string,string,Object)} done (string contains the unparsed XML string data, and Object contains a parsed XML object)\r\n */\r\nfunction loadXML(sXMLFile, idMachine, sAppName, sAppClass, sParms, sClass, fResolve, display, done)\r\n{\r\n    let doneLoadXML = function(sURL, sXML, nErrorCode) {\r\n        if (nErrorCode) {\r\n            if (!sXML) sXML = \"unable to load \" + sXMLFile + \" (\" + nErrorCode + \")\";\r\n            done(sURL, sXML, null);\r\n            return;\r\n        }\r\n        parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, sClass, fResolve, display, done);\r\n    };\r\n    display(\"Loading \" + sXMLFile + \"...\");\r\n    WebLib.getResource(sXMLFile, null, fAsync, doneLoadXML);\r\n}\r\n\r\n/**\r\n * parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, sClass, fResolve, display, done)\r\n *\r\n * Generates an XML document from an XML string. This function also provides a work-around for XSLT's\r\n * lack of support for the document() function (at least on some browsers), by replacing every reference\r\n * tag (ie, a tag with a \"ref\" attribute) with the contents of the referenced file.\r\n *\r\n * @param {string} sXML\r\n * @param {string} sXMLFile\r\n * @param {string} idMachine\r\n * @param {string} sAppName\r\n * @param {string} sAppClass\r\n * @param {string} sParms (machine parameters, if any)\r\n * @param {string} sClass (an optional machine class name used to style the machine)\r\n * @param {boolean} fResolve is true to resolve any \"ref\" attributes; default is false\r\n * @param {function(string)} display\r\n * @param {function(string,string,Object)} done (string contains the unparsed XML string data, and Object contains a parsed XML object)\r\n */\r\nfunction parseXML(sXML, sXMLFile, idMachine, sAppName, sAppClass, sParms, sClass, fResolve, display, done)\r\n{\r\n    let buildXML = function(sURL, sXML, sError) {\r\n        if (sError) {\r\n            done(sURL, sError, null);\r\n            return;\r\n        }\r\n        if (idMachine) {\r\n\r\n            /*\r\n             * A more sensible place to record the machine XML would be embedMachine(), like we do for the\r\n             * XSL file, but since we're about to modify the original machine XML, it's best to record it now.\r\n             */\r\n            Component.addMachineResource(idMachine, sXMLFile, sXML);\r\n\r\n            let match;\r\n            let sURL = sXMLFile;\r\n            if (sURL && sURL.indexOf('/') < 0 && window.location.pathname.slice(-1) == '/') {\r\n                sURL = window.location.pathname + sURL;\r\n            }\r\n\r\n            /*\r\n             * We embed the URL of the XML file both as a separate \"xml\" attribute for easy access from the\r\n             * XSL file, and as part of the \"parms\" attribute for easy access from machines (see getMachineParm()).\r\n             */\r\n            if (!sParms) {\r\n                sParms = '{';\r\n            } else if (sParms.slice(-1) == '}') {\r\n                sParms = sParms.slice(0, -1);\r\n                if (sParms.length > 1) sParms += ',';\r\n            } else {            // sParms must just be a \"state\" file, so encode it as a \"state\" property\r\n                sParms = '{state:\"' + sParms + '\",';\r\n            }\r\n            sParms += 'url:\"' + sURL + '\"}';\r\n\r\n            /*\r\n             * Note that while we no longer generate a machine XML file with a \"state\" attribute (because it's\r\n             * encoded inside the \"parms\" attribute), the XSL file must still cope with \"state\" attributes inside\r\n             * other XML files; for example, manifest XML files like /apps/pcx86/1981/visicalc/manifest.xml contain\r\n             * machine elements with \"state\" attributes that must still be passed down to the computer element\r\n             * \"the old fashioned way\".\r\n             *\r\n             * Until/unless that changes, components.xsl cannot be simplified as much as I might have hoped.\r\n             */\r\n            if (typeof resources == 'object') sURL = null;      // turn off URL inclusion if we have embedded resources\r\n            sParms = sParms.replace(/\\$/g, \"$$$$\").replace(/'/g, \"&apos;\");\r\n            if (sClass) {\r\n                /*\r\n                 * If there's no hard-coded \"class\" attribute in the machine tag, then we can set one in the final\r\n                 * replacement below, just like we do for sParms and sURL.  However, if a \"class\" attribute already\r\n                 * exists, we need alter it and then zap the sClass variable.\r\n                 */\r\n                match = sXML.match(/(<machine[^>]*\\sclass=)(['\"])(.*?)(\\2[^>]*>)/);\r\n                if (match) {\r\n                    sXML = sXML.replace(match[0], match[1] + match[2] + sClass + match[4]);\r\n                    sClass = \"\";\r\n                }\r\n            }\r\n\r\n            /*\r\n             * If the machine element contains a 'debugger' attribute set to 'available', we change it to 'optional',\r\n             * which signals the XSL template to generate a \"soft link\" to the debugger (using a URL parameter), rather\r\n             * than a \"hard link\" to the debugger XML file.\r\n             */\r\n            match = sXML.match(/(<machine[^>]*\\sdebugger=)(['\"])(available)(\\2[^>]*>)/);\r\n            if (match) {\r\n                sXML = sXML.replace(match[0], match[1] + match[2] + \"optional\" + match[4]);\r\n            }\r\n\r\n            sXML = sXML.replace(/(<machine[^>]*\\sid=)(['\"]).*?\\2/, \"$1$2\" + idMachine + \"$2\" + (sClass? ' class=\"' + sClass + '\"' : '') + (sParms? \" parms='\" + sParms + \"'\" : \"\") + (sURL? ' url=\"' + sURL + '\"' : ''));\r\n        }\r\n\r\n        if (!fResolve) {\r\n            /*\r\n             * I'm trying to switch to a shared components.xsl (at least for all PC-class machines),\r\n             * but in the interim, that means hacking the XSL file on the fly to reflect the actual class.\r\n             */\r\n            sXML = sXML.replace(/(<xsl:variable name=\"APPNAME\">).*?(<\\/xsl:variable>)/, \"$1\" + sAppName + \"$2\");\r\n            sXML = sXML.replace(/(<xsl:variable name=\"APPCLASS\">).*?(<\\/xsl:variable>)/, \"$1\" + sAppClass + \"$2\");\r\n\r\n            /*\r\n             * Replace the version number template in the XSL file (which we assume we're reading, since fResolve is false)\r\n             * with the current APPVERSION.\r\n             *\r\n             * ES6 ALERT: Template strings.\r\n             */\r\n            sXML = sXML.replace(/<xsl:variable name=\"APPVERSION\"(\\/>|>[^<]*<\\/xsl:variable>)/, `<xsl:variable name=\"APPVERSION\">${APPVERSION}</xsl:variable>`);\r\n        }\r\n\r\n        /*\r\n         * If the resource we requested is not really an XML file (or the file didn't exist and the server simply returned\r\n         * a message like \"Cannot GET /devices/pc/machine/5150/cga/64kb/donkey/machine.xml\"), we'd like to display a more\r\n         * meaningful message, because the XML DOM parsers will blithely return a document that contains nothing useful; eg:\r\n         *\r\n         *      This page contains the following errors:error on line 1 at column 1:\r\n         *      Document is empty Below is a rendering of the page up to the first error.\r\n         *\r\n         * Supposedly, the IE XML DOM parser will throw an exception, but I haven't tested that, and unless all other\r\n         * browsers do that, that's not helpful.\r\n         *\r\n         * The best I can do at this stage (assuming WebLib.getResource() didn't drop any error information on the floor)\r\n         * is verify that the requested resource \"looks like\" valid XML (in other words, it begins with a '<').\r\n         */\r\n        let xmlDoc = null;\r\n        if (sXML.charAt(0) == '<') {\r\n            try {\r\n                /*\r\n                 * Another hack for MSIE, which fails to load XSL documents containing a <!DOCTYPE [...]> tag.\r\n                 *\r\n                 * This is also why the XSLTProcessor 'transformToFragment' method in Microsoft Edge silently failed,\r\n                 * so I had pull this hack out of the \"ActiveXObject\" code.  And rather than add yet-another Microsoft\r\n                 * browser check, I'm going to try doing this across the board, and hope that none of the other XSLT\r\n                 * processors fail *without* the DOCTYPE tag.\r\n                 */\r\n                if (!fResolve) {\r\n                    sXML = sXML.replace(/<!DOCTYPE(.|[\\r\\n])*]>\\s*/g, \"\");\r\n                }\r\n                /*\r\n                 * Beginning with Microsoft Edge and the corresponding release of Windows 10, all the\r\n                 * 'ActiveXObject' crud has gone away; but of course, this code must remain in place if\r\n                 * we want to continue supporting older Internet Explorer browsers (ie, back to IE9).\r\n                 */\r\n                /** @namespace window.ActiveXObject */\r\n                if (window.ActiveXObject || 'ActiveXObject' in window) {        // second test is required for IE11 on Windows 8.1\r\n                    xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\r\n                    xmlDoc.async = false;\r\n                    xmlDoc['loadXML'](sXML);\r\n                } else {\r\n                    /** @namespace window.DOMParser */\r\n                    xmlDoc = (new window.DOMParser()).parseFromString(sXML, \"text/xml\");\r\n                }\r\n            } catch(e) {\r\n                xmlDoc = null;\r\n                sXML = e.message;\r\n            }\r\n        } else {\r\n            sXML = \"unrecognized XML: \" + (sXML.length > 255? sXML.substr(0, 255) + \"...\" : sXML);\r\n        }\r\n        done(sXMLFile, sXML, xmlDoc);\r\n    };\r\n    if (sXML) {\r\n        if (PRIVATE) sXML = sXML.replace(/\\/library.xml/, \"/disks/private/library.xml\");\r\n        if (fResolve) {\r\n            resolveXML(sXMLFile, sXML, display, buildXML);\r\n            return;\r\n        }\r\n        buildXML(sXMLFile, sXML, \"\");\r\n        return;\r\n    }\r\n    done(sXMLFile, \"no data\", null);\r\n}\r\n\r\n/**\r\n * resolveXML(sURL, sXML, display, done)\r\n *\r\n * Replaces every tag with a \"ref\" attribute with the contents of the corresponding file.\r\n *\r\n * TODO: Fix some of the limitations of this code, such as: 1) requiring the \"ref\" attribute\r\n * to appear as the tag's first attribute, 2) requiring the \"ref\" attribute to be double-quoted,\r\n * and 3) requiring the \"ref\" tag to be self-closing.\r\n *\r\n * @param {string} sURL\r\n * @param {string} sXML\r\n * @param {function(string)} display\r\n * @param {function(string,string,string)} done (the first string contains the resolved XML data, the second is for any error message)\r\n */\r\nfunction resolveXML(sURL, sXML, display, done)\r\n{\r\n    let matchRef;\r\n    let reRef = /<([a-z]+)\\s+ref=\"(.*?)\"(.*?)\\/>/g;\r\n\r\n    if ((matchRef = reRef.exec(sXML))) {\r\n\r\n        let sRefFile = matchRef[2];\r\n\r\n        let doneReadXML = function(sURL, sXMLRef, nErrorCode) {\r\n            if (nErrorCode || !sXMLRef) {\r\n                done(sURL, sXML, \"unable to resolve XML reference: \" + matchRef[0] + \" (\" + nErrorCode + \")\");\r\n                return;\r\n            }\r\n            /*\r\n             * If there are additional attributes in the \"referring\" XML tag, we want to insert them\r\n             * into the \"referred\" XML tag; attributes that don't exist in the referred tag should be\r\n             * appended, and attributes that DO exist should be overwritten.\r\n             */\r\n            let sRefAttrs = matchRef[3];\r\n            if (sRefAttrs) {\r\n                let aXMLRefTag = sXMLRef.match(new RegExp(\"<\" + matchRef[1] + \"[^>]*>\"));\r\n                if (aXMLRefTag) {\r\n                    let sXMLNewTag = aXMLRefTag[0];\r\n                    /*\r\n                     * Iterate over all the attributes in the \"referring\" XML tag (sRefAttrs)\r\n                     */\r\n                    let matchAttr;\r\n                    let reAttr = /( [a-z]+=)(['\"])(.*?)\\2/gi;\r\n                    while ((matchAttr = reAttr.exec(sRefAttrs))) {\r\n                        if (sXMLNewTag.toLowerCase().indexOf(matchAttr[1].toLowerCase()) < 0) {\r\n                            /*\r\n                             * This is the append case....\r\n                             */\r\n                            sXMLNewTag = sXMLNewTag.replace(\">\", matchAttr[0] + \">\");\r\n                        } else {\r\n                            /*\r\n                             * This is the overwrite case....\r\n                             */\r\n                            sXMLNewTag = sXMLNewTag.replace(new RegExp(matchAttr[1] + \"(['\\\"])(.*?)\\\\1\"), matchAttr[0]);\r\n                        }\r\n                    }\r\n                    if (aXMLRefTag[0] != sXMLNewTag) {\r\n                        sXMLRef = sXMLRef.replace(aXMLRefTag[0], sXMLNewTag);\r\n                    }\r\n                } else {\r\n                    done(sURL, sXML, \"missing <\" + matchRef[1] + \"> in \" + sRefFile);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Apparently when a Windows Azure server delivers one of my XML files, it may modify the first line:\r\n             *\r\n             *      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n\r\n             *\r\n             * I didn't determine exactly what it was doing at this point (probably just changing the \\n to \\r\\n),\r\n             * but in any case, relaxing the following replace() solved it.\r\n             */\r\n            sXMLRef = sXMLRef.replace(/<\\?xml[^>]*>[\\r\\n]*/, \"\");\r\n\r\n            sXML = sXML.replace(matchRef[0], sXMLRef);\r\n\r\n            resolveXML(sURL, sXML, display, done);\r\n        };\r\n\r\n        display(\"Loading \" + sRefFile + \"...\");\r\n        WebLib.getResource(sRefFile, null, fAsync, doneReadXML);\r\n        return;\r\n    }\r\n    done(sURL, sXML, \"\");\r\n}\r\n\r\n/**\r\n * embedMachine(sAppName, sAppClass, idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n *\r\n * This allows to you embed a machine on a web page, by transforming the machine XML into HTML.\r\n *\r\n * @param {string} sAppName is the app name (eg, \"PCx86\")\r\n * @param {string} sAppClass is the app class (eg, \"pcx86\"); also known as the machine class\r\n * @param {string} idMachine\r\n * @param {string} [sXMLFile]\r\n * @param {string} [sXSLFile]\r\n * @param {string} [sParms] (machine parameters, if any)\r\n * @param {string} [sClass] (an optional machine class name used to style the machine)\r\n * @returns {boolean} true if successful, false if error\r\n */\r\nfunction embedMachine(sAppName, sAppClass, idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n{\r\n    let eMachine, eWarning, fSuccess = true;\r\n\r\n    cAsyncMachines++;\r\n    Component.addMachine(idMachine);\r\n\r\n    let doneMachine = function() {\r\n\r\n        if (!--cAsyncMachines) {\r\n            if (fAsync) WebLib.enablePageEvents(true);\r\n        }\r\n    };\r\n\r\n    if (!sXMLFile) {\r\n        /*\r\n         * For a machine whose layout is now pre-built based on a JSON config file, the method of passing any machine \"parms\" to\r\n         * the machine via a \"parms\" attribute of the XML <machine> tag no longer works, so we must also stash them as a property\r\n         * of the machine's resource object.\r\n         *\r\n         * An alternative approach would be to change the machine HTML template file to build the parms directly into the machine\r\n         * layout, but this is more expedient.\r\n         */\r\n        if (sParms) {\r\n            Component.addMachineResource(idMachine, \"parms\", sParms);\r\n        }\r\n        /*\r\n         * We used to replace a missing XML configuration file with a default path, but since we now support JSON-based configs,\r\n         * that had to change.\r\n         *\r\n         *      sXMLFile = \"machine.xml\";\r\n         *      if (!sXSLFile) sXSLFile = \"components.xsl\";\r\n         */\r\n        doneMachine();\r\n        return fSuccess;\r\n    }\r\n\r\n    if (WebLib.getURLParm('debugger') == \"true\" && sXMLFile.indexOf(\"/debugger\") < 0) {\r\n        sXMLFile = sXMLFile.replace(\"/machine.xml\", \"/debugger/machine.xml\");\r\n    }\r\n\r\n    let displayError = function(sURL, sError) {\r\n        if (typeof sError == \"string\") {\r\n            if (sError.indexOf(\"<!DOCTYPE html>\") >= 0) {\r\n                let match = sError.match(/<title>(?:PCjs: |)(.*?)<\\/title>/);\r\n                if (match) sError = match[1];\r\n            }\r\n        }\r\n        Component.printf(MESSAGE.ERROR, \"%s\\n\", sError);\r\n        displayMessage(\"Error: \" + sError + (sURL? \" (\" + sURL + \")\" : \"\"));\r\n        if (fSuccess) doneMachine();\r\n        fSuccess = false;\r\n    };\r\n\r\n    let displayMessage = function(sMessage) {\r\n        if (eWarning === undefined) {\r\n            /*\r\n             * Our MarkOut module (in convertMDMachineLinks()) creates machine containers that look like:\r\n             *\r\n             *      <div id=\"' + sMachineID + '\" class=\"machine-placeholder\"><p>Embedded PC</p><p class=\"machine-warning\">...</p></div>\r\n             *\r\n             * with the \"machine-warning\" paragraph pre-populated with a warning message that the user will\r\n             * see if nothing at all happens.  But hopefully, in the normal case (and especially the error case),\r\n             * *something* will have happened.\r\n             *\r\n             * Note that it is the HTMLOut module (in processMachines()) that ultimately decides which scripts to\r\n             * include and then generates the embedXXX() call.\r\n             */\r\n            let aeWarning = (eMachine && Component.getElementsByClass(\"machine-warning\", \"\", eMachine));\r\n            eWarning = (aeWarning && aeWarning[0]) || eMachine;\r\n        }\r\n        if (eWarning) eWarning.innerHTML = StrLib.escapeHTML(sMessage);\r\n    };\r\n\r\n    try {\r\n        eMachine = document.getElementById(idMachine);\r\n        if (eMachine) {\r\n\r\n            /*\r\n             * If we have a 'css' resource, add it to the page first.\r\n             */\r\n            let css;\r\n            let resources = globals.window['resources'];\r\n            if (typeof resources == \"object\" && (css = resources['css'])) {\r\n                let head = document.head || document.getElementsByTagName('head')[0];\r\n                let style = document.createElement('style');\r\n                style.type = 'text/css';\r\n                // noinspection JSDeprecatedSymbols\r\n                if (style.styleSheet) {\r\n                    // noinspection JSDeprecatedSymbols\r\n                    style.styleSheet.cssText = css;\r\n                } else {\r\n                    style.appendChild(document.createTextNode(css));\r\n                }\r\n                head.appendChild(style);\r\n            }\r\n\r\n            if (!sXSLFile) {\r\n                /*\r\n                 * Now that PCjs is an open-source project, we can make the following test more flexible,\r\n                 * and revert to the internal template if DEBUG *or* internal version (instead of *and*).\r\n                 *\r\n                 * Third-party sites that don't use the PCjs server will ALWAYS want to specify a fully-qualified\r\n                 * path to the XSL file, unless they choose to mirror our folder structure.\r\n                 */\r\n                sXSLFile = \"/machines/\" + sAppClass + \"/xsl/components.xsl\";\r\n            }\r\n\r\n            /*\r\n             * If sAppClass specified a folder (eg, \"osi/c1p\"), that was required for the location of the XSL file,\r\n             * but now all we want is the final folder name (eg, \"c1p\") for any XSL \"APPCLASS\" variable replacement.\r\n             */\r\n            sAppClass = sAppClass.split('/').pop();\r\n\r\n            let processXML = function(sURL, sXML, xml) {\r\n                if (!xml) {\r\n                    displayError(sURL, sXML);\r\n                    return;\r\n                }\r\n\r\n                let transformXML = function(sURL, sXSL, xsl) {\r\n                    if (!xsl) {\r\n                        displayError(sURL, sXSL);\r\n                        return;\r\n                    }\r\n\r\n                    /*\r\n                     * Record the XSL file, in case someone wants to save the entire machine later.\r\n                     *\r\n                     * NOTE: sXSLFile will never be undefined by this point, but apparently the Closure Compiler doesn't realize that.\r\n                     */\r\n                    Component.addMachineResource(idMachine, sXSLFile || \"\", sXSL);\r\n\r\n                    /*\r\n                     * The <machine> template in components.xsl now generates a \"machine div\" that makes\r\n                     * the div we required the caller of embedMachine() to provide redundant, so instead\r\n                     * of appending this fragment to the caller's node, we REPLACE the caller's node.\r\n                     * This works only because because we ALSO inject the caller's \"machine div\" ID into\r\n                     * the fragment's ID during parseXML().\r\n                     *\r\n                     *      eMachine.innerHTML = sFragment;\r\n                     *\r\n                     * Also, if the transform function fails, make sure you're using the appropriate\r\n                     * \"components.xsl\" and not a \"machine.xsl\", because the latter will not produce valid\r\n                     * embeddable HTML (and is the most common cause of failure at this final stage).\r\n                     */\r\n                    displayMessage(\"Processing \" + sXMLFile + \"...\");\r\n\r\n                    /*\r\n                     * Beginning with Microsoft Edge and the corresponding release of Windows 10, all the\r\n                     * 'ActiveXObject' crud has gone away; but of course, this code must remain in place if\r\n                     * we want to continue supporting older Internet Explorer browsers (ie, back to IE9).\r\n                     */\r\n                    if (window.ActiveXObject || 'ActiveXObject' in window) {        // second test is required for IE11 on Windows 8.1\r\n                        let sFragment = xml['transformNode'](xsl);\r\n                        if (sFragment) {\r\n                            eMachine.outerHTML = sFragment;\r\n                            doneMachine();\r\n                        } else {\r\n                            displayError(sURL, \"transformNodeToObject failed\");\r\n                        }\r\n                    }\r\n                    else if (document.implementation && document.implementation.createDocument) {\r\n                        let xsltProcessor = new XSLTProcessor();\r\n                        xsltProcessor['importStylesheet'](xsl);\r\n                        let eFragment = xsltProcessor['transformToFragment'](xml, document);\r\n                        if (eFragment) {\r\n                            /*\r\n                             * This fails in Microsoft Edge...\r\n                             *\r\n                             *      let machine = eFragment.getElementById(idMachine);\r\n                             *      if (!machine) {\r\n                             *          displayError(sURL, \"machine generation failed: \" + idMachine);\r\n                             *      }\r\n                             */\r\n                            let element = eMachine.parentNode;\r\n                            if (element) {\r\n\r\n                                let x = 0, y = 0;\r\n                                let rectOld = eMachine.getBoundingClientRect();\r\n                                if (rectOld.bottom < 0) {\r\n                                    x = window.scrollX;\r\n                                    y = window.scrollY;\r\n                                }\r\n\r\n                                element.replaceChild(eFragment, eMachine);\r\n\r\n                                eMachine = document.getElementById(idMachine);\r\n                                if (eMachine && rectOld.bottom < 0) {\r\n                                    let rectNew = eMachine.getBoundingClientRect();\r\n                                    if (window.performance && window.performance.navigation.type == window.performance.navigation.TYPE_RELOAD) {\r\n                                        /*\r\n                                         * TODO: I'm not sure what to do in this case, because the browser tries to be clever\r\n                                         * on a reload and preserve the original scroll position, but there are multiple variables\r\n                                         * (ie, the presence of a hash ID in the URL, and the fact that we just inserted an HTML\r\n                                         * fragment) that can cause the browser to do the wrong thing.  I could look up any hash\r\n                                         * element and call scrollIntoView(), but that addresses only one scenario.\r\n                                         *\r\n                                         * If I do nothing, then each successive reload simply causes the scroll position to creep\r\n                                         * farther and farther down the page.  So, I'm electing to go to the top of the page instead.\r\n                                         */\r\n                                        y = 0;\r\n                                    } else {\r\n                                        y += Math.ceil(rectNew.height - rectOld.height);\r\n                                    }\r\n                                    window.scrollTo(x, y);\r\n                                }\r\n                                doneMachine();\r\n                            } else {\r\n                                /*\r\n                                 * NOTE: This error can occur if our Node web server, when processing a folder with\r\n                                 * both a manifest.xml with a machine.xml reference AND a README.md containing a\r\n                                 * machine link, generates duplicate embedXXX() calls for the same machine; if the\r\n                                 * first embedXXX() call finds its target, subsequent calls for the same target will\r\n                                 * fail.\r\n                                 *\r\n                                 * Technically, such a folder is in a misconfigured state, but it happens, in part\r\n                                 * because when we switched to the Jekyll web server, we had to add machine links to\r\n                                 * all README.md files where we had previously relied on manifest.xml or machine.xml\r\n                                 * processing.  This is because the Jekyll web server currently doesn't process XML\r\n                                 * files, nor is support for that likely to be added any time soon; it was a nice\r\n                                 * feature of the Node web server, but it's not clear that it's worth doing for Jekyll.\r\n                                 */\r\n                                displayError(sURL, \"invalid machine element: \" + idMachine);\r\n                            }\r\n                        } else {\r\n                            displayError(sURL, \"transformToFragment failed\");\r\n                        }\r\n                    } else {\r\n                        /*\r\n                         * Perhaps I should have performed this test at the outset; on the other hand, I'm\r\n                         * not aware of any browsers don't support one or both of the above XSLT transformation\r\n                         * methods, so treat this as a bug.\r\n                         */\r\n                        displayError(sURL, \"unable to transform XML: unsupported browser\");\r\n                    }\r\n                };\r\n                /*\r\n                 * NOTE: sXSLFile will never be undefined by this point, but apparently the Closure Compiler doesn't realize that.\r\n                 */\r\n                loadXML(sXSLFile || \"\", \"\", sAppName, sAppClass, \"\", \"\", false, displayMessage, transformXML);\r\n            };\r\n\r\n            if (sXMLFile.charAt(0) != '<') {\r\n                loadXML(sXMLFile, idMachine, sAppName, sAppClass, sParms || \"\", sClass || \"\", true, displayMessage, processXML);\r\n            } else {\r\n                parseXML(sXMLFile, \"\", idMachine, sAppName, sAppClass, sParms || \"\", sClass || \"\", false, displayMessage, processXML);\r\n            }\r\n        } else {\r\n            displayError(sXMLFile, \"missing machine element: \" + idMachine);\r\n        }\r\n    } catch(e) {\r\n        displayError(sXMLFile, e.message);\r\n    }\r\n    return fSuccess;\r\n}\r\n\r\n/**\r\n * embedC1P(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n *\r\n * @param {string} idMachine\r\n * @param {string} [sXMLFile]\r\n * @param {string} [sXSLFile]\r\n * @param {string} [sParms]\r\n * @param {string} [sClass]\r\n * @returns {boolean} true if successful, false if error\r\n */\r\nfunction embedC1P(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n{\r\n    if (fAsync) WebLib.enablePageEvents(false);\r\n    return embedMachine(\"C1Pjs\", \"osi/c1p\", idMachine, sXMLFile, sXSLFile, undefined, sClass);\r\n}\r\n\r\n/**\r\n * embedPCx86(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n *\r\n * @param {string} idMachine\r\n * @param {string} [sXMLFile]\r\n * @param {string} [sXSLFile]\r\n * @param {string} [sParms]\r\n * @param {string} [sClass]\r\n * @returns {boolean} true if successful, false if error\r\n */\r\nfunction embedPCx86(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n{\r\n    if (fAsync) WebLib.enablePageEvents(false);\r\n    return embedMachine(\"PCx86\", \"pcx86\", idMachine, sXMLFile, sXSLFile, sParms, sClass);\r\n}\r\n\r\n/**\r\n * embedPCx80(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n *\r\n * @param {string} idMachine\r\n * @param {string} [sXMLFile]\r\n * @param {string} [sXSLFile]\r\n * @param {string} [sParms]\r\n * @param {string} [sClass]\r\n * @returns {boolean} true if successful, false if error\r\n */\r\nfunction embedPCx80(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n{\r\n    if (fAsync) WebLib.enablePageEvents(false);\r\n    return embedMachine(\"PCx80\", \"pcx80\", idMachine, sXMLFile, sXSLFile, sParms, sClass);\r\n}\r\n\r\n/**\r\n * embedPDP10(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n *\r\n * @param {string} idMachine\r\n * @param {string} [sXMLFile]\r\n * @param {string} [sXSLFile]\r\n * @param {string} [sParms]\r\n * @param {string} [sClass]\r\n * @returns {boolean} true if successful, false if error\r\n */\r\nfunction embedPDP10(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n{\r\n    if (fAsync) WebLib.enablePageEvents(false);\r\n    return embedMachine(\"PDPjs\", \"dec/pdp10\", idMachine, sXMLFile, sXSLFile, sParms, sClass);\r\n}\r\n\r\n/**\r\n * embedPDP11(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n *\r\n * @param {string} idMachine\r\n * @param {string} [sXMLFile]\r\n * @param {string} [sXSLFile]\r\n * @param {string} [sParms]\r\n * @param {string} [sClass]\r\n * @returns {boolean} true if successful, false if error\r\n */\r\nfunction embedPDP11(idMachine, sXMLFile, sXSLFile, sParms, sClass)\r\n{\r\n    if (fAsync) WebLib.enablePageEvents(false);\r\n    return embedMachine(\"PDPjs\", \"dec/pdp11\", idMachine, sXMLFile, sXSLFile, sParms, sClass);\r\n}\r\n\r\n/**\r\n * findMachineComponent(idMachine, sType)\r\n *\r\n * @param {string} idMachine\r\n * @param {string} sType\r\n * @returns {Component|null}\r\n */\r\nfunction findMachineComponent(idMachine, sType)\r\n{\r\n    return Component.getComponentByType(sType, idMachine + \".machine\");\r\n}\r\n\r\n/**\r\n * commandMachine(control, fSingle, idMachine, sComponent, sCommand, sValue)\r\n *\r\n * Use Component methods to find the requested component for a specific machine, and if the component is found,\r\n * then check its 'exports' table for an entry matching the specified command string, and if an entry is found, then\r\n * the corresponding function is called with the specified data.\r\n *\r\n * @param {Object} control\r\n * @param {boolean} fSingle\r\n * @param {string} idMachine\r\n * @param {string} sComponent\r\n * @param {string} sCommand\r\n * @param {string} [sValue]\r\n * @returns {boolean}\r\n */\r\nfunction commandMachine(control, fSingle, idMachine, sComponent, sCommand, sValue)\r\n{\r\n    if (sCommand == \"script\") {\r\n        if (Component.processScript(idMachine, sValue)) {\r\n            if (fSingle) control.disabled = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    if (sComponent) {\r\n        let component = Component.getComponentByType(sComponent, idMachine + \".machine\");\r\n        if (component) {\r\n            let exports = component['exports'];\r\n            if (exports) {\r\n                let fnCommand = exports[sCommand];\r\n                if (fnCommand) {\r\n                    if (fnCommand.call(component, sValue)) {\r\n                        if (fSingle) control.disabled = true;\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log(\"unimplemented: commandMachine('\" + idMachine + \"','\" + sComponent + \"','\" + sCommand + \"','\" + sValue + \"')\");\r\n    return false;\r\n}\r\n\r\nglobals.window['embedC1P']    = embedC1P;\r\nglobals.window['embedPC']     = embedPCx86;     // WARNING: embedPC() deprecated as of v1.23.0\r\nglobals.window['embedPCx86']  = embedPCx86;\r\nglobals.window['embedPCx80']  = embedPCx80;\r\nglobals.window['embedPDP10']  = embedPDP10;\r\nglobals.window['embedPDP11']  = embedPDP11;\r\nglobals.window['commandMachine'] = commandMachine;\r\n\r\nglobals.window['enableEvents'] = WebLib.enablePageEvents;\r\nglobals.window['sendEvent']    = WebLib.doPageEvent;\r\n\r\n"]}